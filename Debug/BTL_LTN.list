
BTL_LTN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3d4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a0  0800a4e8  0800a4e8  0001a4e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa88  0800aa88  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800aa88  0800aa88  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800aa88  0800aa88  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa88  0800aa88  0001aa88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aa8c  0800aa8c  0001aa8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800aa90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  200001ec  0800ac7c  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004e4  0800ac7c  000204e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e8bd  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a44  00000000  00000000  0002eb15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001060  00000000  00000000  00031560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ca6  00000000  00000000  000325c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019c39  00000000  00000000  00033266  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000140b5  00000000  00000000  0004ce9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00091b27  00000000  00000000  00060f54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005870  00000000  00000000  000f2a7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  000f82ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001ec 	.word	0x200001ec
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a4cc 	.word	0x0800a4cc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f0 	.word	0x200001f0
 800014c:	0800a4cc 	.word	0x0800a4cc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_d2lz>:
 8000d84:	b538      	push	{r3, r4, r5, lr}
 8000d86:	4605      	mov	r5, r0
 8000d88:	460c      	mov	r4, r1
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	4628      	mov	r0, r5
 8000d90:	4621      	mov	r1, r4
 8000d92:	f7ff fe13 	bl	80009bc <__aeabi_dcmplt>
 8000d96:	b928      	cbnz	r0, 8000da4 <__aeabi_d2lz+0x20>
 8000d98:	4628      	mov	r0, r5
 8000d9a:	4621      	mov	r1, r4
 8000d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000da0:	f000 b80a 	b.w	8000db8 <__aeabi_d2ulz>
 8000da4:	4628      	mov	r0, r5
 8000da6:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000daa:	f000 f805 	bl	8000db8 <__aeabi_d2ulz>
 8000dae:	4240      	negs	r0, r0
 8000db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db4:	bd38      	pop	{r3, r4, r5, pc}
 8000db6:	bf00      	nop

08000db8 <__aeabi_d2ulz>:
 8000db8:	b5d0      	push	{r4, r6, r7, lr}
 8000dba:	2200      	movs	r2, #0
 8000dbc:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <__aeabi_d2ulz+0x34>)
 8000dbe:	4606      	mov	r6, r0
 8000dc0:	460f      	mov	r7, r1
 8000dc2:	f7ff fb89 	bl	80004d8 <__aeabi_dmul>
 8000dc6:	f7ff fe5f 	bl	8000a88 <__aeabi_d2uiz>
 8000dca:	4604      	mov	r4, r0
 8000dcc:	f7ff fb0a 	bl	80003e4 <__aeabi_ui2d>
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <__aeabi_d2ulz+0x38>)
 8000dd4:	f7ff fb80 	bl	80004d8 <__aeabi_dmul>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	460b      	mov	r3, r1
 8000ddc:	4630      	mov	r0, r6
 8000dde:	4639      	mov	r1, r7
 8000de0:	f7ff f9c2 	bl	8000168 <__aeabi_dsub>
 8000de4:	f7ff fe50 	bl	8000a88 <__aeabi_d2uiz>
 8000de8:	4621      	mov	r1, r4
 8000dea:	bdd0      	pop	{r4, r6, r7, pc}
 8000dec:	3df00000 	.word	0x3df00000
 8000df0:	41f00000 	.word	0x41f00000

08000df4 <Display_Temp>:
//    }
//}


void Display_Temp (float Temp)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b088      	sub	sp, #32
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
	char str[20] = {0};
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	f107 0310 	add.w	r3, r7, #16
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
	lcd_goto_XY(0,0);
 8000e0e:	2100      	movs	r1, #0
 8000e10:	2000      	movs	r0, #0
 8000e12:	f000 fb49 	bl	80014a8 <lcd_goto_XY>
	sprintf (str, "Temp: %.2f", Temp);
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	f7ff fb06 	bl	8000428 <__aeabi_f2d>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	460b      	mov	r3, r1
 8000e20:	f107 000c 	add.w	r0, r7, #12
 8000e24:	4908      	ldr	r1, [pc, #32]	; (8000e48 <Display_Temp+0x54>)
 8000e26:	f005 fecd 	bl	8006bc4 <siprintf>
	lcd_send_string(str);
 8000e2a:	f107 030c 	add.w	r3, r7, #12
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f000 fb1e 	bl	8001470 <lcd_send_string>
	lcd_send_data(0b11011111);
 8000e34:	20df      	movs	r0, #223	; 0xdf
 8000e36:	f000 fabd 	bl	80013b4 <lcd_send_data>
	lcd_send_data('C');
 8000e3a:	2043      	movs	r0, #67	; 0x43
 8000e3c:	f000 faba 	bl	80013b4 <lcd_send_data>
}
 8000e40:	bf00      	nop
 8000e42:	3720      	adds	r7, #32
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	0800a4e8 	.word	0x0800a4e8

08000e4c <Display_Rh>:

//function to display RH
void Display_Rh (float Humid)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b088      	sub	sp, #32
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
	char str[20] = {0};
 8000e54:	2300      	movs	r3, #0
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	f107 0310 	add.w	r3, r7, #16
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
	lcd_goto_XY(1, 0);
 8000e66:	2100      	movs	r1, #0
 8000e68:	2001      	movs	r0, #1
 8000e6a:	f000 fb1d 	bl	80014a8 <lcd_goto_XY>
	sprintf (str, "Humid: %.2f", Humid);
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f7ff fada 	bl	8000428 <__aeabi_f2d>
 8000e74:	4602      	mov	r2, r0
 8000e76:	460b      	mov	r3, r1
 8000e78:	f107 000c 	add.w	r0, r7, #12
 8000e7c:	4907      	ldr	r1, [pc, #28]	; (8000e9c <Display_Rh+0x50>)
 8000e7e:	f005 fea1 	bl	8006bc4 <siprintf>
	lcd_send_string(str);
 8000e82:	f107 030c 	add.w	r3, r7, #12
 8000e86:	4618      	mov	r0, r3
 8000e88:	f000 faf2 	bl	8001470 <lcd_send_string>
	lcd_send_data('%');
 8000e8c:	2025      	movs	r0, #37	; 0x25
 8000e8e:	f000 fa91 	bl	80013b4 <lcd_send_data>
}
 8000e92:	bf00      	nop
 8000e94:	3720      	adds	r7, #32
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	0800a4f4 	.word	0x0800a4f4

08000ea0 <Set_Pin_Output>:
//
//    float Temperature = 0;
//    float Humidity = 0;
//    uint8_t Presence = 0;
void Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eac:	f107 0308 	add.w	r3, r7, #8
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000eba:	887b      	ldrh	r3, [r7, #2]
 8000ebc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000ec6:	f107 0308 	add.w	r3, r7, #8
 8000eca:	4619      	mov	r1, r3
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	f002 fe0b 	bl	8003ae8 <HAL_GPIO_Init>
}
 8000ed2:	bf00      	nop
 8000ed4:	3718      	adds	r7, #24
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <Set_Pin_Input>:

//function to set pin as input
void Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b086      	sub	sp, #24
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
 8000ee2:	460b      	mov	r3, r1
 8000ee4:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee6:	f107 0308 	add.w	r3, r7, #8
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	605a      	str	r2, [r3, #4]
 8000ef0:	609a      	str	r2, [r3, #8]
 8000ef2:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000ef4:	887b      	ldrh	r3, [r7, #2]
 8000ef6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL; //can be changed to PULLUP if no data is received from the pin
 8000efc:	2300      	movs	r3, #0
 8000efe:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000f00:	f107 0308 	add.w	r3, r7, #8
 8000f04:	4619      	mov	r1, r3
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f002 fdee 	bl	8003ae8 <HAL_GPIO_Init>
}
 8000f0c:	bf00      	nop
 8000f0e:	3718      	adds	r7, #24
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <DHT11_Start>:
#define DHT11_PORT GPIOB
#define DHT11_PIN GPIO_PIN_5

//Function to send the start signal
void DHT11_Start (void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT11_PORT, DHT11_PIN); //set the dht pin as output
 8000f18:	2120      	movs	r1, #32
 8000f1a:	4811      	ldr	r0, [pc, #68]	; (8000f60 <DHT11_Start+0x4c>)
 8000f1c:	f7ff ffc0 	bl	8000ea0 <Set_Pin_Output>
	/***********************************************/
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 1); //initialize with data pin high
 8000f20:	2201      	movs	r2, #1
 8000f22:	2120      	movs	r1, #32
 8000f24:	480e      	ldr	r0, [pc, #56]	; (8000f60 <DHT11_Start+0x4c>)
 8000f26:	f002 ff7a 	bl	8003e1e <HAL_GPIO_WritePin>
	HAL_Delay(1000); //wait for 1000 milliseconds
 8000f2a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f2e:	f001 fe99 	bl	8002c64 <HAL_Delay>
	/***********************************************/

	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0); //pull the pin low
 8000f32:	2200      	movs	r2, #0
 8000f34:	2120      	movs	r1, #32
 8000f36:	480a      	ldr	r0, [pc, #40]	; (8000f60 <DHT11_Start+0x4c>)
 8000f38:	f002 ff71 	bl	8003e1e <HAL_GPIO_WritePin>
	delay(18000); //wait 18 milliseconds
 8000f3c:	f244 6050 	movw	r0, #18000	; 0x4650
 8000f40:	f000 fdaa 	bl	8001a98 <delay>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1); //pull the pin high
 8000f44:	2201      	movs	r2, #1
 8000f46:	2120      	movs	r1, #32
 8000f48:	4805      	ldr	r0, [pc, #20]	; (8000f60 <DHT11_Start+0x4c>)
 8000f4a:	f002 ff68 	bl	8003e1e <HAL_GPIO_WritePin>
	delay(20); //wait for 20 microseconds
 8000f4e:	2014      	movs	r0, #20
 8000f50:	f000 fda2 	bl	8001a98 <delay>
	Set_Pin_Input(DHT11_PORT, DHT11_PIN); //set the pin as input
 8000f54:	2120      	movs	r1, #32
 8000f56:	4802      	ldr	r0, [pc, #8]	; (8000f60 <DHT11_Start+0x4c>)
 8000f58:	f7ff ffbf 	bl	8000eda <Set_Pin_Input>
}
 8000f5c:	bf00      	nop
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	40010c00 	.word	0x40010c00

08000f64 <DHT11_Check_Response>:

//dh11 function to check response
uint8_t DHT11_Check_Response (void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	71fb      	strb	r3, [r7, #7]
	delay(40); //first wait for 40 microseconds
 8000f6e:	2028      	movs	r0, #40	; 0x28
 8000f70:	f000 fd92 	bl	8001a98 <delay>
	if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) //check for pin to be low
 8000f74:	2120      	movs	r1, #32
 8000f76:	4811      	ldr	r0, [pc, #68]	; (8000fbc <DHT11_Check_Response+0x58>)
 8000f78:	f002 ff3a 	bl	8003df0 <HAL_GPIO_ReadPin>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d10e      	bne.n	8000fa0 <DHT11_Check_Response+0x3c>
	{
		delay(80); //wait for 80 microseconds
 8000f82:	2050      	movs	r0, #80	; 0x50
 8000f84:	f000 fd88 	bl	8001a98 <delay>
		if((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1; //check if pin is high and return 1 to show sensor is present
 8000f88:	2120      	movs	r1, #32
 8000f8a:	480c      	ldr	r0, [pc, #48]	; (8000fbc <DHT11_Check_Response+0x58>)
 8000f8c:	f002 ff30 	bl	8003df0 <HAL_GPIO_ReadPin>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d002      	beq.n	8000f9c <DHT11_Check_Response+0x38>
 8000f96:	2301      	movs	r3, #1
 8000f98:	71fb      	strb	r3, [r7, #7]
 8000f9a:	e001      	b.n	8000fa0 <DHT11_Check_Response+0x3c>
		else Response = -1; //255
 8000f9c:	23ff      	movs	r3, #255	; 0xff
 8000f9e:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))); //wait for the pin to go low again
 8000fa0:	bf00      	nop
 8000fa2:	2120      	movs	r1, #32
 8000fa4:	4805      	ldr	r0, [pc, #20]	; (8000fbc <DHT11_Check_Response+0x58>)
 8000fa6:	f002 ff23 	bl	8003df0 <HAL_GPIO_ReadPin>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d1f8      	bne.n	8000fa2 <DHT11_Check_Response+0x3e>

	return Response;
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40010c00 	.word	0x40010c00

08000fc0 <DHT11_Read>:

//function to read data from dht11 signal pin
uint8_t DHT11_Read (void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
	uint8_t i, j;
	for (j=0;j<8;j++)
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	71bb      	strb	r3, [r7, #6]
 8000fca:	e037      	b.n	800103c <DHT11_Read+0x7c>
	{
		while(!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))); //wait for the pin to change to high
 8000fcc:	bf00      	nop
 8000fce:	2120      	movs	r1, #32
 8000fd0:	481e      	ldr	r0, [pc, #120]	; (800104c <DHT11_Read+0x8c>)
 8000fd2:	f002 ff0d 	bl	8003df0 <HAL_GPIO_ReadPin>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d0f8      	beq.n	8000fce <DHT11_Read+0xe>
		delay(40); //wait for 40 microseconds
 8000fdc:	2028      	movs	r0, #40	; 0x28
 8000fde:	f000 fd5b 	bl	8001a98 <delay>
		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) //if the pin is low
 8000fe2:	2120      	movs	r1, #32
 8000fe4:	4819      	ldr	r0, [pc, #100]	; (800104c <DHT11_Read+0x8c>)
 8000fe6:	f002 ff03 	bl	8003df0 <HAL_GPIO_ReadPin>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d10e      	bne.n	800100e <DHT11_Read+0x4e>
		{
			i&= ~(1<<(7-j)); //write 0
 8000ff0:	79bb      	ldrb	r3, [r7, #6]
 8000ff2:	f1c3 0307 	rsb	r3, r3, #7
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	b25b      	sxtb	r3, r3
 8000ffe:	43db      	mvns	r3, r3
 8001000:	b25a      	sxtb	r2, r3
 8001002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001006:	4013      	ands	r3, r2
 8001008:	b25b      	sxtb	r3, r3
 800100a:	71fb      	strb	r3, [r7, #7]
 800100c:	e00b      	b.n	8001026 <DHT11_Read+0x66>
		}
		else i|= (1<<(7-j)); //if the pin is high write 1
 800100e:	79bb      	ldrb	r3, [r7, #6]
 8001010:	f1c3 0307 	rsb	r3, r3, #7
 8001014:	2201      	movs	r2, #1
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	b25a      	sxtb	r2, r3
 800101c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001020:	4313      	orrs	r3, r2
 8001022:	b25b      	sxtb	r3, r3
 8001024:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))); //wait for the pin to go low
 8001026:	bf00      	nop
 8001028:	2120      	movs	r1, #32
 800102a:	4808      	ldr	r0, [pc, #32]	; (800104c <DHT11_Read+0x8c>)
 800102c:	f002 fee0 	bl	8003df0 <HAL_GPIO_ReadPin>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d1f8      	bne.n	8001028 <DHT11_Read+0x68>
	for (j=0;j<8;j++)
 8001036:	79bb      	ldrb	r3, [r7, #6]
 8001038:	3301      	adds	r3, #1
 800103a:	71bb      	strb	r3, [r7, #6]
 800103c:	79bb      	ldrb	r3, [r7, #6]
 800103e:	2b07      	cmp	r3, #7
 8001040:	d9c4      	bls.n	8000fcc <DHT11_Read+0xc>
	}

	return i;
 8001042:	79fb      	ldrb	r3, [r7, #7]
}
 8001044:	4618      	mov	r0, r3
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40010c00 	.word	0x40010c00

08001050 <KEYPAD_GetChar>:
    /* Set all ROW pins to High level */
    HAL_GPIO_WritePin(GPIOA, KEYPAD_ROW1_PIN | KEYPAD_ROW2_PIN | KEYPAD_ROW3_PIN | KEYPAD_ROW4_PIN | KEYPAD_ROW5_PIN, GPIO_PIN_SET);
}

//#############################################################################################
char KEYPAD_GetChar(void){
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
	// Check ROW 1 ----------------------------------------------------------------------------------------
	HAL_GPIO_WritePin(GPIOA, KEYPAD_ROW1_PIN, 1) ;
 8001054:	2201      	movs	r2, #1
 8001056:	f44f 7180 	mov.w	r1, #256	; 0x100
 800105a:	48b2      	ldr	r0, [pc, #712]	; (8001324 <KEYPAD_GetChar+0x2d4>)
 800105c:	f002 fedf 	bl	8003e1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, KEYPAD_ROW2_PIN, 0) ;
 8001060:	2200      	movs	r2, #0
 8001062:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001066:	48af      	ldr	r0, [pc, #700]	; (8001324 <KEYPAD_GetChar+0x2d4>)
 8001068:	f002 fed9 	bl	8003e1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, KEYPAD_ROW3_PIN, 0) ;
 800106c:	2200      	movs	r2, #0
 800106e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001072:	48ac      	ldr	r0, [pc, #688]	; (8001324 <KEYPAD_GetChar+0x2d4>)
 8001074:	f002 fed3 	bl	8003e1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, KEYPAD_ROW4_PIN, 0) ;
 8001078:	2200      	movs	r2, #0
 800107a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800107e:	48a9      	ldr	r0, [pc, #676]	; (8001324 <KEYPAD_GetChar+0x2d4>)
 8001080:	f002 fecd 	bl	8003e1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, KEYPAD_ROW5_PIN, 0) ;
 8001084:	2200      	movs	r2, #0
 8001086:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800108a:	48a6      	ldr	r0, [pc, #664]	; (8001324 <KEYPAD_GetChar+0x2d4>)
 800108c:	f002 fec7 	bl	8003e1e <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYPAD_COL1_PIN) == 1)return KEYPAD_Val[4][0];
 8001090:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001094:	48a4      	ldr	r0, [pc, #656]	; (8001328 <KEYPAD_GetChar+0x2d8>)
 8001096:	f002 feab 	bl	8003df0 <HAL_GPIO_ReadPin>
 800109a:	4603      	mov	r3, r0
 800109c:	2b01      	cmp	r3, #1
 800109e:	d102      	bne.n	80010a6 <KEYPAD_GetChar+0x56>
 80010a0:	4ba2      	ldr	r3, [pc, #648]	; (800132c <KEYPAD_GetChar+0x2dc>)
 80010a2:	7c1b      	ldrb	r3, [r3, #16]
 80010a4:	e150      	b.n	8001348 <KEYPAD_GetChar+0x2f8>
		else if(HAL_GPIO_ReadPin(GPIOB, KEYPAD_COL2_PIN) == 1) return KEYPAD_Val[4][1] ;
 80010a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010aa:	489f      	ldr	r0, [pc, #636]	; (8001328 <KEYPAD_GetChar+0x2d8>)
 80010ac:	f002 fea0 	bl	8003df0 <HAL_GPIO_ReadPin>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d102      	bne.n	80010bc <KEYPAD_GetChar+0x6c>
 80010b6:	4b9d      	ldr	r3, [pc, #628]	; (800132c <KEYPAD_GetChar+0x2dc>)
 80010b8:	7c5b      	ldrb	r3, [r3, #17]
 80010ba:	e145      	b.n	8001348 <KEYPAD_GetChar+0x2f8>
			else if(HAL_GPIO_ReadPin(GPIOB, KEYPAD_COL3_PIN) == 1) return KEYPAD_Val[4][2] ;
 80010bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010c0:	4899      	ldr	r0, [pc, #612]	; (8001328 <KEYPAD_GetChar+0x2d8>)
 80010c2:	f002 fe95 	bl	8003df0 <HAL_GPIO_ReadPin>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d102      	bne.n	80010d2 <KEYPAD_GetChar+0x82>
 80010cc:	4b97      	ldr	r3, [pc, #604]	; (800132c <KEYPAD_GetChar+0x2dc>)
 80010ce:	7c9b      	ldrb	r3, [r3, #18]
 80010d0:	e13a      	b.n	8001348 <KEYPAD_GetChar+0x2f8>
				else if(HAL_GPIO_ReadPin(GPIOB, KEYPAD_COL4_PIN) == 1) return KEYPAD_Val[4][3] ;
 80010d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010d6:	4894      	ldr	r0, [pc, #592]	; (8001328 <KEYPAD_GetChar+0x2d8>)
 80010d8:	f002 fe8a 	bl	8003df0 <HAL_GPIO_ReadPin>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d102      	bne.n	80010e8 <KEYPAD_GetChar+0x98>
 80010e2:	4b92      	ldr	r3, [pc, #584]	; (800132c <KEYPAD_GetChar+0x2dc>)
 80010e4:	7cdb      	ldrb	r3, [r3, #19]
 80010e6:	e12f      	b.n	8001348 <KEYPAD_GetChar+0x2f8>

	// Check ROW 2 ----------------------------------------------------------------------------------------
	HAL_GPIO_WritePin(GPIOA, KEYPAD_ROW1_PIN, 0) ;
 80010e8:	2200      	movs	r2, #0
 80010ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ee:	488d      	ldr	r0, [pc, #564]	; (8001324 <KEYPAD_GetChar+0x2d4>)
 80010f0:	f002 fe95 	bl	8003e1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, KEYPAD_ROW2_PIN, 1) ;
 80010f4:	2201      	movs	r2, #1
 80010f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010fa:	488a      	ldr	r0, [pc, #552]	; (8001324 <KEYPAD_GetChar+0x2d4>)
 80010fc:	f002 fe8f 	bl	8003e1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, KEYPAD_ROW3_PIN, 0) ;
 8001100:	2200      	movs	r2, #0
 8001102:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001106:	4887      	ldr	r0, [pc, #540]	; (8001324 <KEYPAD_GetChar+0x2d4>)
 8001108:	f002 fe89 	bl	8003e1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, KEYPAD_ROW4_PIN, 0) ;
 800110c:	2200      	movs	r2, #0
 800110e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001112:	4884      	ldr	r0, [pc, #528]	; (8001324 <KEYPAD_GetChar+0x2d4>)
 8001114:	f002 fe83 	bl	8003e1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, KEYPAD_ROW5_PIN, 0) ;
 8001118:	2200      	movs	r2, #0
 800111a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800111e:	4881      	ldr	r0, [pc, #516]	; (8001324 <KEYPAD_GetChar+0x2d4>)
 8001120:	f002 fe7d 	bl	8003e1e <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYPAD_COL1_PIN) == 1)return KEYPAD_Val[3][0];
 8001124:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001128:	487f      	ldr	r0, [pc, #508]	; (8001328 <KEYPAD_GetChar+0x2d8>)
 800112a:	f002 fe61 	bl	8003df0 <HAL_GPIO_ReadPin>
 800112e:	4603      	mov	r3, r0
 8001130:	2b01      	cmp	r3, #1
 8001132:	d102      	bne.n	800113a <KEYPAD_GetChar+0xea>
 8001134:	4b7d      	ldr	r3, [pc, #500]	; (800132c <KEYPAD_GetChar+0x2dc>)
 8001136:	7b1b      	ldrb	r3, [r3, #12]
 8001138:	e106      	b.n	8001348 <KEYPAD_GetChar+0x2f8>
		else if(HAL_GPIO_ReadPin(GPIOB, KEYPAD_COL2_PIN) == 1) return KEYPAD_Val[3][1] ;
 800113a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800113e:	487a      	ldr	r0, [pc, #488]	; (8001328 <KEYPAD_GetChar+0x2d8>)
 8001140:	f002 fe56 	bl	8003df0 <HAL_GPIO_ReadPin>
 8001144:	4603      	mov	r3, r0
 8001146:	2b01      	cmp	r3, #1
 8001148:	d102      	bne.n	8001150 <KEYPAD_GetChar+0x100>
 800114a:	4b78      	ldr	r3, [pc, #480]	; (800132c <KEYPAD_GetChar+0x2dc>)
 800114c:	7b5b      	ldrb	r3, [r3, #13]
 800114e:	e0fb      	b.n	8001348 <KEYPAD_GetChar+0x2f8>
			else if(HAL_GPIO_ReadPin(GPIOB, KEYPAD_COL3_PIN) == 1) return KEYPAD_Val[3][2] ;
 8001150:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001154:	4874      	ldr	r0, [pc, #464]	; (8001328 <KEYPAD_GetChar+0x2d8>)
 8001156:	f002 fe4b 	bl	8003df0 <HAL_GPIO_ReadPin>
 800115a:	4603      	mov	r3, r0
 800115c:	2b01      	cmp	r3, #1
 800115e:	d102      	bne.n	8001166 <KEYPAD_GetChar+0x116>
 8001160:	4b72      	ldr	r3, [pc, #456]	; (800132c <KEYPAD_GetChar+0x2dc>)
 8001162:	7b9b      	ldrb	r3, [r3, #14]
 8001164:	e0f0      	b.n	8001348 <KEYPAD_GetChar+0x2f8>
				else if(HAL_GPIO_ReadPin(GPIOB, KEYPAD_COL4_PIN) == 1) return KEYPAD_Val[3][3] ;
 8001166:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800116a:	486f      	ldr	r0, [pc, #444]	; (8001328 <KEYPAD_GetChar+0x2d8>)
 800116c:	f002 fe40 	bl	8003df0 <HAL_GPIO_ReadPin>
 8001170:	4603      	mov	r3, r0
 8001172:	2b01      	cmp	r3, #1
 8001174:	d102      	bne.n	800117c <KEYPAD_GetChar+0x12c>
 8001176:	4b6d      	ldr	r3, [pc, #436]	; (800132c <KEYPAD_GetChar+0x2dc>)
 8001178:	7bdb      	ldrb	r3, [r3, #15]
 800117a:	e0e5      	b.n	8001348 <KEYPAD_GetChar+0x2f8>

	// Check ROW 3 ----------------------------------------------------------------------------------------
	HAL_GPIO_WritePin(GPIOA, KEYPAD_ROW1_PIN, 0) ;
 800117c:	2200      	movs	r2, #0
 800117e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001182:	4868      	ldr	r0, [pc, #416]	; (8001324 <KEYPAD_GetChar+0x2d4>)
 8001184:	f002 fe4b 	bl	8003e1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, KEYPAD_ROW2_PIN, 0) ;
 8001188:	2200      	movs	r2, #0
 800118a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800118e:	4865      	ldr	r0, [pc, #404]	; (8001324 <KEYPAD_GetChar+0x2d4>)
 8001190:	f002 fe45 	bl	8003e1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, KEYPAD_ROW3_PIN, 1) ;
 8001194:	2201      	movs	r2, #1
 8001196:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800119a:	4862      	ldr	r0, [pc, #392]	; (8001324 <KEYPAD_GetChar+0x2d4>)
 800119c:	f002 fe3f 	bl	8003e1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, KEYPAD_ROW4_PIN, 0) ;
 80011a0:	2200      	movs	r2, #0
 80011a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011a6:	485f      	ldr	r0, [pc, #380]	; (8001324 <KEYPAD_GetChar+0x2d4>)
 80011a8:	f002 fe39 	bl	8003e1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, KEYPAD_ROW5_PIN, 0) ;
 80011ac:	2200      	movs	r2, #0
 80011ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011b2:	485c      	ldr	r0, [pc, #368]	; (8001324 <KEYPAD_GetChar+0x2d4>)
 80011b4:	f002 fe33 	bl	8003e1e <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYPAD_COL1_PIN) == 1)return KEYPAD_Val[2][0];
 80011b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011bc:	485a      	ldr	r0, [pc, #360]	; (8001328 <KEYPAD_GetChar+0x2d8>)
 80011be:	f002 fe17 	bl	8003df0 <HAL_GPIO_ReadPin>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d102      	bne.n	80011ce <KEYPAD_GetChar+0x17e>
 80011c8:	4b58      	ldr	r3, [pc, #352]	; (800132c <KEYPAD_GetChar+0x2dc>)
 80011ca:	7a1b      	ldrb	r3, [r3, #8]
 80011cc:	e0bc      	b.n	8001348 <KEYPAD_GetChar+0x2f8>
		else if(HAL_GPIO_ReadPin(GPIOB, KEYPAD_COL2_PIN) == 1) return KEYPAD_Val[2][1] ;
 80011ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011d2:	4855      	ldr	r0, [pc, #340]	; (8001328 <KEYPAD_GetChar+0x2d8>)
 80011d4:	f002 fe0c 	bl	8003df0 <HAL_GPIO_ReadPin>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d102      	bne.n	80011e4 <KEYPAD_GetChar+0x194>
 80011de:	4b53      	ldr	r3, [pc, #332]	; (800132c <KEYPAD_GetChar+0x2dc>)
 80011e0:	7a5b      	ldrb	r3, [r3, #9]
 80011e2:	e0b1      	b.n	8001348 <KEYPAD_GetChar+0x2f8>
			else if(HAL_GPIO_ReadPin(GPIOB, KEYPAD_COL3_PIN) == 1) return KEYPAD_Val[2][2] ;
 80011e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011e8:	484f      	ldr	r0, [pc, #316]	; (8001328 <KEYPAD_GetChar+0x2d8>)
 80011ea:	f002 fe01 	bl	8003df0 <HAL_GPIO_ReadPin>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d102      	bne.n	80011fa <KEYPAD_GetChar+0x1aa>
 80011f4:	4b4d      	ldr	r3, [pc, #308]	; (800132c <KEYPAD_GetChar+0x2dc>)
 80011f6:	7a9b      	ldrb	r3, [r3, #10]
 80011f8:	e0a6      	b.n	8001348 <KEYPAD_GetChar+0x2f8>
				else if(HAL_GPIO_ReadPin(GPIOB, KEYPAD_COL4_PIN) == 1) return KEYPAD_Val[2][3] ;
 80011fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011fe:	484a      	ldr	r0, [pc, #296]	; (8001328 <KEYPAD_GetChar+0x2d8>)
 8001200:	f002 fdf6 	bl	8003df0 <HAL_GPIO_ReadPin>
 8001204:	4603      	mov	r3, r0
 8001206:	2b01      	cmp	r3, #1
 8001208:	d102      	bne.n	8001210 <KEYPAD_GetChar+0x1c0>
 800120a:	4b48      	ldr	r3, [pc, #288]	; (800132c <KEYPAD_GetChar+0x2dc>)
 800120c:	7adb      	ldrb	r3, [r3, #11]
 800120e:	e09b      	b.n	8001348 <KEYPAD_GetChar+0x2f8>

	// Check ROW 4 ----------------------------------------------------------------------------------------
	HAL_GPIO_WritePin(GPIOA, KEYPAD_ROW1_PIN, 0) ;
 8001210:	2200      	movs	r2, #0
 8001212:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001216:	4843      	ldr	r0, [pc, #268]	; (8001324 <KEYPAD_GetChar+0x2d4>)
 8001218:	f002 fe01 	bl	8003e1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, KEYPAD_ROW2_PIN, 0) ;
 800121c:	2200      	movs	r2, #0
 800121e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001222:	4840      	ldr	r0, [pc, #256]	; (8001324 <KEYPAD_GetChar+0x2d4>)
 8001224:	f002 fdfb 	bl	8003e1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, KEYPAD_ROW3_PIN, 0) ;
 8001228:	2200      	movs	r2, #0
 800122a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800122e:	483d      	ldr	r0, [pc, #244]	; (8001324 <KEYPAD_GetChar+0x2d4>)
 8001230:	f002 fdf5 	bl	8003e1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, KEYPAD_ROW4_PIN, 1) ;
 8001234:	2201      	movs	r2, #1
 8001236:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800123a:	483a      	ldr	r0, [pc, #232]	; (8001324 <KEYPAD_GetChar+0x2d4>)
 800123c:	f002 fdef 	bl	8003e1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, KEYPAD_ROW5_PIN, 0) ;
 8001240:	2200      	movs	r2, #0
 8001242:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001246:	4837      	ldr	r0, [pc, #220]	; (8001324 <KEYPAD_GetChar+0x2d4>)
 8001248:	f002 fde9 	bl	8003e1e <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYPAD_COL1_PIN) == 1)return KEYPAD_Val[1][0];
 800124c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001250:	4835      	ldr	r0, [pc, #212]	; (8001328 <KEYPAD_GetChar+0x2d8>)
 8001252:	f002 fdcd 	bl	8003df0 <HAL_GPIO_ReadPin>
 8001256:	4603      	mov	r3, r0
 8001258:	2b01      	cmp	r3, #1
 800125a:	d102      	bne.n	8001262 <KEYPAD_GetChar+0x212>
 800125c:	4b33      	ldr	r3, [pc, #204]	; (800132c <KEYPAD_GetChar+0x2dc>)
 800125e:	791b      	ldrb	r3, [r3, #4]
 8001260:	e072      	b.n	8001348 <KEYPAD_GetChar+0x2f8>
		else if(HAL_GPIO_ReadPin(GPIOB, KEYPAD_COL2_PIN) == 1) return KEYPAD_Val[1][1] ;
 8001262:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001266:	4830      	ldr	r0, [pc, #192]	; (8001328 <KEYPAD_GetChar+0x2d8>)
 8001268:	f002 fdc2 	bl	8003df0 <HAL_GPIO_ReadPin>
 800126c:	4603      	mov	r3, r0
 800126e:	2b01      	cmp	r3, #1
 8001270:	d102      	bne.n	8001278 <KEYPAD_GetChar+0x228>
 8001272:	4b2e      	ldr	r3, [pc, #184]	; (800132c <KEYPAD_GetChar+0x2dc>)
 8001274:	795b      	ldrb	r3, [r3, #5]
 8001276:	e067      	b.n	8001348 <KEYPAD_GetChar+0x2f8>
			else if(HAL_GPIO_ReadPin(GPIOB, KEYPAD_COL3_PIN) == 1) return KEYPAD_Val[1][2] ;
 8001278:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800127c:	482a      	ldr	r0, [pc, #168]	; (8001328 <KEYPAD_GetChar+0x2d8>)
 800127e:	f002 fdb7 	bl	8003df0 <HAL_GPIO_ReadPin>
 8001282:	4603      	mov	r3, r0
 8001284:	2b01      	cmp	r3, #1
 8001286:	d102      	bne.n	800128e <KEYPAD_GetChar+0x23e>
 8001288:	4b28      	ldr	r3, [pc, #160]	; (800132c <KEYPAD_GetChar+0x2dc>)
 800128a:	799b      	ldrb	r3, [r3, #6]
 800128c:	e05c      	b.n	8001348 <KEYPAD_GetChar+0x2f8>
				else if(HAL_GPIO_ReadPin(GPIOB, KEYPAD_COL4_PIN) == 1) return KEYPAD_Val[1][3] ;
 800128e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001292:	4825      	ldr	r0, [pc, #148]	; (8001328 <KEYPAD_GetChar+0x2d8>)
 8001294:	f002 fdac 	bl	8003df0 <HAL_GPIO_ReadPin>
 8001298:	4603      	mov	r3, r0
 800129a:	2b01      	cmp	r3, #1
 800129c:	d102      	bne.n	80012a4 <KEYPAD_GetChar+0x254>
 800129e:	4b23      	ldr	r3, [pc, #140]	; (800132c <KEYPAD_GetChar+0x2dc>)
 80012a0:	79db      	ldrb	r3, [r3, #7]
 80012a2:	e051      	b.n	8001348 <KEYPAD_GetChar+0x2f8>

	// Check ROW 5 ----------------------------------------------------------------------------------------
	HAL_GPIO_WritePin(GPIOA, KEYPAD_ROW1_PIN, 0) ;
 80012a4:	2200      	movs	r2, #0
 80012a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012aa:	481e      	ldr	r0, [pc, #120]	; (8001324 <KEYPAD_GetChar+0x2d4>)
 80012ac:	f002 fdb7 	bl	8003e1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, KEYPAD_ROW2_PIN, 0) ;
 80012b0:	2200      	movs	r2, #0
 80012b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012b6:	481b      	ldr	r0, [pc, #108]	; (8001324 <KEYPAD_GetChar+0x2d4>)
 80012b8:	f002 fdb1 	bl	8003e1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, KEYPAD_ROW3_PIN, 0) ;
 80012bc:	2200      	movs	r2, #0
 80012be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012c2:	4818      	ldr	r0, [pc, #96]	; (8001324 <KEYPAD_GetChar+0x2d4>)
 80012c4:	f002 fdab 	bl	8003e1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, KEYPAD_ROW4_PIN, 0) ;
 80012c8:	2200      	movs	r2, #0
 80012ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012ce:	4815      	ldr	r0, [pc, #84]	; (8001324 <KEYPAD_GetChar+0x2d4>)
 80012d0:	f002 fda5 	bl	8003e1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, KEYPAD_ROW5_PIN, 1) ;
 80012d4:	2201      	movs	r2, #1
 80012d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012da:	4812      	ldr	r0, [pc, #72]	; (8001324 <KEYPAD_GetChar+0x2d4>)
 80012dc:	f002 fd9f 	bl	8003e1e <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYPAD_COL1_PIN) == 1)return KEYPAD_Val[0][0];
 80012e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012e4:	4810      	ldr	r0, [pc, #64]	; (8001328 <KEYPAD_GetChar+0x2d8>)
 80012e6:	f002 fd83 	bl	8003df0 <HAL_GPIO_ReadPin>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d102      	bne.n	80012f6 <KEYPAD_GetChar+0x2a6>
 80012f0:	4b0e      	ldr	r3, [pc, #56]	; (800132c <KEYPAD_GetChar+0x2dc>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	e028      	b.n	8001348 <KEYPAD_GetChar+0x2f8>
		else if(HAL_GPIO_ReadPin(GPIOB, KEYPAD_COL2_PIN) == 1) return KEYPAD_Val[0][1] ;
 80012f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012fa:	480b      	ldr	r0, [pc, #44]	; (8001328 <KEYPAD_GetChar+0x2d8>)
 80012fc:	f002 fd78 	bl	8003df0 <HAL_GPIO_ReadPin>
 8001300:	4603      	mov	r3, r0
 8001302:	2b01      	cmp	r3, #1
 8001304:	d102      	bne.n	800130c <KEYPAD_GetChar+0x2bc>
 8001306:	4b09      	ldr	r3, [pc, #36]	; (800132c <KEYPAD_GetChar+0x2dc>)
 8001308:	785b      	ldrb	r3, [r3, #1]
 800130a:	e01d      	b.n	8001348 <KEYPAD_GetChar+0x2f8>
			else if(HAL_GPIO_ReadPin(GPIOB, KEYPAD_COL3_PIN) == 1) return KEYPAD_Val[0][2] ;
 800130c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001310:	4805      	ldr	r0, [pc, #20]	; (8001328 <KEYPAD_GetChar+0x2d8>)
 8001312:	f002 fd6d 	bl	8003df0 <HAL_GPIO_ReadPin>
 8001316:	4603      	mov	r3, r0
 8001318:	2b01      	cmp	r3, #1
 800131a:	d109      	bne.n	8001330 <KEYPAD_GetChar+0x2e0>
 800131c:	4b03      	ldr	r3, [pc, #12]	; (800132c <KEYPAD_GetChar+0x2dc>)
 800131e:	789b      	ldrb	r3, [r3, #2]
 8001320:	e012      	b.n	8001348 <KEYPAD_GetChar+0x2f8>
 8001322:	bf00      	nop
 8001324:	40010800 	.word	0x40010800
 8001328:	40010c00 	.word	0x40010c00
 800132c:	20000000 	.word	0x20000000
				else if(HAL_GPIO_ReadPin(GPIOB, KEYPAD_COL4_PIN) == 1) return KEYPAD_Val[0][3] ;
 8001330:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001334:	4805      	ldr	r0, [pc, #20]	; (800134c <KEYPAD_GetChar+0x2fc>)
 8001336:	f002 fd5b 	bl	8003df0 <HAL_GPIO_ReadPin>
 800133a:	4603      	mov	r3, r0
 800133c:	2b01      	cmp	r3, #1
 800133e:	d102      	bne.n	8001346 <KEYPAD_GetChar+0x2f6>
 8001340:	4b03      	ldr	r3, [pc, #12]	; (8001350 <KEYPAD_GetChar+0x300>)
 8001342:	78db      	ldrb	r3, [r3, #3]
 8001344:	e000      	b.n	8001348 <KEYPAD_GetChar+0x2f8>
	return 0;
 8001346:	2300      	movs	r3, #0
}
 8001348:	4618      	mov	r0, r3
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40010c00 	.word	0x40010c00
 8001350:	20000000 	.word	0x20000000

08001354 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x27 << 1 // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af02      	add	r7, sp, #8
 800135a:	4603      	mov	r3, r0
 800135c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800135e:	79fb      	ldrb	r3, [r7, #7]
 8001360:	f023 030f 	bic.w	r3, r3, #15
 8001364:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	011b      	lsls	r3, r3, #4
 800136a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800136c:	7bfb      	ldrb	r3, [r7, #15]
 800136e:	f043 030c 	orr.w	r3, r3, #12
 8001372:	b2db      	uxtb	r3, r3
 8001374:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8001376:	7bfb      	ldrb	r3, [r7, #15]
 8001378:	f043 0308 	orr.w	r3, r3, #8
 800137c:	b2db      	uxtb	r3, r3
 800137e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001380:	7bbb      	ldrb	r3, [r7, #14]
 8001382:	f043 030c 	orr.w	r3, r3, #12
 8001386:	b2db      	uxtb	r3, r3
 8001388:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800138a:	7bbb      	ldrb	r3, [r7, #14]
 800138c:	f043 0308 	orr.w	r3, r3, #8
 8001390:	b2db      	uxtb	r3, r3
 8001392:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001394:	f107 0208 	add.w	r2, r7, #8
 8001398:	2364      	movs	r3, #100	; 0x64
 800139a:	9300      	str	r3, [sp, #0]
 800139c:	2304      	movs	r3, #4
 800139e:	214e      	movs	r1, #78	; 0x4e
 80013a0:	4803      	ldr	r0, [pc, #12]	; (80013b0 <lcd_send_cmd+0x5c>)
 80013a2:	f002 fe99 	bl	80040d8 <HAL_I2C_Master_Transmit>
}
 80013a6:	bf00      	nop
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20000280 	.word	0x20000280

080013b4 <lcd_send_data>:

void lcd_send_data (char data)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af02      	add	r7, sp, #8
 80013ba:	4603      	mov	r3, r0
 80013bc:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80013be:	79fb      	ldrb	r3, [r7, #7]
 80013c0:	f023 030f 	bic.w	r3, r3, #15
 80013c4:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80013c6:	79fb      	ldrb	r3, [r7, #7]
 80013c8:	011b      	lsls	r3, r3, #4
 80013ca:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80013cc:	7bfb      	ldrb	r3, [r7, #15]
 80013ce:	f043 030d 	orr.w	r3, r3, #13
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80013d6:	7bfb      	ldrb	r3, [r7, #15]
 80013d8:	f043 0309 	orr.w	r3, r3, #9
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80013e0:	7bbb      	ldrb	r3, [r7, #14]
 80013e2:	f043 030d 	orr.w	r3, r3, #13
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80013ea:	7bbb      	ldrb	r3, [r7, #14]
 80013ec:	f043 0309 	orr.w	r3, r3, #9
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80013f4:	f107 0208 	add.w	r2, r7, #8
 80013f8:	2364      	movs	r3, #100	; 0x64
 80013fa:	9300      	str	r3, [sp, #0]
 80013fc:	2304      	movs	r3, #4
 80013fe:	214e      	movs	r1, #78	; 0x4e
 8001400:	4803      	ldr	r0, [pc, #12]	; (8001410 <lcd_send_data+0x5c>)
 8001402:	f002 fe69 	bl	80040d8 <HAL_I2C_Master_Transmit>
}
 8001406:	bf00      	nop
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	20000280 	.word	0x20000280

08001414 <lcd_init>:

void lcd_init (void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 8001418:	2033      	movs	r0, #51	; 0x33
 800141a:	f7ff ff9b 	bl	8001354 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 800141e:	2032      	movs	r0, #50	; 0x32
 8001420:	f7ff ff98 	bl	8001354 <lcd_send_cmd>
	HAL_Delay(50);
 8001424:	2032      	movs	r0, #50	; 0x32
 8001426:	f001 fc1d 	bl	8002c64 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 800142a:	2028      	movs	r0, #40	; 0x28
 800142c:	f7ff ff92 	bl	8001354 <lcd_send_cmd>
	HAL_Delay(50);
 8001430:	2032      	movs	r0, #50	; 0x32
 8001432:	f001 fc17 	bl	8002c64 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 8001436:	2001      	movs	r0, #1
 8001438:	f7ff ff8c 	bl	8001354 <lcd_send_cmd>
	HAL_Delay(50);
 800143c:	2032      	movs	r0, #50	; 0x32
 800143e:	f001 fc11 	bl	8002c64 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 8001442:	2006      	movs	r0, #6
 8001444:	f7ff ff86 	bl	8001354 <lcd_send_cmd>
	HAL_Delay(50);
 8001448:	2032      	movs	r0, #50	; 0x32
 800144a:	f001 fc0b 	bl	8002c64 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */
 800144e:	200c      	movs	r0, #12
 8001450:	f7ff ff80 	bl	8001354 <lcd_send_cmd>
	HAL_Delay(50);
 8001454:	2032      	movs	r0, #50	; 0x32
 8001456:	f001 fc05 	bl	8002c64 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 800145a:	2002      	movs	r0, #2
 800145c:	f7ff ff7a 	bl	8001354 <lcd_send_cmd>
	HAL_Delay(50);
 8001460:	2032      	movs	r0, #50	; 0x32
 8001462:	f001 fbff 	bl	8002c64 <HAL_Delay>
	lcd_send_cmd (0x80);
 8001466:	2080      	movs	r0, #128	; 0x80
 8001468:	f7ff ff74 	bl	8001354 <lcd_send_cmd>
}
 800146c:	bf00      	nop
 800146e:	bd80      	pop	{r7, pc}

08001470 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001478:	e006      	b.n	8001488 <lcd_send_string+0x18>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	1c5a      	adds	r2, r3, #1
 800147e:	607a      	str	r2, [r7, #4]
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff ff96 	bl	80013b4 <lcd_send_data>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d1f4      	bne.n	800147a <lcd_send_string+0xa>
}
 8001490:	bf00      	nop
 8001492:	bf00      	nop
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <lcd_clear_display>:

void lcd_clear_display (void)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x01); //clear display
 800149e:	2001      	movs	r0, #1
 80014a0:	f7ff ff58 	bl	8001354 <lcd_send_cmd>
}
 80014a4:	bf00      	nop
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <lcd_goto_XY>:

void lcd_goto_XY (int row, int col)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d108      	bne.n	80014ca <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	b2da      	uxtb	r2, r3
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	4413      	add	r3, r2
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	337f      	adds	r3, #127	; 0x7f
 80014c6:	73fb      	strb	r3, [r7, #15]
 80014c8:	e008      	b.n	80014dc <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	3340      	adds	r3, #64	; 0x40
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	b25b      	sxtb	r3, r3
 80014d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014d8:	b25b      	sxtb	r3, r3
 80014da:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 80014dc:	7bfb      	ldrb	r3, [r7, #15]
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff ff38 	bl	8001354 <lcd_send_cmd>
}
 80014e4:	bf00      	nop
 80014e6:	3710      	adds	r7, #16
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}

080014ec <gas>:
#include "control.h"

 char gas (uint32_t value)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
	 if (value < 100)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2b63      	cmp	r3, #99	; 0x63
 80014f8:	d801      	bhi.n	80014fe <gas+0x12>
		return 10 ;
 80014fa:	230a      	movs	r3, #10
 80014fc:	e0b4      	b.n	8001668 <gas+0x17c>
	 if ((value > 400) & (value < 500))
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001504:	bf8c      	ite	hi
 8001506:	2301      	movhi	r3, #1
 8001508:	2300      	movls	r3, #0
 800150a:	b2da      	uxtb	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f240 11f3 	movw	r1, #499	; 0x1f3
 8001512:	428b      	cmp	r3, r1
 8001514:	bf94      	ite	ls
 8001516:	2301      	movls	r3, #1
 8001518:	2300      	movhi	r3, #0
 800151a:	b2db      	uxtb	r3, r3
 800151c:	4013      	ands	r3, r2
 800151e:	b2db      	uxtb	r3, r3
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <gas+0x3c>
		return 20 ;
 8001524:	2314      	movs	r3, #20
 8001526:	e09f      	b.n	8001668 <gas+0x17c>
	 if ((value > 700) & (value < 800) )
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800152e:	bf8c      	ite	hi
 8001530:	2301      	movhi	r3, #1
 8001532:	2300      	movls	r3, #0
 8001534:	b2da      	uxtb	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f240 311f 	movw	r1, #799	; 0x31f
 800153c:	428b      	cmp	r3, r1
 800153e:	bf94      	ite	ls
 8001540:	2301      	movls	r3, #1
 8001542:	2300      	movhi	r3, #0
 8001544:	b2db      	uxtb	r3, r3
 8001546:	4013      	ands	r3, r2
 8001548:	b2db      	uxtb	r3, r3
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <gas+0x66>
		return 30 ;
 800154e:	231e      	movs	r3, #30
 8001550:	e08a      	b.n	8001668 <gas+0x17c>
	 if ((value > 900) & (value < 1000) )
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8001558:	bf8c      	ite	hi
 800155a:	2301      	movhi	r3, #1
 800155c:	2300      	movls	r3, #0
 800155e:	b2da      	uxtb	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f240 31e7 	movw	r1, #999	; 0x3e7
 8001566:	428b      	cmp	r3, r1
 8001568:	bf94      	ite	ls
 800156a:	2301      	movls	r3, #1
 800156c:	2300      	movhi	r3, #0
 800156e:	b2db      	uxtb	r3, r3
 8001570:	4013      	ands	r3, r2
 8001572:	b2db      	uxtb	r3, r3
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <gas+0x90>
		return 40 ;
 8001578:	2328      	movs	r3, #40	; 0x28
 800157a:	e075      	b.n	8001668 <gas+0x17c>
	 if ((value > 1100) & (value < 1200) )
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f240 424c 	movw	r2, #1100	; 0x44c
 8001582:	4293      	cmp	r3, r2
 8001584:	bf8c      	ite	hi
 8001586:	2301      	movhi	r3, #1
 8001588:	2300      	movls	r3, #0
 800158a:	b2da      	uxtb	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f240 41af 	movw	r1, #1199	; 0x4af
 8001592:	428b      	cmp	r3, r1
 8001594:	bf94      	ite	ls
 8001596:	2301      	movls	r3, #1
 8001598:	2300      	movhi	r3, #0
 800159a:	b2db      	uxtb	r3, r3
 800159c:	4013      	ands	r3, r2
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <gas+0xbc>
		return 50 ;
 80015a4:	2332      	movs	r3, #50	; 0x32
 80015a6:	e05f      	b.n	8001668 <gas+0x17c>
	 if ((value > 1300) & (value < 1400) )
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f240 5214 	movw	r2, #1300	; 0x514
 80015ae:	4293      	cmp	r3, r2
 80015b0:	bf8c      	ite	hi
 80015b2:	2301      	movhi	r3, #1
 80015b4:	2300      	movls	r3, #0
 80015b6:	b2da      	uxtb	r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f240 5177 	movw	r1, #1399	; 0x577
 80015be:	428b      	cmp	r3, r1
 80015c0:	bf94      	ite	ls
 80015c2:	2301      	movls	r3, #1
 80015c4:	2300      	movhi	r3, #0
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	4013      	ands	r3, r2
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <gas+0xe8>
		return 60 ;
 80015d0:	233c      	movs	r3, #60	; 0x3c
 80015d2:	e049      	b.n	8001668 <gas+0x17c>
	 if ((value > 1500) & (value < 1600) )
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80015da:	4293      	cmp	r3, r2
 80015dc:	bf8c      	ite	hi
 80015de:	2301      	movhi	r3, #1
 80015e0:	2300      	movls	r3, #0
 80015e2:	b2da      	uxtb	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f240 613f 	movw	r1, #1599	; 0x63f
 80015ea:	428b      	cmp	r3, r1
 80015ec:	bf94      	ite	ls
 80015ee:	2301      	movls	r3, #1
 80015f0:	2300      	movhi	r3, #0
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	4013      	ands	r3, r2
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <gas+0x114>
		return 70 ;
 80015fc:	2346      	movs	r3, #70	; 0x46
 80015fe:	e033      	b.n	8001668 <gas+0x17c>
	 if ((value > 1700) & (value < 1800) )
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8001606:	4293      	cmp	r3, r2
 8001608:	bf8c      	ite	hi
 800160a:	2301      	movhi	r3, #1
 800160c:	2300      	movls	r3, #0
 800160e:	b2da      	uxtb	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f240 7107 	movw	r1, #1799	; 0x707
 8001616:	428b      	cmp	r3, r1
 8001618:	bf94      	ite	ls
 800161a:	2301      	movls	r3, #1
 800161c:	2300      	movhi	r3, #0
 800161e:	b2db      	uxtb	r3, r3
 8001620:	4013      	ands	r3, r2
 8001622:	b2db      	uxtb	r3, r3
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <gas+0x140>
		return 80 ;
 8001628:	2350      	movs	r3, #80	; 0x50
 800162a:	e01d      	b.n	8001668 <gas+0x17c>
	 if ((value > 1900) & (value < 2000) )
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f240 726c 	movw	r2, #1900	; 0x76c
 8001632:	4293      	cmp	r3, r2
 8001634:	bf8c      	ite	hi
 8001636:	2301      	movhi	r3, #1
 8001638:	2300      	movls	r3, #0
 800163a:	b2da      	uxtb	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f240 71cf 	movw	r1, #1999	; 0x7cf
 8001642:	428b      	cmp	r3, r1
 8001644:	bf94      	ite	ls
 8001646:	2301      	movls	r3, #1
 8001648:	2300      	movhi	r3, #0
 800164a:	b2db      	uxtb	r3, r3
 800164c:	4013      	ands	r3, r2
 800164e:	b2db      	uxtb	r3, r3
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <gas+0x16c>
		return 90 ;
 8001654:	235a      	movs	r3, #90	; 0x5a
 8001656:	e007      	b.n	8001668 <gas+0x17c>
	 if (value > 2100)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f640 0234 	movw	r2, #2100	; 0x834
 800165e:	4293      	cmp	r3, r2
 8001660:	d901      	bls.n	8001666 <gas+0x17a>
		return 100 ;
 8001662:	2364      	movs	r3, #100	; 0x64
 8001664:	e000      	b.n	8001668 <gas+0x17c>
	 return 0;
 8001666:	2300      	movs	r3, #0
}
 8001668:	4618      	mov	r0, r3
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	bc80      	pop	{r7}
 8001670:	4770      	bx	lr
	...

08001674 <DS1307_Init>:
	
/**
 * @brief Initializes the DS1307 module. Sets clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void DS1307_Init(I2C_HandleTypeDef *hi2c) {
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
	_ds1307_ui2c = hi2c;
 800167c:	4a04      	ldr	r2, [pc, #16]	; (8001690 <DS1307_Init+0x1c>)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6013      	str	r3, [r2, #0]
	DS1307_SetClockHalt(0);
 8001682:	2000      	movs	r0, #0
 8001684:	f000 f806 	bl	8001694 <DS1307_SetClockHalt>
}
 8001688:	bf00      	nop
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	20000208 	.word	0x20000208

08001694 <DS1307_SetClockHalt>:

/**
 * @brief Sets clock halt bit.
 * @param halt Clock halt bit to set, 0 or 1. 0 to start timing, 0 to stop.
 */
void DS1307_SetClockHalt(uint8_t halt) {
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	71fb      	strb	r3, [r7, #7]
	uint8_t ch = (halt ? 1 << 7 : 0);
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <DS1307_SetClockHalt+0x14>
 80016a4:	2380      	movs	r3, #128	; 0x80
 80016a6:	e000      	b.n	80016aa <DS1307_SetClockHalt+0x16>
 80016a8:	2300      	movs	r3, #0
 80016aa:	73fb      	strb	r3, [r7, #15]
	DS1307_SetRegByte(DS1307_REG_SECOND, ch | (DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f));
 80016ac:	2000      	movs	r0, #0
 80016ae:	f000 f83d 	bl	800172c <DS1307_GetRegByte>
 80016b2:	4603      	mov	r3, r0
 80016b4:	b25b      	sxtb	r3, r3
 80016b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80016ba:	b25a      	sxtb	r2, r3
 80016bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	b25b      	sxtb	r3, r3
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	4619      	mov	r1, r3
 80016c8:	2000      	movs	r0, #0
 80016ca:	f000 f811 	bl	80016f0 <DS1307_SetRegByte>
}
 80016ce:	bf00      	nop
 80016d0:	3710      	adds	r7, #16
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <DS1307_GetClockHalt>:

/**
 * @brief Gets clock halt bit.
 * @return Clock halt bit, 0 or 1.
 */
uint8_t DS1307_GetClockHalt(void) {
 80016d6:	b580      	push	{r7, lr}
 80016d8:	af00      	add	r7, sp, #0
	return (DS1307_GetRegByte(DS1307_REG_SECOND) & 0x80) >> 7;
 80016da:	2000      	movs	r0, #0
 80016dc:	f000 f826 	bl	800172c <DS1307_GetRegByte>
 80016e0:	4603      	mov	r3, r0
 80016e2:	11db      	asrs	r3, r3, #7
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	b2db      	uxtb	r3, r3
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <DS1307_SetRegByte>:
/**
 * @brief Sets the byte in the designated DS1307 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS1307_SetRegByte(uint8_t regAddr, uint8_t val) {
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af02      	add	r7, sp, #8
 80016f6:	4603      	mov	r3, r0
 80016f8:	460a      	mov	r2, r1
 80016fa:	71fb      	strb	r3, [r7, #7]
 80016fc:	4613      	mov	r3, r2
 80016fe:	71bb      	strb	r3, [r7, #6]
	uint8_t bytes[2] = { regAddr, val };
 8001700:	79fb      	ldrb	r3, [r7, #7]
 8001702:	733b      	strb	r3, [r7, #12]
 8001704:	79bb      	ldrb	r3, [r7, #6]
 8001706:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, bytes, 2, DS1307_TIMEOUT);
 8001708:	4b07      	ldr	r3, [pc, #28]	; (8001728 <DS1307_SetRegByte+0x38>)
 800170a:	6818      	ldr	r0, [r3, #0]
 800170c:	f107 020c 	add.w	r2, r7, #12
 8001710:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001714:	9300      	str	r3, [sp, #0]
 8001716:	2302      	movs	r3, #2
 8001718:	21d0      	movs	r1, #208	; 0xd0
 800171a:	f002 fcdd 	bl	80040d8 <HAL_I2C_Master_Transmit>
}
 800171e:	bf00      	nop
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20000208 	.word	0x20000208

0800172c <DS1307_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS1307 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS1307_GetRegByte(uint8_t regAddr) {
 800172c:	b580      	push	{r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af02      	add	r7, sp, #8
 8001732:	4603      	mov	r3, r0
 8001734:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &regAddr, 1, DS1307_TIMEOUT);
 8001736:	4b0d      	ldr	r3, [pc, #52]	; (800176c <DS1307_GetRegByte+0x40>)
 8001738:	6818      	ldr	r0, [r3, #0]
 800173a:	1dfa      	adds	r2, r7, #7
 800173c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001740:	9300      	str	r3, [sp, #0]
 8001742:	2301      	movs	r3, #1
 8001744:	21d0      	movs	r1, #208	; 0xd0
 8001746:	f002 fcc7 	bl	80040d8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &val, 1, DS1307_TIMEOUT);
 800174a:	4b08      	ldr	r3, [pc, #32]	; (800176c <DS1307_GetRegByte+0x40>)
 800174c:	6818      	ldr	r0, [r3, #0]
 800174e:	f107 020f 	add.w	r2, r7, #15
 8001752:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001756:	9300      	str	r3, [sp, #0]
 8001758:	2301      	movs	r3, #1
 800175a:	21d0      	movs	r1, #208	; 0xd0
 800175c:	f002 fdba 	bl	80042d4 <HAL_I2C_Master_Receive>
	return val;
 8001760:	7bfb      	ldrb	r3, [r7, #15]
}
 8001762:	4618      	mov	r0, r3
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	20000208 	.word	0x20000208

08001770 <DS1307_GetDayOfWeek>:

/**
 * @brief Gets the current day of week.
 * @return Days from last Sunday, 0 to 6.
 */
uint8_t DS1307_GetDayOfWeek(void) {
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_DOW));
 8001774:	2003      	movs	r0, #3
 8001776:	f7ff ffd9 	bl	800172c <DS1307_GetRegByte>
 800177a:	4603      	mov	r3, r0
 800177c:	4618      	mov	r0, r3
 800177e:	f000 f92f 	bl	80019e0 <DS1307_DecodeBCD>
 8001782:	4603      	mov	r3, r0
}
 8001784:	4618      	mov	r0, r3
 8001786:	bd80      	pop	{r7, pc}

08001788 <DS1307_GetDate>:

/**
 * @brief Gets the current day of month.
 * @return Day of month, 1 to 31.
 */
uint8_t DS1307_GetDate(void) {
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_DATE));
 800178c:	2004      	movs	r0, #4
 800178e:	f7ff ffcd 	bl	800172c <DS1307_GetRegByte>
 8001792:	4603      	mov	r3, r0
 8001794:	4618      	mov	r0, r3
 8001796:	f000 f923 	bl	80019e0 <DS1307_DecodeBCD>
 800179a:	4603      	mov	r3, r0
}
 800179c:	4618      	mov	r0, r3
 800179e:	bd80      	pop	{r7, pc}

080017a0 <DS1307_GetMonth>:

/**
 * @brief Gets the current month.
 * @return Month, 1 to 12.
 */
uint8_t DS1307_GetMonth(void) {
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MONTH));
 80017a4:	2005      	movs	r0, #5
 80017a6:	f7ff ffc1 	bl	800172c <DS1307_GetRegByte>
 80017aa:	4603      	mov	r3, r0
 80017ac:	4618      	mov	r0, r3
 80017ae:	f000 f917 	bl	80019e0 <DS1307_DecodeBCD>
 80017b2:	4603      	mov	r3, r0
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <DS1307_GetYear>:

/**
 * @brief Gets the current year.
 * @return Year, 2000 to 2099.
 */
uint16_t DS1307_GetYear(void) {
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
	uint16_t cen = DS1307_GetRegByte(DS1307_REG_CENT) * 100;
 80017be:	2010      	movs	r0, #16
 80017c0:	f7ff ffb4 	bl	800172c <DS1307_GetRegByte>
 80017c4:	4603      	mov	r3, r0
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	461a      	mov	r2, r3
 80017ca:	0092      	lsls	r2, r2, #2
 80017cc:	4413      	add	r3, r2
 80017ce:	461a      	mov	r2, r3
 80017d0:	0091      	lsls	r1, r2, #2
 80017d2:	461a      	mov	r2, r3
 80017d4:	460b      	mov	r3, r1
 80017d6:	4413      	add	r3, r2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	80fb      	strh	r3, [r7, #6]
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_YEAR)) + cen;
 80017dc:	2006      	movs	r0, #6
 80017de:	f7ff ffa5 	bl	800172c <DS1307_GetRegByte>
 80017e2:	4603      	mov	r3, r0
 80017e4:	4618      	mov	r0, r3
 80017e6:	f000 f8fb 	bl	80019e0 <DS1307_DecodeBCD>
 80017ea:	4603      	mov	r3, r0
 80017ec:	b29a      	uxth	r2, r3
 80017ee:	88fb      	ldrh	r3, [r7, #6]
 80017f0:	4413      	add	r3, r2
 80017f2:	b29b      	uxth	r3, r3
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3708      	adds	r7, #8
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}

080017fc <DS1307_GetHour>:

/**
 * @brief Gets the current hour in 24h format.
 * @return Hour in 24h format, 0 to 23.
 */
uint8_t DS1307_GetHour(void) {
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_HOUR) & 0x3f);
 8001800:	2002      	movs	r0, #2
 8001802:	f7ff ff93 	bl	800172c <DS1307_GetRegByte>
 8001806:	4603      	mov	r3, r0
 8001808:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800180c:	b2db      	uxtb	r3, r3
 800180e:	4618      	mov	r0, r3
 8001810:	f000 f8e6 	bl	80019e0 <DS1307_DecodeBCD>
 8001814:	4603      	mov	r3, r0
}
 8001816:	4618      	mov	r0, r3
 8001818:	bd80      	pop	{r7, pc}

0800181a <DS1307_GetMinute>:

/**
 * @brief Gets the current minute.
 * @return Minute, 0 to 59.
 */
uint8_t DS1307_GetMinute(void) {
 800181a:	b580      	push	{r7, lr}
 800181c:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MINUTE));
 800181e:	2001      	movs	r0, #1
 8001820:	f7ff ff84 	bl	800172c <DS1307_GetRegByte>
 8001824:	4603      	mov	r3, r0
 8001826:	4618      	mov	r0, r3
 8001828:	f000 f8da 	bl	80019e0 <DS1307_DecodeBCD>
 800182c:	4603      	mov	r3, r0
}
 800182e:	4618      	mov	r0, r3
 8001830:	bd80      	pop	{r7, pc}

08001832 <DS1307_GetSecond>:

/**
 * @brief Gets the current second. Clock halt bit not included.
 * @return Second, 0 to 59.
 */
uint8_t DS1307_GetSecond(void) {
 8001832:	b580      	push	{r7, lr}
 8001834:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f);
 8001836:	2000      	movs	r0, #0
 8001838:	f7ff ff78 	bl	800172c <DS1307_GetRegByte>
 800183c:	4603      	mov	r3, r0
 800183e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001842:	b2db      	uxtb	r3, r3
 8001844:	4618      	mov	r0, r3
 8001846:	f000 f8cb 	bl	80019e0 <DS1307_DecodeBCD>
 800184a:	4603      	mov	r3, r0
}
 800184c:	4618      	mov	r0, r3
 800184e:	bd80      	pop	{r7, pc}

08001850 <DS1307_GetTimeZoneHour>:
/**
 * @brief Gets the stored UTC hour offset.
 * @note  UTC offset is not updated automatically.
 * @return UTC hour offset, -12 to 12.
 */
int8_t DS1307_GetTimeZoneHour(void) {
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
	return DS1307_GetRegByte(DS1307_REG_UTC_HR);
 8001854:	2008      	movs	r0, #8
 8001856:	f7ff ff69 	bl	800172c <DS1307_GetRegByte>
 800185a:	4603      	mov	r3, r0
 800185c:	b25b      	sxtb	r3, r3
}
 800185e:	4618      	mov	r0, r3
 8001860:	bd80      	pop	{r7, pc}

08001862 <DS1307_GetTimeZoneMin>:
/**
 * @brief Gets the stored UTC minute offset.
 * @note  UTC offset is not updated automatically.
 * @return UTC time zone, 0 to 59.
 */
uint8_t DS1307_GetTimeZoneMin(void) {
 8001862:	b580      	push	{r7, lr}
 8001864:	af00      	add	r7, sp, #0
	return DS1307_GetRegByte(DS1307_REG_UTC_MIN);
 8001866:	2009      	movs	r0, #9
 8001868:	f7ff ff60 	bl	800172c <DS1307_GetRegByte>
 800186c:	4603      	mov	r3, r0
}
 800186e:	4618      	mov	r0, r3
 8001870:	bd80      	pop	{r7, pc}

08001872 <DS1307_SetDayOfWeek>:

/**
 * @brief Sets the current day of week.
 * @param dayOfWeek Days since last Sunday, 0 to 6.
 */
void DS1307_SetDayOfWeek(uint8_t dayOfWeek) {
 8001872:	b580      	push	{r7, lr}
 8001874:	b082      	sub	sp, #8
 8001876:	af00      	add	r7, sp, #0
 8001878:	4603      	mov	r3, r0
 800187a:	71fb      	strb	r3, [r7, #7]
	DS1307_SetRegByte(DS1307_REG_DOW, DS1307_EncodeBCD(dayOfWeek));
 800187c:	79fb      	ldrb	r3, [r7, #7]
 800187e:	4618      	mov	r0, r3
 8001880:	f000 f8c6 	bl	8001a10 <DS1307_EncodeBCD>
 8001884:	4603      	mov	r3, r0
 8001886:	4619      	mov	r1, r3
 8001888:	2003      	movs	r0, #3
 800188a:	f7ff ff31 	bl	80016f0 <DS1307_SetRegByte>
}
 800188e:	bf00      	nop
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <DS1307_SetDate>:

/**
 * @brief Sets the current day of month.
 * @param date Day of month, 1 to 31.
 */
void DS1307_SetDate(uint8_t date) {
 8001896:	b580      	push	{r7, lr}
 8001898:	b082      	sub	sp, #8
 800189a:	af00      	add	r7, sp, #0
 800189c:	4603      	mov	r3, r0
 800189e:	71fb      	strb	r3, [r7, #7]
	DS1307_SetRegByte(DS1307_REG_DATE, DS1307_EncodeBCD(date));
 80018a0:	79fb      	ldrb	r3, [r7, #7]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f000 f8b4 	bl	8001a10 <DS1307_EncodeBCD>
 80018a8:	4603      	mov	r3, r0
 80018aa:	4619      	mov	r1, r3
 80018ac:	2004      	movs	r0, #4
 80018ae:	f7ff ff1f 	bl	80016f0 <DS1307_SetRegByte>
}
 80018b2:	bf00      	nop
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <DS1307_SetMonth>:

/**
 * @brief Sets the current month.
 * @param month Month, 1 to 12.
 */
void DS1307_SetMonth(uint8_t month) {
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b082      	sub	sp, #8
 80018be:	af00      	add	r7, sp, #0
 80018c0:	4603      	mov	r3, r0
 80018c2:	71fb      	strb	r3, [r7, #7]
	DS1307_SetRegByte(DS1307_REG_MONTH, DS1307_EncodeBCD(month));
 80018c4:	79fb      	ldrb	r3, [r7, #7]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f000 f8a2 	bl	8001a10 <DS1307_EncodeBCD>
 80018cc:	4603      	mov	r3, r0
 80018ce:	4619      	mov	r1, r3
 80018d0:	2005      	movs	r0, #5
 80018d2:	f7ff ff0d 	bl	80016f0 <DS1307_SetRegByte>
}
 80018d6:	bf00      	nop
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
	...

080018e0 <DS1307_SetYear>:

/**
 * @brief Sets the current year.
 * @param year Year, 2000 to 2099.
 */
void DS1307_SetYear(uint16_t year) {
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	80fb      	strh	r3, [r7, #6]
	DS1307_SetRegByte(DS1307_REG_CENT, year / 100);
 80018ea:	88fb      	ldrh	r3, [r7, #6]
 80018ec:	4a10      	ldr	r2, [pc, #64]	; (8001930 <DS1307_SetYear+0x50>)
 80018ee:	fba2 2303 	umull	r2, r3, r2, r3
 80018f2:	095b      	lsrs	r3, r3, #5
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	4619      	mov	r1, r3
 80018fa:	2010      	movs	r0, #16
 80018fc:	f7ff fef8 	bl	80016f0 <DS1307_SetRegByte>
	DS1307_SetRegByte(DS1307_REG_YEAR, DS1307_EncodeBCD(year % 100));
 8001900:	88fb      	ldrh	r3, [r7, #6]
 8001902:	4a0b      	ldr	r2, [pc, #44]	; (8001930 <DS1307_SetYear+0x50>)
 8001904:	fba2 1203 	umull	r1, r2, r2, r3
 8001908:	0952      	lsrs	r2, r2, #5
 800190a:	2164      	movs	r1, #100	; 0x64
 800190c:	fb01 f202 	mul.w	r2, r1, r2
 8001910:	1a9b      	subs	r3, r3, r2
 8001912:	b29b      	uxth	r3, r3
 8001914:	b2db      	uxtb	r3, r3
 8001916:	4618      	mov	r0, r3
 8001918:	f000 f87a 	bl	8001a10 <DS1307_EncodeBCD>
 800191c:	4603      	mov	r3, r0
 800191e:	4619      	mov	r1, r3
 8001920:	2006      	movs	r0, #6
 8001922:	f7ff fee5 	bl	80016f0 <DS1307_SetRegByte>
}
 8001926:	bf00      	nop
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	51eb851f 	.word	0x51eb851f

08001934 <DS1307_SetHour>:

/**
 * @brief Sets the current hour, in 24h format.
 * @param hour_24mode Hour in 24h format, 0 to 23.
 */
void DS1307_SetHour(uint8_t hour_24mode) {
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	71fb      	strb	r3, [r7, #7]
	DS1307_SetRegByte(DS1307_REG_HOUR, DS1307_EncodeBCD(hour_24mode & 0x3f));
 800193e:	79fb      	ldrb	r3, [r7, #7]
 8001940:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001944:	b2db      	uxtb	r3, r3
 8001946:	4618      	mov	r0, r3
 8001948:	f000 f862 	bl	8001a10 <DS1307_EncodeBCD>
 800194c:	4603      	mov	r3, r0
 800194e:	4619      	mov	r1, r3
 8001950:	2002      	movs	r0, #2
 8001952:	f7ff fecd 	bl	80016f0 <DS1307_SetRegByte>
}
 8001956:	bf00      	nop
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <DS1307_SetMinute>:

/**
 * @brief Sets the current minute.
 * @param minute Minute, 0 to 59.
 */
void DS1307_SetMinute(uint8_t minute) {
 800195e:	b580      	push	{r7, lr}
 8001960:	b082      	sub	sp, #8
 8001962:	af00      	add	r7, sp, #0
 8001964:	4603      	mov	r3, r0
 8001966:	71fb      	strb	r3, [r7, #7]
	DS1307_SetRegByte(DS1307_REG_MINUTE, DS1307_EncodeBCD(minute));
 8001968:	79fb      	ldrb	r3, [r7, #7]
 800196a:	4618      	mov	r0, r3
 800196c:	f000 f850 	bl	8001a10 <DS1307_EncodeBCD>
 8001970:	4603      	mov	r3, r0
 8001972:	4619      	mov	r1, r3
 8001974:	2001      	movs	r0, #1
 8001976:	f7ff febb 	bl	80016f0 <DS1307_SetRegByte>
}
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <DS1307_SetSecond>:

/**
 * @brief Sets the current second.
 * @param second Second, 0 to 59.
 */
void DS1307_SetSecond(uint8_t second) {
 8001982:	b580      	push	{r7, lr}
 8001984:	b084      	sub	sp, #16
 8001986:	af00      	add	r7, sp, #0
 8001988:	4603      	mov	r3, r0
 800198a:	71fb      	strb	r3, [r7, #7]
	uint8_t ch = DS1307_GetClockHalt();
 800198c:	f7ff fea3 	bl	80016d6 <DS1307_GetClockHalt>
 8001990:	4603      	mov	r3, r0
 8001992:	73fb      	strb	r3, [r7, #15]
	DS1307_SetRegByte(DS1307_REG_SECOND, DS1307_EncodeBCD(second | ch));
 8001994:	79fa      	ldrb	r2, [r7, #7]
 8001996:	7bfb      	ldrb	r3, [r7, #15]
 8001998:	4313      	orrs	r3, r2
 800199a:	b2db      	uxtb	r3, r3
 800199c:	4618      	mov	r0, r3
 800199e:	f000 f837 	bl	8001a10 <DS1307_EncodeBCD>
 80019a2:	4603      	mov	r3, r0
 80019a4:	4619      	mov	r1, r3
 80019a6:	2000      	movs	r0, #0
 80019a8:	f7ff fea2 	bl	80016f0 <DS1307_SetRegByte>
}
 80019ac:	bf00      	nop
 80019ae:	3710      	adds	r7, #16
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <DS1307_SetTimeZone>:
 * @brief Sets UTC offset.
 * @note  UTC offset is not updated automatically.
 * @param hr UTC hour offset, -12 to 12.
 * @param min UTC minute offset, 0 to 59.
 */
void DS1307_SetTimeZone(int8_t hr, uint8_t min) {
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	460a      	mov	r2, r1
 80019be:	71fb      	strb	r3, [r7, #7]
 80019c0:	4613      	mov	r3, r2
 80019c2:	71bb      	strb	r3, [r7, #6]
	DS1307_SetRegByte(DS1307_REG_UTC_HR, hr);
 80019c4:	79fb      	ldrb	r3, [r7, #7]
 80019c6:	4619      	mov	r1, r3
 80019c8:	2008      	movs	r0, #8
 80019ca:	f7ff fe91 	bl	80016f0 <DS1307_SetRegByte>
	DS1307_SetRegByte(DS1307_REG_UTC_MIN, min);
 80019ce:	79bb      	ldrb	r3, [r7, #6]
 80019d0:	4619      	mov	r1, r3
 80019d2:	2009      	movs	r0, #9
 80019d4:	f7ff fe8c 	bl	80016f0 <DS1307_SetRegByte>
}
 80019d8:	bf00      	nop
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <DS1307_DecodeBCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS1307_DecodeBCD(uint8_t bin) {
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	4603      	mov	r3, r0
 80019e8:	71fb      	strb	r3, [r7, #7]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 80019ea:	79fb      	ldrb	r3, [r7, #7]
 80019ec:	091b      	lsrs	r3, r3, #4
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	461a      	mov	r2, r3
 80019f2:	0092      	lsls	r2, r2, #2
 80019f4:	4413      	add	r3, r2
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	b2da      	uxtb	r2, r3
 80019fa:	79fb      	ldrb	r3, [r7, #7]
 80019fc:	f003 030f 	and.w	r3, r3, #15
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	4413      	add	r3, r2
 8001a04:	b2db      	uxtb	r3, r3
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc80      	pop	{r7}
 8001a0e:	4770      	bx	lr

08001a10 <DS1307_EncodeBCD>:
/**
 * @brief Encodes a decimal number to binaty-coded decimal for storage in registers.
 * @param dec Decimal number to encode.
 * @return Encoded binary-coded decimal value.
 */
uint8_t DS1307_EncodeBCD(uint8_t dec) {
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	71fb      	strb	r3, [r7, #7]
	return (dec % 10 + ((dec / 10) << 4));
 8001a1a:	79fa      	ldrb	r2, [r7, #7]
 8001a1c:	4b0c      	ldr	r3, [pc, #48]	; (8001a50 <DS1307_EncodeBCD+0x40>)
 8001a1e:	fba3 1302 	umull	r1, r3, r3, r2
 8001a22:	08d9      	lsrs	r1, r3, #3
 8001a24:	460b      	mov	r3, r1
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	440b      	add	r3, r1
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	b2da      	uxtb	r2, r3
 8001a30:	79fb      	ldrb	r3, [r7, #7]
 8001a32:	4907      	ldr	r1, [pc, #28]	; (8001a50 <DS1307_EncodeBCD+0x40>)
 8001a34:	fba1 1303 	umull	r1, r3, r1, r3
 8001a38:	08db      	lsrs	r3, r3, #3
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	011b      	lsls	r3, r3, #4
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	4413      	add	r3, r2
 8001a42:	b2db      	uxtb	r3, r3
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bc80      	pop	{r7}
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	cccccccd 	.word	0xcccccccd

08001a54 <check_pass>:
//
//DHT11_Data_TypeDef DHT11_Data;

//DHT11_Data_TypeDef DHT11_Data;
//
bool check_pass() {
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
    for (int i = 0; i < 4; ++i) {
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	607b      	str	r3, [r7, #4]
 8001a5e:	e00e      	b.n	8001a7e <check_pass+0x2a>
        if (password[i] != key_password[i]) {
 8001a60:	4a0b      	ldr	r2, [pc, #44]	; (8001a90 <check_pass+0x3c>)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4413      	add	r3, r2
 8001a66:	781a      	ldrb	r2, [r3, #0]
 8001a68:	490a      	ldr	r1, [pc, #40]	; (8001a94 <check_pass+0x40>)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	440b      	add	r3, r1
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d001      	beq.n	8001a78 <check_pass+0x24>
            return false;
 8001a74:	2300      	movs	r3, #0
 8001a76:	e006      	b.n	8001a86 <check_pass+0x32>
    for (int i = 0; i < 4; ++i) {
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	607b      	str	r3, [r7, #4]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2b03      	cmp	r3, #3
 8001a82:	dded      	ble.n	8001a60 <check_pass+0xc>
        }
    }
    return true;
 8001a84:	2301      	movs	r3, #1
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bc80      	pop	{r7}
 8001a8e:	4770      	bx	lr
 8001a90:	20000014 	.word	0x20000014
 8001a94:	20000370 	.word	0x20000370

08001a98 <delay>:


void delay (uint16_t time)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001aa2:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <delay+0x2c>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim1))<time);
 8001aaa:	bf00      	nop
 8001aac:	4b05      	ldr	r3, [pc, #20]	; (8001ac4 <delay+0x2c>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ab2:	88fb      	ldrh	r3, [r7, #6]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d3f9      	bcc.n	8001aac <delay+0x14>
}
 8001ab8:	bf00      	nop
 8001aba:	bf00      	nop
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr
 8001ac4:	20000328 	.word	0x20000328

08001ac8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ac8:	b5b0      	push	{r4, r5, r7, lr}
 8001aca:	b0a8      	sub	sp, #160	; 0xa0
 8001acc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ace:	f001 f867 	bl	8002ba0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ad2:	f000 fbfb 	bl	80022cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ad6:	f000 fd6f 	bl	80025b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ada:	f000 fd4f 	bl	800257c <MX_DMA_Init>
  MX_I2C1_Init();
 8001ade:	f000 fca1 	bl	8002424 <MX_I2C1_Init>
  MX_ADC1_Init();
 8001ae2:	f000 fc43 	bl	800236c <MX_ADC1_Init>
  MX_TIM1_Init();
 8001ae6:	f000 fcf9 	bl	80024dc <MX_TIM1_Init>
  MX_I2C2_Init();
 8001aea:	f000 fcc9 	bl	8002480 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8001aee:	48d8      	ldr	r0, [pc, #864]	; (8001e50 <main+0x388>)
 8001af0:	f003 fee4 	bl	80058bc <HAL_TIM_Base_Start>
      HAL_ADC_Start_DMA(&hadc1, &var, 1);
 8001af4:	2201      	movs	r2, #1
 8001af6:	49d7      	ldr	r1, [pc, #860]	; (8001e54 <main+0x38c>)
 8001af8:	48d7      	ldr	r0, [pc, #860]	; (8001e58 <main+0x390>)
 8001afa:	f001 f9af 	bl	8002e5c <HAL_ADC_Start_DMA>

      lcd_init();
 8001afe:	f7ff fc89 	bl	8001414 <lcd_init>
        lcd_clear_display();
 8001b02:	f7ff fcca 	bl	800149a <lcd_clear_display>
        lcd_goto_XY(1, 2);
 8001b06:	2102      	movs	r1, #2
 8001b08:	2001      	movs	r0, #1
 8001b0a:	f7ff fccd 	bl	80014a8 <lcd_goto_XY>
        lcd_send_string("SMART HOME");
 8001b0e:	48d3      	ldr	r0, [pc, #844]	; (8001e5c <main+0x394>)
 8001b10:	f7ff fcae 	bl	8001470 <lcd_send_string>

        const char *DAYS_OF_WEEK[7] = { "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };
 8001b14:	4bd2      	ldr	r3, [pc, #840]	; (8001e60 <main+0x398>)
 8001b16:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8001b1a:	461d      	mov	r5, r3
 8001b1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b20:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b24:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        	/* Start DS1307 timing. Pass user I2C handle pointer to function. */
        	DS1307_Init(&hi2c2);
 8001b28:	48ce      	ldr	r0, [pc, #824]	; (8001e64 <main+0x39c>)
 8001b2a:	f7ff fda3 	bl	8001674 <DS1307_Init>
        	/* To test leap year correction. */
        	DS1307_SetTimeZone(+8, 00);
 8001b2e:	2100      	movs	r1, #0
 8001b30:	2008      	movs	r0, #8
 8001b32:	f7ff ff3f 	bl	80019b4 <DS1307_SetTimeZone>
        	DS1307_SetDate(12);
 8001b36:	200c      	movs	r0, #12
 8001b38:	f7ff fead 	bl	8001896 <DS1307_SetDate>
        	DS1307_SetMonth(12);
 8001b3c:	200c      	movs	r0, #12
 8001b3e:	f7ff febc 	bl	80018ba <DS1307_SetMonth>
        	DS1307_SetYear(2023);
 8001b42:	f240 70e7 	movw	r0, #2023	; 0x7e7
 8001b46:	f7ff fecb 	bl	80018e0 <DS1307_SetYear>
        	DS1307_SetDayOfWeek(2);
 8001b4a:	2002      	movs	r0, #2
 8001b4c:	f7ff fe91 	bl	8001872 <DS1307_SetDayOfWeek>
        	DS1307_SetHour(9);
 8001b50:	2009      	movs	r0, #9
 8001b52:	f7ff feef 	bl	8001934 <DS1307_SetHour>
        	DS1307_SetMinute(17);
 8001b56:	2011      	movs	r0, #17
 8001b58:	f7ff ff01 	bl	800195e <DS1307_SetMinute>
        	DS1307_SetSecond(30);
 8001b5c:	201e      	movs	r0, #30
 8001b5e:	f7ff ff10 	bl	8001982 <DS1307_SetSecond>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
          unsigned char press_keypad = KEYPAD_GetChar();
 8001b62:	f7ff fa75 	bl	8001050 <KEYPAD_GetChar>
 8001b66:	4603      	mov	r3, r0
 8001b68:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
            uint8_t date = DS1307_GetDate();
 8001b6c:	f7ff fe0c 	bl	8001788 <DS1307_GetDate>
 8001b70:	4603      	mov	r3, r0
 8001b72:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
			uint8_t month = DS1307_GetMonth();
 8001b76:	f7ff fe13 	bl	80017a0 <DS1307_GetMonth>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
			uint16_t year = DS1307_GetYear();
 8001b80:	f7ff fe1a 	bl	80017b8 <DS1307_GetYear>
 8001b84:	4603      	mov	r3, r0
 8001b86:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
			uint8_t dow = DS1307_GetDayOfWeek();
 8001b8a:	f7ff fdf1 	bl	8001770 <DS1307_GetDayOfWeek>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
			uint8_t hour = DS1307_GetHour();
 8001b94:	f7ff fe32 	bl	80017fc <DS1307_GetHour>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
			uint8_t minute = DS1307_GetMinute();
 8001b9e:	f7ff fe3c 	bl	800181a <DS1307_GetMinute>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
			uint8_t second = DS1307_GetSecond();
 8001ba8:	f7ff fe43 	bl	8001832 <DS1307_GetSecond>
 8001bac:	4603      	mov	r3, r0
 8001bae:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
			int8_t zone_hr = DS1307_GetTimeZoneHour();
 8001bb2:	f7ff fe4d 	bl	8001850 <DS1307_GetTimeZoneHour>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
			uint8_t zone_min = DS1307_GetTimeZoneMin();
 8001bbc:	f7ff fe51 	bl	8001862 <DS1307_GetTimeZoneMin>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
//          DHT11_Start();
          /* USER CODE END WHILE */

             switch(currentstate){
 8001bc6:	4ba8      	ldr	r3, [pc, #672]	; (8001e68 <main+0x3a0>)
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	2b0d      	cmp	r3, #13
 8001bce:	d8c8      	bhi.n	8001b62 <main+0x9a>
 8001bd0:	a201      	add	r2, pc, #4	; (adr r2, 8001bd8 <main+0x110>)
 8001bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bd6:	bf00      	nop
 8001bd8:	08001c11 	.word	0x08001c11
 8001bdc:	08001c31 	.word	0x08001c31
 8001be0:	08001c37 	.word	0x08001c37
 8001be4:	08001ce7 	.word	0x08001ce7
 8001be8:	08001b63 	.word	0x08001b63
 8001bec:	08001d09 	.word	0x08001d09
 8001bf0:	08001d31 	.word	0x08001d31
 8001bf4:	08001ed5 	.word	0x08001ed5
 8001bf8:	08001df9 	.word	0x08001df9
 8001bfc:	08001edd 	.word	0x08001edd
 8001c00:	08001f67 	.word	0x08001f67
 8001c04:	08001ff1 	.word	0x08001ff1
 8001c08:	080020c7 	.word	0x080020c7
 8001c0c:	080021e9 	.word	0x080021e9
             case STATE_IDLE:
               lcd_goto_XY(1, 0);
 8001c10:	2100      	movs	r1, #0
 8001c12:	2001      	movs	r0, #1
 8001c14:	f7ff fc48 	bl	80014a8 <lcd_goto_XY>
               lcd_send_string("  SMART HOME");
 8001c18:	4894      	ldr	r0, [pc, #592]	; (8001e6c <main+0x3a4>)
 8001c1a:	f7ff fc29 	bl	8001470 <lcd_send_string>
               if(press_keypad != 0){
 8001c1e:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	f000 8339 	beq.w	800229a <main+0x7d2>
                 currentstate = STATE_SCREEN_PASSWORD;
 8001c28:	4b8f      	ldr	r3, [pc, #572]	; (8001e68 <main+0x3a0>)
 8001c2a:	2205      	movs	r2, #5
 8001c2c:	701a      	strb	r2, [r3, #0]
               }
               break;
 8001c2e:	e334      	b.n	800229a <main+0x7d2>

             case STATE_ACTIVE:
               lcd_clear_display();
 8001c30:	f7ff fc33 	bl	800149a <lcd_clear_display>
               break;
 8001c34:	e343      	b.n	80022be <main+0x7f6>

             case STATE_EMERGENCY:
            	 lcd_goto_XY(1, 0);
 8001c36:	2100      	movs	r1, #0
 8001c38:	2001      	movs	r0, #1
 8001c3a:	f7ff fc35 	bl	80014a8 <lcd_goto_XY>
            	 lcd_send_string("GAS IS LEAKING !");
 8001c3e:	488c      	ldr	r0, [pc, #560]	; (8001e70 <main+0x3a8>)
 8001c40:	f7ff fc16 	bl	8001470 <lcd_send_string>
            	 lcd_goto_XY(2, 0);
 8001c44:	2100      	movs	r1, #0
 8001c46:	2002      	movs	r0, #2
 8001c48:	f7ff fc2e 	bl	80014a8 <lcd_goto_XY>
            	 lcd_send_string(" EMERGENCY !");
 8001c4c:	4889      	ldr	r0, [pc, #548]	; (8001e74 <main+0x3ac>)
 8001c4e:	f7ff fc0f 	bl	8001470 <lcd_send_string>
            	 HAL_Delay(2000);
 8001c52:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001c56:	f001 f805 	bl	8002c64 <HAL_Delay>
            	 lcd_clear_display();
 8001c5a:	f7ff fc1e 	bl	800149a <lcd_clear_display>
            	 char gas_var2 = gas(var);
 8001c5e:	4b7d      	ldr	r3, [pc, #500]	; (8001e54 <main+0x38c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff fc42 	bl	80014ec <gas>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
            	 if(gas_var2 <= 30){HAL_Delay(200); lcd_clear_display(); currentstate = STATE_SAFE; break;}
 8001c6e:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001c72:	2b1e      	cmp	r3, #30
 8001c74:	d808      	bhi.n	8001c88 <main+0x1c0>
 8001c76:	20c8      	movs	r0, #200	; 0xc8
 8001c78:	f000 fff4 	bl	8002c64 <HAL_Delay>
 8001c7c:	f7ff fc0d 	bl	800149a <lcd_clear_display>
 8001c80:	4b79      	ldr	r3, [pc, #484]	; (8001e68 <main+0x3a0>)
 8001c82:	2203      	movs	r2, #3
 8001c84:	701a      	strb	r2, [r3, #0]
 8001c86:	e31a      	b.n	80022be <main+0x7f6>
            	 else{
            		 lcd_goto_XY(1, 0);
 8001c88:	2100      	movs	r1, #0
 8001c8a:	2001      	movs	r0, #1
 8001c8c:	f7ff fc0c 	bl	80014a8 <lcd_goto_XY>
            		 lcd_send_string("OPEN THE DOOR !");
 8001c90:	4879      	ldr	r0, [pc, #484]	; (8001e78 <main+0x3b0>)
 8001c92:	f7ff fbed 	bl	8001470 <lcd_send_string>
            		 if(press_keypad == 'C'){HAL_Delay(200);  lcd_clear_display(); currentstate = STATE_IDLE; break;}
 8001c96:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8001c9a:	2b43      	cmp	r3, #67	; 0x43
 8001c9c:	d108      	bne.n	8001cb0 <main+0x1e8>
 8001c9e:	20c8      	movs	r0, #200	; 0xc8
 8001ca0:	f000 ffe0 	bl	8002c64 <HAL_Delay>
 8001ca4:	f7ff fbf9 	bl	800149a <lcd_clear_display>
 8001ca8:	4b6f      	ldr	r3, [pc, #444]	; (8001e68 <main+0x3a0>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	701a      	strb	r2, [r3, #0]
 8001cae:	e306      	b.n	80022be <main+0x7f6>
            		 if(press_keypad == '*'){HAL_Delay(200);  lcd_clear_display(); currentstate = STATE_IDLE; break;}
 8001cb0:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8001cb4:	2b2a      	cmp	r3, #42	; 0x2a
 8001cb6:	d108      	bne.n	8001cca <main+0x202>
 8001cb8:	20c8      	movs	r0, #200	; 0xc8
 8001cba:	f000 ffd3 	bl	8002c64 <HAL_Delay>
 8001cbe:	f7ff fbec 	bl	800149a <lcd_clear_display>
 8001cc2:	4b69      	ldr	r3, [pc, #420]	; (8001e68 <main+0x3a0>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	701a      	strb	r2, [r3, #0]
 8001cc8:	e2f9      	b.n	80022be <main+0x7f6>
            	 }
            	 if(press_keypad == 'C'){HAL_Delay(200);  lcd_clear_display(); currentstate = STATE_IDLE;}
 8001cca:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8001cce:	2b43      	cmp	r3, #67	; 0x43
 8001cd0:	f040 82e5 	bne.w	800229e <main+0x7d6>
 8001cd4:	20c8      	movs	r0, #200	; 0xc8
 8001cd6:	f000 ffc5 	bl	8002c64 <HAL_Delay>
 8001cda:	f7ff fbde 	bl	800149a <lcd_clear_display>
 8001cde:	4b62      	ldr	r3, [pc, #392]	; (8001e68 <main+0x3a0>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	701a      	strb	r2, [r3, #0]

               break;
 8001ce4:	e2db      	b.n	800229e <main+0x7d6>

             case STATE_SAFE:
            	 lcd_goto_XY(1, 0);
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	2001      	movs	r0, #1
 8001cea:	f7ff fbdd 	bl	80014a8 <lcd_goto_XY>
            	 lcd_send_string("IT'S SAFE NOW");
 8001cee:	4863      	ldr	r0, [pc, #396]	; (8001e7c <main+0x3b4>)
 8001cf0:	f7ff fbbe 	bl	8001470 <lcd_send_string>
            	 HAL_Delay(2000);
 8001cf4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001cf8:	f000 ffb4 	bl	8002c64 <HAL_Delay>
            	 lcd_clear_display();
 8001cfc:	f7ff fbcd 	bl	800149a <lcd_clear_display>
            	 currentstate = STATE_GAS;
 8001d00:	4b59      	ldr	r3, [pc, #356]	; (8001e68 <main+0x3a0>)
 8001d02:	220b      	movs	r2, #11
 8001d04:	701a      	strb	r2, [r3, #0]
               break;
 8001d06:	e2da      	b.n	80022be <main+0x7f6>

             case STATE_OPEN_DOOR:
               break;

             case STATE_SCREEN_PASSWORD:
               currentstate = STATE_PASSWORD;
 8001d08:	4b57      	ldr	r3, [pc, #348]	; (8001e68 <main+0x3a0>)
 8001d0a:	2206      	movs	r2, #6
 8001d0c:	701a      	strb	r2, [r3, #0]
               lcd_clear_display();
 8001d0e:	f7ff fbc4 	bl	800149a <lcd_clear_display>
               lcd_goto_XY(1, 0);
 8001d12:	2100      	movs	r1, #0
 8001d14:	2001      	movs	r0, #1
 8001d16:	f7ff fbc7 	bl	80014a8 <lcd_goto_XY>
               lcd_send_string("  PASSWORD");
 8001d1a:	4859      	ldr	r0, [pc, #356]	; (8001e80 <main+0x3b8>)
 8001d1c:	f7ff fba8 	bl	8001470 <lcd_send_string>
               lcd_goto_XY(2, 2);
 8001d20:	2102      	movs	r1, #2
 8001d22:	2002      	movs	r0, #2
 8001d24:	f7ff fbc0 	bl	80014a8 <lcd_goto_XY>
               int k = 0;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
               break;
 8001d2e:	e2c6      	b.n	80022be <main+0x7f6>

             case STATE_PASSWORD:
               HAL_Delay(100);
 8001d30:	2064      	movs	r0, #100	; 0x64
 8001d32:	f000 ff97 	bl	8002c64 <HAL_Delay>
               if(press_keypad != 0){
 8001d36:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f000 82b1 	beq.w	80022a2 <main+0x7da>
                 HAL_Delay(100);
 8001d40:	2064      	movs	r0, #100	; 0x64
 8001d42:	f000 ff8f 	bl	8002c64 <HAL_Delay>
                 lcd_send_data(press_keypad);
 8001d46:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff fb32 	bl	80013b4 <lcd_send_data>
                 HAL_Delay(100);
 8001d50:	2064      	movs	r0, #100	; 0x64
 8001d52:	f000 ff87 	bl	8002c64 <HAL_Delay>
                 key_password[k] = press_keypad;
 8001d56:	4a4b      	ldr	r2, [pc, #300]	; (8001e84 <main+0x3bc>)
 8001d58:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001d5c:	4413      	add	r3, r2
 8001d5e:	f897 2093 	ldrb.w	r2, [r7, #147]	; 0x93
 8001d62:	701a      	strb	r2, [r3, #0]
                 k++;
 8001d64:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001d68:	3301      	adds	r3, #1
 8001d6a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                 if(k == 4){
 8001d6e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001d72:	2b04      	cmp	r3, #4
 8001d74:	f040 8295 	bne.w	80022a2 <main+0x7da>
                   if(check_pass() == true){
 8001d78:	f7ff fe6c 	bl	8001a54 <check_pass>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d01c      	beq.n	8001dbc <main+0x2f4>
                     currentstate = STATE_TRUE_PASSWORD;
 8001d82:	4b39      	ldr	r3, [pc, #228]	; (8001e68 <main+0x3a0>)
 8001d84:	2208      	movs	r2, #8
 8001d86:	701a      	strb	r2, [r3, #0]
                     HAL_Delay(100);
 8001d88:	2064      	movs	r0, #100	; 0x64
 8001d8a:	f000 ff6b 	bl	8002c64 <HAL_Delay>
                     lcd_clear_display();
 8001d8e:	f7ff fb84 	bl	800149a <lcd_clear_display>
                     lcd_goto_XY(1, 0);
 8001d92:	2100      	movs	r1, #0
 8001d94:	2001      	movs	r0, #1
 8001d96:	f7ff fb87 	bl	80014a8 <lcd_goto_XY>
                     lcd_send_string("  SUCCESS !!");
 8001d9a:	483b      	ldr	r0, [pc, #236]	; (8001e88 <main+0x3c0>)
 8001d9c:	f7ff fb68 	bl	8001470 <lcd_send_string>
                     lcd_goto_XY(2, 1);
 8001da0:	2101      	movs	r1, #1
 8001da2:	2002      	movs	r0, #2
 8001da4:	f7ff fb80 	bl	80014a8 <lcd_goto_XY>
                     lcd_send_string("OPEN THE DOOR");
 8001da8:	4838      	ldr	r0, [pc, #224]	; (8001e8c <main+0x3c4>)
 8001daa:	f7ff fb61 	bl	8001470 <lcd_send_string>
                     HAL_Delay(1000);
 8001dae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001db2:	f000 ff57 	bl	8002c64 <HAL_Delay>
                     lcd_clear_display();
 8001db6:	f7ff fb70 	bl	800149a <lcd_clear_display>
 8001dba:	e019      	b.n	8001df0 <main+0x328>
                   }
                   else{
                     HAL_Delay(100);
 8001dbc:	2064      	movs	r0, #100	; 0x64
 8001dbe:	f000 ff51 	bl	8002c64 <HAL_Delay>
                     lcd_clear_display();
 8001dc2:	f7ff fb6a 	bl	800149a <lcd_clear_display>
                     lcd_goto_XY(1, 0);
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	2001      	movs	r0, #1
 8001dca:	f7ff fb6d 	bl	80014a8 <lcd_goto_XY>
                     lcd_send_string("  FAILURE !!");
 8001dce:	4830      	ldr	r0, [pc, #192]	; (8001e90 <main+0x3c8>)
 8001dd0:	f7ff fb4e 	bl	8001470 <lcd_send_string>
                     lcd_goto_XY(2, 1);
 8001dd4:	2101      	movs	r1, #1
 8001dd6:	2002      	movs	r0, #2
 8001dd8:	f7ff fb66 	bl	80014a8 <lcd_goto_XY>
                     lcd_send_string("TRY AGAIN");
 8001ddc:	482d      	ldr	r0, [pc, #180]	; (8001e94 <main+0x3cc>)
 8001dde:	f7ff fb47 	bl	8001470 <lcd_send_string>
                     HAL_Delay(1000);
 8001de2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001de6:	f000 ff3d 	bl	8002c64 <HAL_Delay>
                     currentstate = STATE_WRONG_PASSWORD;
 8001dea:	4b1f      	ldr	r3, [pc, #124]	; (8001e68 <main+0x3a0>)
 8001dec:	2207      	movs	r2, #7
 8001dee:	701a      	strb	r2, [r3, #0]
                   }
                   HAL_Delay(100);
 8001df0:	2064      	movs	r0, #100	; 0x64
 8001df2:	f000 ff37 	bl	8002c64 <HAL_Delay>
                 }
               }
               break;
 8001df6:	e254      	b.n	80022a2 <main+0x7da>

             case STATE_TRUE_PASSWORD:
               HAL_Delay(100);
 8001df8:	2064      	movs	r0, #100	; 0x64
 8001dfa:	f000 ff33 	bl	8002c64 <HAL_Delay>
               lcd_goto_XY(1, 0);
 8001dfe:	2100      	movs	r1, #0
 8001e00:	2001      	movs	r0, #1
 8001e02:	f7ff fb51 	bl	80014a8 <lcd_goto_XY>
               lcd_send_string("  MENU");
 8001e06:	4824      	ldr	r0, [pc, #144]	; (8001e98 <main+0x3d0>)
 8001e08:	f7ff fb32 	bl	8001470 <lcd_send_string>
               lcd_goto_XY(2, 1);
 8001e0c:	2101      	movs	r1, #1
 8001e0e:	2002      	movs	r0, #2
 8001e10:	f7ff fb4a 	bl	80014a8 <lcd_goto_XY>
               lcd_send_string("1. GAS");
 8001e14:	4821      	ldr	r0, [pc, #132]	; (8001e9c <main+0x3d4>)
 8001e16:	f7ff fb2b 	bl	8001470 <lcd_send_string>
               if(press_keypad == 'R'){HAL_Delay(200);  lcd_clear_display(); currentstate = STATE_MENU_1;}
 8001e1a:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8001e1e:	2b52      	cmp	r3, #82	; 0x52
 8001e20:	d108      	bne.n	8001e34 <main+0x36c>
 8001e22:	20c8      	movs	r0, #200	; 0xc8
 8001e24:	f000 ff1e 	bl	8002c64 <HAL_Delay>
 8001e28:	f7ff fb37 	bl	800149a <lcd_clear_display>
 8001e2c:	4b0e      	ldr	r3, [pc, #56]	; (8001e68 <main+0x3a0>)
 8001e2e:	2209      	movs	r2, #9
 8001e30:	701a      	strb	r2, [r3, #0]
 8001e32:	e041      	b.n	8001eb8 <main+0x3f0>
               else if(press_keypad == 'L'){HAL_Delay(200);  lcd_clear_display(); currentstate =STATE_MENU_2;}
 8001e34:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8001e38:	2b4c      	cmp	r3, #76	; 0x4c
 8001e3a:	d131      	bne.n	8001ea0 <main+0x3d8>
 8001e3c:	20c8      	movs	r0, #200	; 0xc8
 8001e3e:	f000 ff11 	bl	8002c64 <HAL_Delay>
 8001e42:	f7ff fb2a 	bl	800149a <lcd_clear_display>
 8001e46:	4b08      	ldr	r3, [pc, #32]	; (8001e68 <main+0x3a0>)
 8001e48:	220a      	movs	r2, #10
 8001e4a:	701a      	strb	r2, [r3, #0]
 8001e4c:	e034      	b.n	8001eb8 <main+0x3f0>
 8001e4e:	bf00      	nop
 8001e50:	20000328 	.word	0x20000328
 8001e54:	20000374 	.word	0x20000374
 8001e58:	2000020c 	.word	0x2000020c
 8001e5c:	0800a500 	.word	0x0800a500
 8001e60:	0800a618 	.word	0x0800a618
 8001e64:	200002d4 	.word	0x200002d4
 8001e68:	2000038d 	.word	0x2000038d
 8001e6c:	0800a50c 	.word	0x0800a50c
 8001e70:	0800a51c 	.word	0x0800a51c
 8001e74:	0800a530 	.word	0x0800a530
 8001e78:	0800a540 	.word	0x0800a540
 8001e7c:	0800a550 	.word	0x0800a550
 8001e80:	0800a560 	.word	0x0800a560
 8001e84:	20000370 	.word	0x20000370
 8001e88:	0800a56c 	.word	0x0800a56c
 8001e8c:	0800a57c 	.word	0x0800a57c
 8001e90:	0800a58c 	.word	0x0800a58c
 8001e94:	0800a59c 	.word	0x0800a59c
 8001e98:	0800a5a8 	.word	0x0800a5a8
 8001e9c:	0800a5b0 	.word	0x0800a5b0
               else if(press_keypad == 'E'){HAL_Delay(200);  lcd_clear_display(); currentstate = STATE_GAS;}
 8001ea0:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8001ea4:	2b45      	cmp	r3, #69	; 0x45
 8001ea6:	d107      	bne.n	8001eb8 <main+0x3f0>
 8001ea8:	20c8      	movs	r0, #200	; 0xc8
 8001eaa:	f000 fedb 	bl	8002c64 <HAL_Delay>
 8001eae:	f7ff faf4 	bl	800149a <lcd_clear_display>
 8001eb2:	4bbb      	ldr	r3, [pc, #748]	; (80021a0 <main+0x6d8>)
 8001eb4:	220b      	movs	r2, #11
 8001eb6:	701a      	strb	r2, [r3, #0]
               if(press_keypad == 'C'){HAL_Delay(200);  lcd_clear_display(); currentstate = STATE_IDLE;}
 8001eb8:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8001ebc:	2b43      	cmp	r3, #67	; 0x43
 8001ebe:	f040 81f2 	bne.w	80022a6 <main+0x7de>
 8001ec2:	20c8      	movs	r0, #200	; 0xc8
 8001ec4:	f000 fece 	bl	8002c64 <HAL_Delay>
 8001ec8:	f7ff fae7 	bl	800149a <lcd_clear_display>
 8001ecc:	4bb4      	ldr	r3, [pc, #720]	; (80021a0 <main+0x6d8>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	701a      	strb	r2, [r3, #0]
               break;
 8001ed2:	e1e8      	b.n	80022a6 <main+0x7de>

             case STATE_WRONG_PASSWORD:
               currentstate = STATE_SCREEN_PASSWORD;
 8001ed4:	4bb2      	ldr	r3, [pc, #712]	; (80021a0 <main+0x6d8>)
 8001ed6:	2205      	movs	r2, #5
 8001ed8:	701a      	strb	r2, [r3, #0]
               break;
 8001eda:	e1f0      	b.n	80022be <main+0x7f6>

             case STATE_MENU_1:
               HAL_Delay(100);
 8001edc:	2064      	movs	r0, #100	; 0x64
 8001ede:	f000 fec1 	bl	8002c64 <HAL_Delay>
             lcd_goto_XY(1, 0);
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	2001      	movs	r0, #1
 8001ee6:	f7ff fadf 	bl	80014a8 <lcd_goto_XY>
             lcd_send_string("  MENU");
 8001eea:	48ae      	ldr	r0, [pc, #696]	; (80021a4 <main+0x6dc>)
 8001eec:	f7ff fac0 	bl	8001470 <lcd_send_string>
             lcd_goto_XY(2, 1);
 8001ef0:	2101      	movs	r1, #1
 8001ef2:	2002      	movs	r0, #2
 8001ef4:	f7ff fad8 	bl	80014a8 <lcd_goto_XY>
             lcd_send_string("2. TEMP");
 8001ef8:	48ab      	ldr	r0, [pc, #684]	; (80021a8 <main+0x6e0>)
 8001efa:	f7ff fab9 	bl	8001470 <lcd_send_string>
             if(press_keypad == 'R'){HAL_Delay(200);  lcd_clear_display(); currentstate = STATE_MENU_2;}
 8001efe:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8001f02:	2b52      	cmp	r3, #82	; 0x52
 8001f04:	d108      	bne.n	8001f18 <main+0x450>
 8001f06:	20c8      	movs	r0, #200	; 0xc8
 8001f08:	f000 feac 	bl	8002c64 <HAL_Delay>
 8001f0c:	f7ff fac5 	bl	800149a <lcd_clear_display>
 8001f10:	4ba3      	ldr	r3, [pc, #652]	; (80021a0 <main+0x6d8>)
 8001f12:	220a      	movs	r2, #10
 8001f14:	701a      	strb	r2, [r3, #0]
 8001f16:	e018      	b.n	8001f4a <main+0x482>
             else if(press_keypad == 'L'){HAL_Delay(200);  lcd_clear_display(); currentstate = STATE_TRUE_PASSWORD;}
 8001f18:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8001f1c:	2b4c      	cmp	r3, #76	; 0x4c
 8001f1e:	d108      	bne.n	8001f32 <main+0x46a>
 8001f20:	20c8      	movs	r0, #200	; 0xc8
 8001f22:	f000 fe9f 	bl	8002c64 <HAL_Delay>
 8001f26:	f7ff fab8 	bl	800149a <lcd_clear_display>
 8001f2a:	4b9d      	ldr	r3, [pc, #628]	; (80021a0 <main+0x6d8>)
 8001f2c:	2208      	movs	r2, #8
 8001f2e:	701a      	strb	r2, [r3, #0]
 8001f30:	e00b      	b.n	8001f4a <main+0x482>
             else if(press_keypad == 'E'){HAL_Delay(200);  lcd_clear_display(); currentstate = STATE_TEMP;}
 8001f32:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8001f36:	2b45      	cmp	r3, #69	; 0x45
 8001f38:	d107      	bne.n	8001f4a <main+0x482>
 8001f3a:	20c8      	movs	r0, #200	; 0xc8
 8001f3c:	f000 fe92 	bl	8002c64 <HAL_Delay>
 8001f40:	f7ff faab 	bl	800149a <lcd_clear_display>
 8001f44:	4b96      	ldr	r3, [pc, #600]	; (80021a0 <main+0x6d8>)
 8001f46:	220c      	movs	r2, #12
 8001f48:	701a      	strb	r2, [r3, #0]
             if(press_keypad == 'C'){HAL_Delay(200);  lcd_clear_display(); currentstate = STATE_IDLE;}
 8001f4a:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8001f4e:	2b43      	cmp	r3, #67	; 0x43
 8001f50:	f040 81ab 	bne.w	80022aa <main+0x7e2>
 8001f54:	20c8      	movs	r0, #200	; 0xc8
 8001f56:	f000 fe85 	bl	8002c64 <HAL_Delay>
 8001f5a:	f7ff fa9e 	bl	800149a <lcd_clear_display>
 8001f5e:	4b90      	ldr	r3, [pc, #576]	; (80021a0 <main+0x6d8>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	701a      	strb	r2, [r3, #0]
             break;
 8001f64:	e1a1      	b.n	80022aa <main+0x7e2>

             case STATE_MENU_2:
               HAL_Delay(100);
 8001f66:	2064      	movs	r0, #100	; 0x64
 8001f68:	f000 fe7c 	bl	8002c64 <HAL_Delay>
             lcd_goto_XY(1, 0);
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	2001      	movs	r0, #1
 8001f70:	f7ff fa9a 	bl	80014a8 <lcd_goto_XY>
             lcd_send_string("  MENU");
 8001f74:	488b      	ldr	r0, [pc, #556]	; (80021a4 <main+0x6dc>)
 8001f76:	f7ff fa7b 	bl	8001470 <lcd_send_string>
             lcd_goto_XY(2, 1);
 8001f7a:	2101      	movs	r1, #1
 8001f7c:	2002      	movs	r0, #2
 8001f7e:	f7ff fa93 	bl	80014a8 <lcd_goto_XY>
             lcd_send_string("3. TIME");
 8001f82:	488a      	ldr	r0, [pc, #552]	; (80021ac <main+0x6e4>)
 8001f84:	f7ff fa74 	bl	8001470 <lcd_send_string>
             if(press_keypad == 'R'){HAL_Delay(200);  lcd_clear_display(); currentstate = STATE_TRUE_PASSWORD;}
 8001f88:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8001f8c:	2b52      	cmp	r3, #82	; 0x52
 8001f8e:	d108      	bne.n	8001fa2 <main+0x4da>
 8001f90:	20c8      	movs	r0, #200	; 0xc8
 8001f92:	f000 fe67 	bl	8002c64 <HAL_Delay>
 8001f96:	f7ff fa80 	bl	800149a <lcd_clear_display>
 8001f9a:	4b81      	ldr	r3, [pc, #516]	; (80021a0 <main+0x6d8>)
 8001f9c:	2208      	movs	r2, #8
 8001f9e:	701a      	strb	r2, [r3, #0]
 8001fa0:	e018      	b.n	8001fd4 <main+0x50c>
             else if(press_keypad == 'L'){HAL_Delay(200);  lcd_clear_display(); currentstate = STATE_MENU_1;}
 8001fa2:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8001fa6:	2b4c      	cmp	r3, #76	; 0x4c
 8001fa8:	d108      	bne.n	8001fbc <main+0x4f4>
 8001faa:	20c8      	movs	r0, #200	; 0xc8
 8001fac:	f000 fe5a 	bl	8002c64 <HAL_Delay>
 8001fb0:	f7ff fa73 	bl	800149a <lcd_clear_display>
 8001fb4:	4b7a      	ldr	r3, [pc, #488]	; (80021a0 <main+0x6d8>)
 8001fb6:	2209      	movs	r2, #9
 8001fb8:	701a      	strb	r2, [r3, #0]
 8001fba:	e00b      	b.n	8001fd4 <main+0x50c>
             else if(press_keypad == 'E'){HAL_Delay(200);  lcd_clear_display(); currentstate = STATE_TIME;}
 8001fbc:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8001fc0:	2b45      	cmp	r3, #69	; 0x45
 8001fc2:	d107      	bne.n	8001fd4 <main+0x50c>
 8001fc4:	20c8      	movs	r0, #200	; 0xc8
 8001fc6:	f000 fe4d 	bl	8002c64 <HAL_Delay>
 8001fca:	f7ff fa66 	bl	800149a <lcd_clear_display>
 8001fce:	4b74      	ldr	r3, [pc, #464]	; (80021a0 <main+0x6d8>)
 8001fd0:	220d      	movs	r2, #13
 8001fd2:	701a      	strb	r2, [r3, #0]
             if(press_keypad == 'C'){HAL_Delay(200);  lcd_clear_display(); currentstate = STATE_IDLE;}
 8001fd4:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8001fd8:	2b43      	cmp	r3, #67	; 0x43
 8001fda:	f040 8168 	bne.w	80022ae <main+0x7e6>
 8001fde:	20c8      	movs	r0, #200	; 0xc8
 8001fe0:	f000 fe40 	bl	8002c64 <HAL_Delay>
 8001fe4:	f7ff fa59 	bl	800149a <lcd_clear_display>
 8001fe8:	4b6d      	ldr	r3, [pc, #436]	; (80021a0 <main+0x6d8>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	701a      	strb	r2, [r3, #0]
               break;
 8001fee:	e15e      	b.n	80022ae <main+0x7e6>

             case STATE_GAS:
               HAL_Delay(100);
 8001ff0:	2064      	movs	r0, #100	; 0x64
 8001ff2:	f000 fe37 	bl	8002c64 <HAL_Delay>
               		 char gas_var = gas(var);
 8001ff6:	4b6e      	ldr	r3, [pc, #440]	; (80021b0 <main+0x6e8>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7ff fa76 	bl	80014ec <gas>
 8002000:	4603      	mov	r3, r0
 8002002:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
                     lcd_goto_XY(1, 0);
 8002006:	2100      	movs	r1, #0
 8002008:	2001      	movs	r0, #1
 800200a:	f7ff fa4d 	bl	80014a8 <lcd_goto_XY>
                     lcd_send_string("GAS: ");
 800200e:	4869      	ldr	r0, [pc, #420]	; (80021b4 <main+0x6ec>)
 8002010:	f7ff fa2e 	bl	8001470 <lcd_send_string>
                     lcd_send_data(gas_var/100 + '0');
 8002014:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002018:	4a67      	ldr	r2, [pc, #412]	; (80021b8 <main+0x6f0>)
 800201a:	fba2 2303 	umull	r2, r3, r2, r3
 800201e:	095b      	lsrs	r3, r3, #5
 8002020:	b2db      	uxtb	r3, r3
 8002022:	3330      	adds	r3, #48	; 0x30
 8002024:	b2db      	uxtb	r3, r3
 8002026:	4618      	mov	r0, r3
 8002028:	f7ff f9c4 	bl	80013b4 <lcd_send_data>
                     lcd_send_data((gas_var%100)/10 + '0');
 800202c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002030:	4a61      	ldr	r2, [pc, #388]	; (80021b8 <main+0x6f0>)
 8002032:	fba2 1203 	umull	r1, r2, r2, r3
 8002036:	0952      	lsrs	r2, r2, #5
 8002038:	2164      	movs	r1, #100	; 0x64
 800203a:	fb01 f202 	mul.w	r2, r1, r2
 800203e:	1a9b      	subs	r3, r3, r2
 8002040:	b2db      	uxtb	r3, r3
 8002042:	4a5e      	ldr	r2, [pc, #376]	; (80021bc <main+0x6f4>)
 8002044:	fba2 2303 	umull	r2, r3, r2, r3
 8002048:	08db      	lsrs	r3, r3, #3
 800204a:	b2db      	uxtb	r3, r3
 800204c:	3330      	adds	r3, #48	; 0x30
 800204e:	b2db      	uxtb	r3, r3
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff f9af 	bl	80013b4 <lcd_send_data>
                     lcd_send_data(gas_var%10 + '0');
 8002056:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 800205a:	4b58      	ldr	r3, [pc, #352]	; (80021bc <main+0x6f4>)
 800205c:	fba3 1302 	umull	r1, r3, r3, r2
 8002060:	08d9      	lsrs	r1, r3, #3
 8002062:	460b      	mov	r3, r1
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	440b      	add	r3, r1
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	b2db      	uxtb	r3, r3
 800206e:	3330      	adds	r3, #48	; 0x30
 8002070:	b2db      	uxtb	r3, r3
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff f99e 	bl	80013b4 <lcd_send_data>
                     if(gas_var >= 90){HAL_Delay(200); lcd_clear_display(); currentstate = STATE_EMERGENCY; break;}
 8002078:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800207c:	2b59      	cmp	r3, #89	; 0x59
 800207e:	d908      	bls.n	8002092 <main+0x5ca>
 8002080:	20c8      	movs	r0, #200	; 0xc8
 8002082:	f000 fdef 	bl	8002c64 <HAL_Delay>
 8002086:	f7ff fa08 	bl	800149a <lcd_clear_display>
 800208a:	4b45      	ldr	r3, [pc, #276]	; (80021a0 <main+0x6d8>)
 800208c:	2202      	movs	r2, #2
 800208e:	701a      	strb	r2, [r3, #0]
 8002090:	e115      	b.n	80022be <main+0x7f6>
                    if(press_keypad == 'C'){HAL_Delay(200);  lcd_clear_display(); currentstate = STATE_IDLE;}
 8002092:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8002096:	2b43      	cmp	r3, #67	; 0x43
 8002098:	d107      	bne.n	80020aa <main+0x5e2>
 800209a:	20c8      	movs	r0, #200	; 0xc8
 800209c:	f000 fde2 	bl	8002c64 <HAL_Delay>
 80020a0:	f7ff f9fb 	bl	800149a <lcd_clear_display>
 80020a4:	4b3e      	ldr	r3, [pc, #248]	; (80021a0 <main+0x6d8>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	701a      	strb	r2, [r3, #0]
                    if(press_keypad == 'L'){HAL_Delay(200);  lcd_clear_display(); currentstate = STATE_TRUE_PASSWORD;}
 80020aa:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80020ae:	2b4c      	cmp	r3, #76	; 0x4c
 80020b0:	f040 80ff 	bne.w	80022b2 <main+0x7ea>
 80020b4:	20c8      	movs	r0, #200	; 0xc8
 80020b6:	f000 fdd5 	bl	8002c64 <HAL_Delay>
 80020ba:	f7ff f9ee 	bl	800149a <lcd_clear_display>
 80020be:	4b38      	ldr	r3, [pc, #224]	; (80021a0 <main+0x6d8>)
 80020c0:	2208      	movs	r2, #8
 80020c2:	701a      	strb	r2, [r3, #0]
               break;
 80020c4:	e0f5      	b.n	80022b2 <main+0x7ea>

             case STATE_TEMP:
               HAL_Delay(100);
 80020c6:	2064      	movs	r0, #100	; 0x64
 80020c8:	f000 fdcc 	bl	8002c64 <HAL_Delay>
               DHT11_Start();
 80020cc:	f7fe ff22 	bl	8000f14 <DHT11_Start>
              	  	     Presence = DHT11_Check_Response(); // record the response from the sensor
 80020d0:	f7fe ff48 	bl	8000f64 <DHT11_Check_Response>
 80020d4:	4603      	mov	r3, r0
 80020d6:	461a      	mov	r2, r3
 80020d8:	4b39      	ldr	r3, [pc, #228]	; (80021c0 <main+0x6f8>)
 80020da:	701a      	strb	r2, [r3, #0]

              	  	     // Five bytes of data
              	  	     Rh_byte1 = DHT11_Read();
 80020dc:	f7fe ff70 	bl	8000fc0 <DHT11_Read>
 80020e0:	4603      	mov	r3, r0
 80020e2:	461a      	mov	r2, r3
 80020e4:	4b37      	ldr	r3, [pc, #220]	; (80021c4 <main+0x6fc>)
 80020e6:	701a      	strb	r2, [r3, #0]
              	  	     Rh_byte2 = DHT11_Read();
 80020e8:	f7fe ff6a 	bl	8000fc0 <DHT11_Read>
 80020ec:	4603      	mov	r3, r0
 80020ee:	461a      	mov	r2, r3
 80020f0:	4b35      	ldr	r3, [pc, #212]	; (80021c8 <main+0x700>)
 80020f2:	701a      	strb	r2, [r3, #0]
              	  	     Temp_byte1 = DHT11_Read();
 80020f4:	f7fe ff64 	bl	8000fc0 <DHT11_Read>
 80020f8:	4603      	mov	r3, r0
 80020fa:	461a      	mov	r2, r3
 80020fc:	4b33      	ldr	r3, [pc, #204]	; (80021cc <main+0x704>)
 80020fe:	701a      	strb	r2, [r3, #0]
              	  	     Temp_byte2 = DHT11_Read();
 8002100:	f7fe ff5e 	bl	8000fc0 <DHT11_Read>
 8002104:	4603      	mov	r3, r0
 8002106:	461a      	mov	r2, r3
 8002108:	4b31      	ldr	r3, [pc, #196]	; (80021d0 <main+0x708>)
 800210a:	701a      	strb	r2, [r3, #0]
              	  	     SUM = DHT11_Read();
 800210c:	f7fe ff58 	bl	8000fc0 <DHT11_Read>
 8002110:	4603      	mov	r3, r0
 8002112:	b29a      	uxth	r2, r3
 8002114:	4b2f      	ldr	r3, [pc, #188]	; (80021d4 <main+0x70c>)
 8002116:	801a      	strh	r2, [r3, #0]

              	  	     TEMP = Temp_byte1;
 8002118:	4b2c      	ldr	r3, [pc, #176]	; (80021cc <main+0x704>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	b29a      	uxth	r2, r3
 800211e:	4b2e      	ldr	r3, [pc, #184]	; (80021d8 <main+0x710>)
 8002120:	801a      	strh	r2, [r3, #0]
              	  	     RH = Rh_byte1;
 8002122:	4b28      	ldr	r3, [pc, #160]	; (80021c4 <main+0x6fc>)
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	b29a      	uxth	r2, r3
 8002128:	4b2c      	ldr	r3, [pc, #176]	; (80021dc <main+0x714>)
 800212a:	801a      	strh	r2, [r3, #0]

              	  	     Temperature = (float)TEMP;
 800212c:	4b2a      	ldr	r3, [pc, #168]	; (80021d8 <main+0x710>)
 800212e:	881b      	ldrh	r3, [r3, #0]
 8002130:	4618      	mov	r0, r3
 8002132:	f7fe fdcf 	bl	8000cd4 <__aeabi_ui2f>
 8002136:	4603      	mov	r3, r0
 8002138:	4a29      	ldr	r2, [pc, #164]	; (80021e0 <main+0x718>)
 800213a:	6013      	str	r3, [r2, #0]
              	  	     Humidity = (float)RH;
 800213c:	4b27      	ldr	r3, [pc, #156]	; (80021dc <main+0x714>)
 800213e:	881b      	ldrh	r3, [r3, #0]
 8002140:	4618      	mov	r0, r3
 8002142:	f7fe fdc7 	bl	8000cd4 <__aeabi_ui2f>
 8002146:	4603      	mov	r3, r0
 8002148:	4a26      	ldr	r2, [pc, #152]	; (80021e4 <main+0x71c>)
 800214a:	6013      	str	r3, [r2, #0]

              	  	     Display_Temp(Temperature);
 800214c:	4b24      	ldr	r3, [pc, #144]	; (80021e0 <main+0x718>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4618      	mov	r0, r3
 8002152:	f7fe fe4f 	bl	8000df4 <Display_Temp>
              	  	     Display_Rh(Humidity);
 8002156:	4b23      	ldr	r3, [pc, #140]	; (80021e4 <main+0x71c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4618      	mov	r0, r3
 800215c:	f7fe fe76 	bl	8000e4c <Display_Rh>

              	  	     HAL_Delay(1200);
 8002160:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8002164:	f000 fd7e 	bl	8002c64 <HAL_Delay>
            	   if(press_keypad == 'C'){HAL_Delay(200);  lcd_clear_display(); currentstate = STATE_IDLE; break;}
 8002168:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 800216c:	2b43      	cmp	r3, #67	; 0x43
 800216e:	d108      	bne.n	8002182 <main+0x6ba>
 8002170:	20c8      	movs	r0, #200	; 0xc8
 8002172:	f000 fd77 	bl	8002c64 <HAL_Delay>
 8002176:	f7ff f990 	bl	800149a <lcd_clear_display>
 800217a:	4b09      	ldr	r3, [pc, #36]	; (80021a0 <main+0x6d8>)
 800217c:	2200      	movs	r2, #0
 800217e:	701a      	strb	r2, [r3, #0]
 8002180:	e09d      	b.n	80022be <main+0x7f6>
				   if(press_keypad == 'L'){HAL_Delay(200);  lcd_clear_display(); currentstate = STATE_MENU_1; break;}
 8002182:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8002186:	2b4c      	cmp	r3, #76	; 0x4c
 8002188:	f040 8095 	bne.w	80022b6 <main+0x7ee>
 800218c:	20c8      	movs	r0, #200	; 0xc8
 800218e:	f000 fd69 	bl	8002c64 <HAL_Delay>
 8002192:	f7ff f982 	bl	800149a <lcd_clear_display>
 8002196:	4b02      	ldr	r3, [pc, #8]	; (80021a0 <main+0x6d8>)
 8002198:	2209      	movs	r2, #9
 800219a:	701a      	strb	r2, [r3, #0]
 800219c:	e08f      	b.n	80022be <main+0x7f6>
 800219e:	bf00      	nop
 80021a0:	2000038d 	.word	0x2000038d
 80021a4:	0800a5a8 	.word	0x0800a5a8
 80021a8:	0800a5b8 	.word	0x0800a5b8
 80021ac:	0800a5c0 	.word	0x0800a5c0
 80021b0:	20000374 	.word	0x20000374
 80021b4:	0800a5c8 	.word	0x0800a5c8
 80021b8:	51eb851f 	.word	0x51eb851f
 80021bc:	cccccccd 	.word	0xcccccccd
 80021c0:	2000038c 	.word	0x2000038c
 80021c4:	20000378 	.word	0x20000378
 80021c8:	20000379 	.word	0x20000379
 80021cc:	2000037a 	.word	0x2000037a
 80021d0:	2000037b 	.word	0x2000037b
 80021d4:	2000037c 	.word	0x2000037c
 80021d8:	20000380 	.word	0x20000380
 80021dc:	2000037e 	.word	0x2000037e
 80021e0:	20000384 	.word	0x20000384
 80021e4:	20000388 	.word	0x20000388
    //              if(press_keypad == 'C'){HAL_Delay(200);  lcd_clear_display(); currentstate = STATE_IDLE;}
    //              if(press_keypad == 'L'){HAL_Delay(200);  lcd_clear_display(); currentstate = STATE_MENU_1;}
               break;

             case STATE_TIME:
               HAL_Delay(100);
 80021e8:	2064      	movs	r0, #100	; 0x64
 80021ea:	f000 fd3b 	bl	8002c64 <HAL_Delay>

               		char buffer[100] = { 0 };
 80021ee:	2300      	movs	r3, #0
 80021f0:	607b      	str	r3, [r7, #4]
 80021f2:	f107 0308 	add.w	r3, r7, #8
 80021f6:	2260      	movs	r2, #96	; 0x60
 80021f8:	2100      	movs	r1, #0
 80021fa:	4618      	mov	r0, r3
 80021fc:	f004 fd45 	bl	8006c8a <memset>
               		sprintf(buffer, "%s: %02d-%02d-%04d \n", DAYS_OF_WEEK[dow], date, month, year);
 8002200:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	3398      	adds	r3, #152	; 0x98
 8002208:	443b      	add	r3, r7
 800220a:	f853 1c30 	ldr.w	r1, [r3, #-48]
 800220e:	f897 4092 	ldrb.w	r4, [r7, #146]	; 0x92
 8002212:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8002216:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800221a:	1d38      	adds	r0, r7, #4
 800221c:	9201      	str	r2, [sp, #4]
 800221e:	9300      	str	r3, [sp, #0]
 8002220:	4623      	mov	r3, r4
 8002222:	460a      	mov	r2, r1
 8002224:	4926      	ldr	r1, [pc, #152]	; (80022c0 <main+0x7f8>)
 8002226:	f004 fccd 	bl	8006bc4 <siprintf>
               		lcd_goto_XY(1, 0);
 800222a:	2100      	movs	r1, #0
 800222c:	2001      	movs	r0, #1
 800222e:	f7ff f93b 	bl	80014a8 <lcd_goto_XY>
               		lcd_send_string(buffer);
 8002232:	1d3b      	adds	r3, r7, #4
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff f91b 	bl	8001470 <lcd_send_string>

               		sprintf(buffer, "%02d:%02d:%02d  \n",hour, minute, second);
 800223a:	f897 208c 	ldrb.w	r2, [r7, #140]	; 0x8c
 800223e:	f897 108b 	ldrb.w	r1, [r7, #139]	; 0x8b
 8002242:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 8002246:	1d38      	adds	r0, r7, #4
 8002248:	9300      	str	r3, [sp, #0]
 800224a:	460b      	mov	r3, r1
 800224c:	491d      	ldr	r1, [pc, #116]	; (80022c4 <main+0x7fc>)
 800224e:	f004 fcb9 	bl	8006bc4 <siprintf>
					lcd_goto_XY(2, 0);
 8002252:	2100      	movs	r1, #0
 8002254:	2002      	movs	r0, #2
 8002256:	f7ff f927 	bl	80014a8 <lcd_goto_XY>
					lcd_send_string(buffer);
 800225a:	1d3b      	adds	r3, r7, #4
 800225c:	4618      	mov	r0, r3
 800225e:	f7ff f907 	bl	8001470 <lcd_send_string>
               		/* May show warning below. Ignore and proceed. */
//               		HAL_UART_Transmit(&huart1, buffer, strlen(buffer), 1000);
               		HAL_Delay(250);
 8002262:	20fa      	movs	r0, #250	; 0xfa
 8002264:	f000 fcfe 	bl	8002c64 <HAL_Delay>
                  if(press_keypad == 'C'){HAL_Delay(200);  lcd_clear_display(); currentstate = STATE_IDLE;}
 8002268:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 800226c:	2b43      	cmp	r3, #67	; 0x43
 800226e:	d107      	bne.n	8002280 <main+0x7b8>
 8002270:	20c8      	movs	r0, #200	; 0xc8
 8002272:	f000 fcf7 	bl	8002c64 <HAL_Delay>
 8002276:	f7ff f910 	bl	800149a <lcd_clear_display>
 800227a:	4b13      	ldr	r3, [pc, #76]	; (80022c8 <main+0x800>)
 800227c:	2200      	movs	r2, #0
 800227e:	701a      	strb	r2, [r3, #0]
                  if(press_keypad == 'L'){HAL_Delay(200);  lcd_clear_display(); currentstate = STATE_MENU_2;}
 8002280:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8002284:	2b4c      	cmp	r3, #76	; 0x4c
 8002286:	d118      	bne.n	80022ba <main+0x7f2>
 8002288:	20c8      	movs	r0, #200	; 0xc8
 800228a:	f000 fceb 	bl	8002c64 <HAL_Delay>
 800228e:	f7ff f904 	bl	800149a <lcd_clear_display>
 8002292:	4b0d      	ldr	r3, [pc, #52]	; (80022c8 <main+0x800>)
 8002294:	220a      	movs	r2, #10
 8002296:	701a      	strb	r2, [r3, #0]
                       break;
 8002298:	e00f      	b.n	80022ba <main+0x7f2>
               break;
 800229a:	bf00      	nop
 800229c:	e461      	b.n	8001b62 <main+0x9a>
               break;
 800229e:	bf00      	nop
 80022a0:	e45f      	b.n	8001b62 <main+0x9a>
               break;
 80022a2:	bf00      	nop
 80022a4:	e45d      	b.n	8001b62 <main+0x9a>
               break;
 80022a6:	bf00      	nop
 80022a8:	e45b      	b.n	8001b62 <main+0x9a>
             break;
 80022aa:	bf00      	nop
 80022ac:	e459      	b.n	8001b62 <main+0x9a>
               break;
 80022ae:	bf00      	nop
 80022b0:	e457      	b.n	8001b62 <main+0x9a>
               break;
 80022b2:	bf00      	nop
 80022b4:	e455      	b.n	8001b62 <main+0x9a>
               break;
 80022b6:	bf00      	nop
 80022b8:	e453      	b.n	8001b62 <main+0x9a>
                       break;
 80022ba:	bf00      	nop
 80022bc:	e451      	b.n	8001b62 <main+0x9a>
  {
 80022be:	e450      	b.n	8001b62 <main+0x9a>
 80022c0:	0800a5d0 	.word	0x0800a5d0
 80022c4:	0800a5e8 	.word	0x0800a5e8
 80022c8:	2000038d 	.word	0x2000038d

080022cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b094      	sub	sp, #80	; 0x50
 80022d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022d6:	2228      	movs	r2, #40	; 0x28
 80022d8:	2100      	movs	r1, #0
 80022da:	4618      	mov	r0, r3
 80022dc:	f004 fcd5 	bl	8006c8a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022e0:	f107 0314 	add.w	r3, r7, #20
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	605a      	str	r2, [r3, #4]
 80022ea:	609a      	str	r2, [r3, #8]
 80022ec:	60da      	str	r2, [r3, #12]
 80022ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022f0:	1d3b      	adds	r3, r7, #4
 80022f2:	2200      	movs	r2, #0
 80022f4:	601a      	str	r2, [r3, #0]
 80022f6:	605a      	str	r2, [r3, #4]
 80022f8:	609a      	str	r2, [r3, #8]
 80022fa:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80022fc:	2301      	movs	r3, #1
 80022fe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002300:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002304:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002306:	2300      	movs	r3, #0
 8002308:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800230a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800230e:	4618      	mov	r0, r3
 8002310:	f002 fdd2 	bl	8004eb8 <HAL_RCC_OscConfig>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <SystemClock_Config+0x52>
  {
    Error_Handler();
 800231a:	f000 f9f9 	bl	8002710 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800231e:	230f      	movs	r3, #15
 8002320:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002322:	2301      	movs	r3, #1
 8002324:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002326:	2300      	movs	r3, #0
 8002328:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800232a:	2300      	movs	r3, #0
 800232c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800232e:	2300      	movs	r3, #0
 8002330:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002332:	f107 0314 	add.w	r3, r7, #20
 8002336:	2100      	movs	r1, #0
 8002338:	4618      	mov	r0, r3
 800233a:	f003 f83f 	bl	80053bc <HAL_RCC_ClockConfig>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8002344:	f000 f9e4 	bl	8002710 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002348:	2302      	movs	r3, #2
 800234a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 800234c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002350:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002352:	1d3b      	adds	r3, r7, #4
 8002354:	4618      	mov	r0, r3
 8002356:	f003 f9ab 	bl	80056b0 <HAL_RCCEx_PeriphCLKConfig>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002360:	f000 f9d6 	bl	8002710 <Error_Handler>
  }
}
 8002364:	bf00      	nop
 8002366:	3750      	adds	r7, #80	; 0x50
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b08a      	sub	sp, #40	; 0x28
 8002370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8002372:	f107 0310 	add.w	r3, r7, #16
 8002376:	2200      	movs	r2, #0
 8002378:	601a      	str	r2, [r3, #0]
 800237a:	605a      	str	r2, [r3, #4]
 800237c:	609a      	str	r2, [r3, #8]
 800237e:	60da      	str	r2, [r3, #12]
 8002380:	611a      	str	r2, [r3, #16]
 8002382:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002384:	1d3b      	adds	r3, r7, #4
 8002386:	2200      	movs	r2, #0
 8002388:	601a      	str	r2, [r3, #0]
 800238a:	605a      	str	r2, [r3, #4]
 800238c:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800238e:	4b23      	ldr	r3, [pc, #140]	; (800241c <MX_ADC1_Init+0xb0>)
 8002390:	4a23      	ldr	r2, [pc, #140]	; (8002420 <MX_ADC1_Init+0xb4>)
 8002392:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002394:	4b21      	ldr	r3, [pc, #132]	; (800241c <MX_ADC1_Init+0xb0>)
 8002396:	2200      	movs	r2, #0
 8002398:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800239a:	4b20      	ldr	r3, [pc, #128]	; (800241c <MX_ADC1_Init+0xb0>)
 800239c:	2201      	movs	r2, #1
 800239e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80023a0:	4b1e      	ldr	r3, [pc, #120]	; (800241c <MX_ADC1_Init+0xb0>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80023a6:	4b1d      	ldr	r3, [pc, #116]	; (800241c <MX_ADC1_Init+0xb0>)
 80023a8:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80023ac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80023ae:	4b1b      	ldr	r3, [pc, #108]	; (800241c <MX_ADC1_Init+0xb0>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80023b4:	4b19      	ldr	r3, [pc, #100]	; (800241c <MX_ADC1_Init+0xb0>)
 80023b6:	2201      	movs	r2, #1
 80023b8:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80023ba:	4818      	ldr	r0, [pc, #96]	; (800241c <MX_ADC1_Init+0xb0>)
 80023bc:	f000 fc76 	bl	8002cac <HAL_ADC_Init>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <MX_ADC1_Init+0x5e>
  {
    Error_Handler();
 80023c6:	f000 f9a3 	bl	8002710 <Error_Handler>
  }

  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_ALL_REG;
 80023ca:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80023ce:	613b      	str	r3, [r7, #16]
  AnalogWDGConfig.HighThreshold = 0;
 80023d0:	2300      	movs	r3, #0
 80023d2:	61fb      	str	r3, [r7, #28]
  AnalogWDGConfig.LowThreshold = 0;
 80023d4:	2300      	movs	r3, #0
 80023d6:	623b      	str	r3, [r7, #32]
  AnalogWDGConfig.ITMode = DISABLE;
 80023d8:	2300      	movs	r3, #0
 80023da:	763b      	strb	r3, [r7, #24]
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 80023dc:	f107 0310 	add.w	r3, r7, #16
 80023e0:	4619      	mov	r1, r3
 80023e2:	480e      	ldr	r0, [pc, #56]	; (800241c <MX_ADC1_Init+0xb0>)
 80023e4:	f000 ff2c 	bl	8003240 <HAL_ADC_AnalogWDGConfig>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80023ee:	f000 f98f 	bl	8002710 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80023f2:	2300      	movs	r3, #0
 80023f4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80023f6:	2301      	movs	r3, #1
 80023f8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80023fa:	2307      	movs	r3, #7
 80023fc:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023fe:	1d3b      	adds	r3, r7, #4
 8002400:	4619      	mov	r1, r3
 8002402:	4806      	ldr	r0, [pc, #24]	; (800241c <MX_ADC1_Init+0xb0>)
 8002404:	f000 fe24 	bl	8003050 <HAL_ADC_ConfigChannel>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800240e:	f000 f97f 	bl	8002710 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002412:	bf00      	nop
 8002414:	3728      	adds	r7, #40	; 0x28
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	2000020c 	.word	0x2000020c
 8002420:	40012400 	.word	0x40012400

08002424 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002428:	4b12      	ldr	r3, [pc, #72]	; (8002474 <MX_I2C1_Init+0x50>)
 800242a:	4a13      	ldr	r2, [pc, #76]	; (8002478 <MX_I2C1_Init+0x54>)
 800242c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800242e:	4b11      	ldr	r3, [pc, #68]	; (8002474 <MX_I2C1_Init+0x50>)
 8002430:	4a12      	ldr	r2, [pc, #72]	; (800247c <MX_I2C1_Init+0x58>)
 8002432:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002434:	4b0f      	ldr	r3, [pc, #60]	; (8002474 <MX_I2C1_Init+0x50>)
 8002436:	2200      	movs	r2, #0
 8002438:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800243a:	4b0e      	ldr	r3, [pc, #56]	; (8002474 <MX_I2C1_Init+0x50>)
 800243c:	2200      	movs	r2, #0
 800243e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002440:	4b0c      	ldr	r3, [pc, #48]	; (8002474 <MX_I2C1_Init+0x50>)
 8002442:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002446:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002448:	4b0a      	ldr	r3, [pc, #40]	; (8002474 <MX_I2C1_Init+0x50>)
 800244a:	2200      	movs	r2, #0
 800244c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800244e:	4b09      	ldr	r3, [pc, #36]	; (8002474 <MX_I2C1_Init+0x50>)
 8002450:	2200      	movs	r2, #0
 8002452:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002454:	4b07      	ldr	r3, [pc, #28]	; (8002474 <MX_I2C1_Init+0x50>)
 8002456:	2200      	movs	r2, #0
 8002458:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800245a:	4b06      	ldr	r3, [pc, #24]	; (8002474 <MX_I2C1_Init+0x50>)
 800245c:	2200      	movs	r2, #0
 800245e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002460:	4804      	ldr	r0, [pc, #16]	; (8002474 <MX_I2C1_Init+0x50>)
 8002462:	f001 fcf5 	bl	8003e50 <HAL_I2C_Init>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800246c:	f000 f950 	bl	8002710 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002470:	bf00      	nop
 8002472:	bd80      	pop	{r7, pc}
 8002474:	20000280 	.word	0x20000280
 8002478:	40005400 	.word	0x40005400
 800247c:	000186a0 	.word	0x000186a0

08002480 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002484:	4b12      	ldr	r3, [pc, #72]	; (80024d0 <MX_I2C2_Init+0x50>)
 8002486:	4a13      	ldr	r2, [pc, #76]	; (80024d4 <MX_I2C2_Init+0x54>)
 8002488:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800248a:	4b11      	ldr	r3, [pc, #68]	; (80024d0 <MX_I2C2_Init+0x50>)
 800248c:	4a12      	ldr	r2, [pc, #72]	; (80024d8 <MX_I2C2_Init+0x58>)
 800248e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002490:	4b0f      	ldr	r3, [pc, #60]	; (80024d0 <MX_I2C2_Init+0x50>)
 8002492:	2200      	movs	r2, #0
 8002494:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002496:	4b0e      	ldr	r3, [pc, #56]	; (80024d0 <MX_I2C2_Init+0x50>)
 8002498:	2200      	movs	r2, #0
 800249a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800249c:	4b0c      	ldr	r3, [pc, #48]	; (80024d0 <MX_I2C2_Init+0x50>)
 800249e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80024a2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024a4:	4b0a      	ldr	r3, [pc, #40]	; (80024d0 <MX_I2C2_Init+0x50>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80024aa:	4b09      	ldr	r3, [pc, #36]	; (80024d0 <MX_I2C2_Init+0x50>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024b0:	4b07      	ldr	r3, [pc, #28]	; (80024d0 <MX_I2C2_Init+0x50>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024b6:	4b06      	ldr	r3, [pc, #24]	; (80024d0 <MX_I2C2_Init+0x50>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80024bc:	4804      	ldr	r0, [pc, #16]	; (80024d0 <MX_I2C2_Init+0x50>)
 80024be:	f001 fcc7 	bl	8003e50 <HAL_I2C_Init>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80024c8:	f000 f922 	bl	8002710 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80024cc:	bf00      	nop
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	200002d4 	.word	0x200002d4
 80024d4:	40005800 	.word	0x40005800
 80024d8:	000186a0 	.word	0x000186a0

080024dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024e2:	f107 0308 	add.w	r3, r7, #8
 80024e6:	2200      	movs	r2, #0
 80024e8:	601a      	str	r2, [r3, #0]
 80024ea:	605a      	str	r2, [r3, #4]
 80024ec:	609a      	str	r2, [r3, #8]
 80024ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024f0:	463b      	mov	r3, r7
 80024f2:	2200      	movs	r2, #0
 80024f4:	601a      	str	r2, [r3, #0]
 80024f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80024f8:	4b1e      	ldr	r3, [pc, #120]	; (8002574 <MX_TIM1_Init+0x98>)
 80024fa:	4a1f      	ldr	r2, [pc, #124]	; (8002578 <MX_TIM1_Init+0x9c>)
 80024fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80024fe:	4b1d      	ldr	r3, [pc, #116]	; (8002574 <MX_TIM1_Init+0x98>)
 8002500:	2247      	movs	r2, #71	; 0x47
 8002502:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002504:	4b1b      	ldr	r3, [pc, #108]	; (8002574 <MX_TIM1_Init+0x98>)
 8002506:	2200      	movs	r2, #0
 8002508:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800250a:	4b1a      	ldr	r3, [pc, #104]	; (8002574 <MX_TIM1_Init+0x98>)
 800250c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002510:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002512:	4b18      	ldr	r3, [pc, #96]	; (8002574 <MX_TIM1_Init+0x98>)
 8002514:	2200      	movs	r2, #0
 8002516:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002518:	4b16      	ldr	r3, [pc, #88]	; (8002574 <MX_TIM1_Init+0x98>)
 800251a:	2200      	movs	r2, #0
 800251c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800251e:	4b15      	ldr	r3, [pc, #84]	; (8002574 <MX_TIM1_Init+0x98>)
 8002520:	2200      	movs	r2, #0
 8002522:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002524:	4813      	ldr	r0, [pc, #76]	; (8002574 <MX_TIM1_Init+0x98>)
 8002526:	f003 f979 	bl	800581c <HAL_TIM_Base_Init>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002530:	f000 f8ee 	bl	8002710 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002534:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002538:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800253a:	f107 0308 	add.w	r3, r7, #8
 800253e:	4619      	mov	r1, r3
 8002540:	480c      	ldr	r0, [pc, #48]	; (8002574 <MX_TIM1_Init+0x98>)
 8002542:	f003 fa05 	bl	8005950 <HAL_TIM_ConfigClockSource>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800254c:	f000 f8e0 	bl	8002710 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002550:	2300      	movs	r3, #0
 8002552:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002554:	2300      	movs	r3, #0
 8002556:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002558:	463b      	mov	r3, r7
 800255a:	4619      	mov	r1, r3
 800255c:	4805      	ldr	r0, [pc, #20]	; (8002574 <MX_TIM1_Init+0x98>)
 800255e:	f003 fbb7 	bl	8005cd0 <HAL_TIMEx_MasterConfigSynchronization>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002568:	f000 f8d2 	bl	8002710 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800256c:	bf00      	nop
 800256e:	3718      	adds	r7, #24
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	20000328 	.word	0x20000328
 8002578:	40012c00 	.word	0x40012c00

0800257c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002582:	4b0c      	ldr	r3, [pc, #48]	; (80025b4 <MX_DMA_Init+0x38>)
 8002584:	695b      	ldr	r3, [r3, #20]
 8002586:	4a0b      	ldr	r2, [pc, #44]	; (80025b4 <MX_DMA_Init+0x38>)
 8002588:	f043 0301 	orr.w	r3, r3, #1
 800258c:	6153      	str	r3, [r2, #20]
 800258e:	4b09      	ldr	r3, [pc, #36]	; (80025b4 <MX_DMA_Init+0x38>)
 8002590:	695b      	ldr	r3, [r3, #20]
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	607b      	str	r3, [r7, #4]
 8002598:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800259a:	2200      	movs	r2, #0
 800259c:	2100      	movs	r1, #0
 800259e:	200b      	movs	r0, #11
 80025a0:	f001 f87d 	bl	800369e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80025a4:	200b      	movs	r0, #11
 80025a6:	f001 f896 	bl	80036d6 <HAL_NVIC_EnableIRQ>

}
 80025aa:	bf00      	nop
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	40021000 	.word	0x40021000

080025b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b088      	sub	sp, #32
 80025bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025be:	f107 0310 	add.w	r3, r7, #16
 80025c2:	2200      	movs	r2, #0
 80025c4:	601a      	str	r2, [r3, #0]
 80025c6:	605a      	str	r2, [r3, #4]
 80025c8:	609a      	str	r2, [r3, #8]
 80025ca:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80025cc:	4b4d      	ldr	r3, [pc, #308]	; (8002704 <MX_GPIO_Init+0x14c>)
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	4a4c      	ldr	r2, [pc, #304]	; (8002704 <MX_GPIO_Init+0x14c>)
 80025d2:	f043 0320 	orr.w	r3, r3, #32
 80025d6:	6193      	str	r3, [r2, #24]
 80025d8:	4b4a      	ldr	r3, [pc, #296]	; (8002704 <MX_GPIO_Init+0x14c>)
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	f003 0320 	and.w	r3, r3, #32
 80025e0:	60fb      	str	r3, [r7, #12]
 80025e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025e4:	4b47      	ldr	r3, [pc, #284]	; (8002704 <MX_GPIO_Init+0x14c>)
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	4a46      	ldr	r2, [pc, #280]	; (8002704 <MX_GPIO_Init+0x14c>)
 80025ea:	f043 0304 	orr.w	r3, r3, #4
 80025ee:	6193      	str	r3, [r2, #24]
 80025f0:	4b44      	ldr	r3, [pc, #272]	; (8002704 <MX_GPIO_Init+0x14c>)
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	f003 0304 	and.w	r3, r3, #4
 80025f8:	60bb      	str	r3, [r7, #8]
 80025fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025fc:	4b41      	ldr	r3, [pc, #260]	; (8002704 <MX_GPIO_Init+0x14c>)
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	4a40      	ldr	r2, [pc, #256]	; (8002704 <MX_GPIO_Init+0x14c>)
 8002602:	f043 0308 	orr.w	r3, r3, #8
 8002606:	6193      	str	r3, [r2, #24]
 8002608:	4b3e      	ldr	r3, [pc, #248]	; (8002704 <MX_GPIO_Init+0x14c>)
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	f003 0308 	and.w	r3, r3, #8
 8002610:	607b      	str	r3, [r7, #4]
 8002612:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9
 8002614:	2200      	movs	r2, #0
 8002616:	f641 7142 	movw	r1, #8002	; 0x1f42
 800261a:	483b      	ldr	r0, [pc, #236]	; (8002708 <MX_GPIO_Init+0x150>)
 800261c:	f001 fbff 	bl	8003e1e <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8002620:	2200      	movs	r2, #0
 8002622:	2101      	movs	r1, #1
 8002624:	4839      	ldr	r0, [pc, #228]	; (800270c <MX_GPIO_Init+0x154>)
 8002626:	f001 fbfa 	bl	8003e1e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 800262a:	2342      	movs	r3, #66	; 0x42
 800262c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800262e:	2301      	movs	r3, #1
 8002630:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002632:	2300      	movs	r3, #0
 8002634:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002636:	2302      	movs	r3, #2
 8002638:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800263a:	f107 0310 	add.w	r3, r7, #16
 800263e:	4619      	mov	r1, r3
 8002640:	4831      	ldr	r0, [pc, #196]	; (8002708 <MX_GPIO_Init+0x150>)
 8002642:	f001 fa51 	bl	8003ae8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002646:	2308      	movs	r3, #8
 8002648:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800264a:	2300      	movs	r3, #0
 800264c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264e:	2300      	movs	r3, #0
 8002650:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002652:	f107 0310 	add.w	r3, r7, #16
 8002656:	4619      	mov	r1, r3
 8002658:	482b      	ldr	r0, [pc, #172]	; (8002708 <MX_GPIO_Init+0x150>)
 800265a:	f001 fa45 	bl	8003ae8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800265e:	2380      	movs	r3, #128	; 0x80
 8002660:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002662:	2300      	movs	r3, #0
 8002664:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002666:	2300      	movs	r3, #0
 8002668:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800266a:	f107 0310 	add.w	r3, r7, #16
 800266e:	4619      	mov	r1, r3
 8002670:	4825      	ldr	r0, [pc, #148]	; (8002708 <MX_GPIO_Init+0x150>)
 8002672:	f001 fa39 	bl	8003ae8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002676:	2301      	movs	r3, #1
 8002678:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800267a:	2301      	movs	r3, #1
 800267c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267e:	2300      	movs	r3, #0
 8002680:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002682:	2302      	movs	r3, #2
 8002684:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002686:	f107 0310 	add.w	r3, r7, #16
 800268a:	4619      	mov	r1, r3
 800268c:	481f      	ldr	r0, [pc, #124]	; (800270c <MX_GPIO_Init+0x154>)
 800268e:	f001 fa2b 	bl	8003ae8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002692:	2302      	movs	r3, #2
 8002694:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002696:	2300      	movs	r3, #0
 8002698:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269a:	2300      	movs	r3, #0
 800269c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800269e:	f107 0310 	add.w	r3, r7, #16
 80026a2:	4619      	mov	r1, r3
 80026a4:	4819      	ldr	r0, [pc, #100]	; (800270c <MX_GPIO_Init+0x154>)
 80026a6:	f001 fa1f 	bl	8003ae8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80026aa:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80026ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026b0:	2300      	movs	r3, #0
 80026b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80026b4:	2302      	movs	r3, #2
 80026b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026b8:	f107 0310 	add.w	r3, r7, #16
 80026bc:	4619      	mov	r1, r3
 80026be:	4813      	ldr	r0, [pc, #76]	; (800270c <MX_GPIO_Init+0x154>)
 80026c0:	f001 fa12 	bl	8003ae8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80026c4:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80026c8:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026ca:	2301      	movs	r3, #1
 80026cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80026ce:	2302      	movs	r3, #2
 80026d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d2:	2302      	movs	r3, #2
 80026d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026d6:	f107 0310 	add.w	r3, r7, #16
 80026da:	4619      	mov	r1, r3
 80026dc:	480a      	ldr	r0, [pc, #40]	; (8002708 <MX_GPIO_Init+0x150>)
 80026de:	f001 fa03 	bl	8003ae8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80026e2:	2320      	movs	r3, #32
 80026e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026e6:	2300      	movs	r3, #0
 80026e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026ea:	2301      	movs	r3, #1
 80026ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026ee:	f107 0310 	add.w	r3, r7, #16
 80026f2:	4619      	mov	r1, r3
 80026f4:	4805      	ldr	r0, [pc, #20]	; (800270c <MX_GPIO_Init+0x154>)
 80026f6:	f001 f9f7 	bl	8003ae8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80026fa:	bf00      	nop
 80026fc:	3720      	adds	r7, #32
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	40021000 	.word	0x40021000
 8002708:	40010800 	.word	0x40010800
 800270c:	40010c00 	.word	0x40010c00

08002710 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002714:	b672      	cpsid	i
}
 8002716:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002718:	e7fe      	b.n	8002718 <Error_Handler+0x8>
	...

0800271c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800271c:	b480      	push	{r7}
 800271e:	b085      	sub	sp, #20
 8002720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002722:	4b15      	ldr	r3, [pc, #84]	; (8002778 <HAL_MspInit+0x5c>)
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	4a14      	ldr	r2, [pc, #80]	; (8002778 <HAL_MspInit+0x5c>)
 8002728:	f043 0301 	orr.w	r3, r3, #1
 800272c:	6193      	str	r3, [r2, #24]
 800272e:	4b12      	ldr	r3, [pc, #72]	; (8002778 <HAL_MspInit+0x5c>)
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	60bb      	str	r3, [r7, #8]
 8002738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800273a:	4b0f      	ldr	r3, [pc, #60]	; (8002778 <HAL_MspInit+0x5c>)
 800273c:	69db      	ldr	r3, [r3, #28]
 800273e:	4a0e      	ldr	r2, [pc, #56]	; (8002778 <HAL_MspInit+0x5c>)
 8002740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002744:	61d3      	str	r3, [r2, #28]
 8002746:	4b0c      	ldr	r3, [pc, #48]	; (8002778 <HAL_MspInit+0x5c>)
 8002748:	69db      	ldr	r3, [r3, #28]
 800274a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800274e:	607b      	str	r3, [r7, #4]
 8002750:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002752:	4b0a      	ldr	r3, [pc, #40]	; (800277c <HAL_MspInit+0x60>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	60fb      	str	r3, [r7, #12]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800275e:	60fb      	str	r3, [r7, #12]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002766:	60fb      	str	r3, [r7, #12]
 8002768:	4a04      	ldr	r2, [pc, #16]	; (800277c <HAL_MspInit+0x60>)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800276e:	bf00      	nop
 8002770:	3714      	adds	r7, #20
 8002772:	46bd      	mov	sp, r7
 8002774:	bc80      	pop	{r7}
 8002776:	4770      	bx	lr
 8002778:	40021000 	.word	0x40021000
 800277c:	40010000 	.word	0x40010000

08002780 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b088      	sub	sp, #32
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002788:	f107 0310 	add.w	r3, r7, #16
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	605a      	str	r2, [r3, #4]
 8002792:	609a      	str	r2, [r3, #8]
 8002794:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a28      	ldr	r2, [pc, #160]	; (800283c <HAL_ADC_MspInit+0xbc>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d149      	bne.n	8002834 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80027a0:	4b27      	ldr	r3, [pc, #156]	; (8002840 <HAL_ADC_MspInit+0xc0>)
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	4a26      	ldr	r2, [pc, #152]	; (8002840 <HAL_ADC_MspInit+0xc0>)
 80027a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027aa:	6193      	str	r3, [r2, #24]
 80027ac:	4b24      	ldr	r3, [pc, #144]	; (8002840 <HAL_ADC_MspInit+0xc0>)
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027b4:	60fb      	str	r3, [r7, #12]
 80027b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027b8:	4b21      	ldr	r3, [pc, #132]	; (8002840 <HAL_ADC_MspInit+0xc0>)
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	4a20      	ldr	r2, [pc, #128]	; (8002840 <HAL_ADC_MspInit+0xc0>)
 80027be:	f043 0304 	orr.w	r3, r3, #4
 80027c2:	6193      	str	r3, [r2, #24]
 80027c4:	4b1e      	ldr	r3, [pc, #120]	; (8002840 <HAL_ADC_MspInit+0xc0>)
 80027c6:	699b      	ldr	r3, [r3, #24]
 80027c8:	f003 0304 	and.w	r3, r3, #4
 80027cc:	60bb      	str	r3, [r7, #8]
 80027ce:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80027d0:	2301      	movs	r3, #1
 80027d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027d4:	2303      	movs	r3, #3
 80027d6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027d8:	f107 0310 	add.w	r3, r7, #16
 80027dc:	4619      	mov	r1, r3
 80027de:	4819      	ldr	r0, [pc, #100]	; (8002844 <HAL_ADC_MspInit+0xc4>)
 80027e0:	f001 f982 	bl	8003ae8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80027e4:	4b18      	ldr	r3, [pc, #96]	; (8002848 <HAL_ADC_MspInit+0xc8>)
 80027e6:	4a19      	ldr	r2, [pc, #100]	; (800284c <HAL_ADC_MspInit+0xcc>)
 80027e8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027ea:	4b17      	ldr	r3, [pc, #92]	; (8002848 <HAL_ADC_MspInit+0xc8>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80027f0:	4b15      	ldr	r3, [pc, #84]	; (8002848 <HAL_ADC_MspInit+0xc8>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80027f6:	4b14      	ldr	r3, [pc, #80]	; (8002848 <HAL_ADC_MspInit+0xc8>)
 80027f8:	2280      	movs	r2, #128	; 0x80
 80027fa:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80027fc:	4b12      	ldr	r3, [pc, #72]	; (8002848 <HAL_ADC_MspInit+0xc8>)
 80027fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002802:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002804:	4b10      	ldr	r3, [pc, #64]	; (8002848 <HAL_ADC_MspInit+0xc8>)
 8002806:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800280a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800280c:	4b0e      	ldr	r3, [pc, #56]	; (8002848 <HAL_ADC_MspInit+0xc8>)
 800280e:	2220      	movs	r2, #32
 8002810:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002812:	4b0d      	ldr	r3, [pc, #52]	; (8002848 <HAL_ADC_MspInit+0xc8>)
 8002814:	2200      	movs	r2, #0
 8002816:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002818:	480b      	ldr	r0, [pc, #44]	; (8002848 <HAL_ADC_MspInit+0xc8>)
 800281a:	f000 ff77 	bl	800370c <HAL_DMA_Init>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8002824:	f7ff ff74 	bl	8002710 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a07      	ldr	r2, [pc, #28]	; (8002848 <HAL_ADC_MspInit+0xc8>)
 800282c:	621a      	str	r2, [r3, #32]
 800282e:	4a06      	ldr	r2, [pc, #24]	; (8002848 <HAL_ADC_MspInit+0xc8>)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002834:	bf00      	nop
 8002836:	3720      	adds	r7, #32
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	40012400 	.word	0x40012400
 8002840:	40021000 	.word	0x40021000
 8002844:	40010800 	.word	0x40010800
 8002848:	2000023c 	.word	0x2000023c
 800284c:	40020008 	.word	0x40020008

08002850 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b08a      	sub	sp, #40	; 0x28
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002858:	f107 0318 	add.w	r3, r7, #24
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	605a      	str	r2, [r3, #4]
 8002862:	609a      	str	r2, [r3, #8]
 8002864:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a2b      	ldr	r2, [pc, #172]	; (8002918 <HAL_I2C_MspInit+0xc8>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d124      	bne.n	80028ba <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002870:	4b2a      	ldr	r3, [pc, #168]	; (800291c <HAL_I2C_MspInit+0xcc>)
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	4a29      	ldr	r2, [pc, #164]	; (800291c <HAL_I2C_MspInit+0xcc>)
 8002876:	f043 0308 	orr.w	r3, r3, #8
 800287a:	6193      	str	r3, [r2, #24]
 800287c:	4b27      	ldr	r3, [pc, #156]	; (800291c <HAL_I2C_MspInit+0xcc>)
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	f003 0308 	and.w	r3, r3, #8
 8002884:	617b      	str	r3, [r7, #20]
 8002886:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002888:	23c0      	movs	r3, #192	; 0xc0
 800288a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800288c:	2312      	movs	r3, #18
 800288e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002890:	2303      	movs	r3, #3
 8002892:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002894:	f107 0318 	add.w	r3, r7, #24
 8002898:	4619      	mov	r1, r3
 800289a:	4821      	ldr	r0, [pc, #132]	; (8002920 <HAL_I2C_MspInit+0xd0>)
 800289c:	f001 f924 	bl	8003ae8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80028a0:	4b1e      	ldr	r3, [pc, #120]	; (800291c <HAL_I2C_MspInit+0xcc>)
 80028a2:	69db      	ldr	r3, [r3, #28]
 80028a4:	4a1d      	ldr	r2, [pc, #116]	; (800291c <HAL_I2C_MspInit+0xcc>)
 80028a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80028aa:	61d3      	str	r3, [r2, #28]
 80028ac:	4b1b      	ldr	r3, [pc, #108]	; (800291c <HAL_I2C_MspInit+0xcc>)
 80028ae:	69db      	ldr	r3, [r3, #28]
 80028b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028b4:	613b      	str	r3, [r7, #16]
 80028b6:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80028b8:	e029      	b.n	800290e <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a19      	ldr	r2, [pc, #100]	; (8002924 <HAL_I2C_MspInit+0xd4>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d124      	bne.n	800290e <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028c4:	4b15      	ldr	r3, [pc, #84]	; (800291c <HAL_I2C_MspInit+0xcc>)
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	4a14      	ldr	r2, [pc, #80]	; (800291c <HAL_I2C_MspInit+0xcc>)
 80028ca:	f043 0308 	orr.w	r3, r3, #8
 80028ce:	6193      	str	r3, [r2, #24]
 80028d0:	4b12      	ldr	r3, [pc, #72]	; (800291c <HAL_I2C_MspInit+0xcc>)
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	f003 0308 	and.w	r3, r3, #8
 80028d8:	60fb      	str	r3, [r7, #12]
 80028da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80028dc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80028e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028e2:	2312      	movs	r3, #18
 80028e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028e6:	2303      	movs	r3, #3
 80028e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028ea:	f107 0318 	add.w	r3, r7, #24
 80028ee:	4619      	mov	r1, r3
 80028f0:	480b      	ldr	r0, [pc, #44]	; (8002920 <HAL_I2C_MspInit+0xd0>)
 80028f2:	f001 f8f9 	bl	8003ae8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80028f6:	4b09      	ldr	r3, [pc, #36]	; (800291c <HAL_I2C_MspInit+0xcc>)
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	4a08      	ldr	r2, [pc, #32]	; (800291c <HAL_I2C_MspInit+0xcc>)
 80028fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002900:	61d3      	str	r3, [r2, #28]
 8002902:	4b06      	ldr	r3, [pc, #24]	; (800291c <HAL_I2C_MspInit+0xcc>)
 8002904:	69db      	ldr	r3, [r3, #28]
 8002906:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800290a:	60bb      	str	r3, [r7, #8]
 800290c:	68bb      	ldr	r3, [r7, #8]
}
 800290e:	bf00      	nop
 8002910:	3728      	adds	r7, #40	; 0x28
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	40005400 	.word	0x40005400
 800291c:	40021000 	.word	0x40021000
 8002920:	40010c00 	.word	0x40010c00
 8002924:	40005800 	.word	0x40005800

08002928 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a09      	ldr	r2, [pc, #36]	; (800295c <HAL_TIM_Base_MspInit+0x34>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d10b      	bne.n	8002952 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800293a:	4b09      	ldr	r3, [pc, #36]	; (8002960 <HAL_TIM_Base_MspInit+0x38>)
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	4a08      	ldr	r2, [pc, #32]	; (8002960 <HAL_TIM_Base_MspInit+0x38>)
 8002940:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002944:	6193      	str	r3, [r2, #24]
 8002946:	4b06      	ldr	r3, [pc, #24]	; (8002960 <HAL_TIM_Base_MspInit+0x38>)
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800294e:	60fb      	str	r3, [r7, #12]
 8002950:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002952:	bf00      	nop
 8002954:	3714      	adds	r7, #20
 8002956:	46bd      	mov	sp, r7
 8002958:	bc80      	pop	{r7}
 800295a:	4770      	bx	lr
 800295c:	40012c00 	.word	0x40012c00
 8002960:	40021000 	.word	0x40021000

08002964 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002968:	e7fe      	b.n	8002968 <NMI_Handler+0x4>

0800296a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800296a:	b480      	push	{r7}
 800296c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800296e:	e7fe      	b.n	800296e <HardFault_Handler+0x4>

08002970 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002974:	e7fe      	b.n	8002974 <MemManage_Handler+0x4>

08002976 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002976:	b480      	push	{r7}
 8002978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800297a:	e7fe      	b.n	800297a <BusFault_Handler+0x4>

0800297c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002980:	e7fe      	b.n	8002980 <UsageFault_Handler+0x4>

08002982 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002982:	b480      	push	{r7}
 8002984:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002986:	bf00      	nop
 8002988:	46bd      	mov	sp, r7
 800298a:	bc80      	pop	{r7}
 800298c:	4770      	bx	lr

0800298e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800298e:	b480      	push	{r7}
 8002990:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002992:	bf00      	nop
 8002994:	46bd      	mov	sp, r7
 8002996:	bc80      	pop	{r7}
 8002998:	4770      	bx	lr

0800299a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800299a:	b480      	push	{r7}
 800299c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800299e:	bf00      	nop
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bc80      	pop	{r7}
 80029a4:	4770      	bx	lr

080029a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029aa:	f000 f93f 	bl	8002c2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029ae:	bf00      	nop
 80029b0:	bd80      	pop	{r7, pc}
	...

080029b4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80029b8:	4802      	ldr	r0, [pc, #8]	; (80029c4 <DMA1_Channel1_IRQHandler+0x10>)
 80029ba:	f000 ff61 	bl	8003880 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80029be:	bf00      	nop
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	2000023c 	.word	0x2000023c

080029c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  return 1;
 80029cc:	2301      	movs	r3, #1
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bc80      	pop	{r7}
 80029d4:	4770      	bx	lr

080029d6 <_kill>:

int _kill(int pid, int sig)
{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b082      	sub	sp, #8
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
 80029de:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80029e0:	f004 f9a6 	bl	8006d30 <__errno>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2216      	movs	r2, #22
 80029e8:	601a      	str	r2, [r3, #0]
  return -1;
 80029ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <_exit>:

void _exit (int status)
{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b082      	sub	sp, #8
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80029fe:	f04f 31ff 	mov.w	r1, #4294967295
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f7ff ffe7 	bl	80029d6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a08:	e7fe      	b.n	8002a08 <_exit+0x12>

08002a0a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b086      	sub	sp, #24
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	60f8      	str	r0, [r7, #12]
 8002a12:	60b9      	str	r1, [r7, #8]
 8002a14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a16:	2300      	movs	r3, #0
 8002a18:	617b      	str	r3, [r7, #20]
 8002a1a:	e00a      	b.n	8002a32 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a1c:	f3af 8000 	nop.w
 8002a20:	4601      	mov	r1, r0
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	1c5a      	adds	r2, r3, #1
 8002a26:	60ba      	str	r2, [r7, #8]
 8002a28:	b2ca      	uxtb	r2, r1
 8002a2a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	3301      	adds	r3, #1
 8002a30:	617b      	str	r3, [r7, #20]
 8002a32:	697a      	ldr	r2, [r7, #20]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	dbf0      	blt.n	8002a1c <_read+0x12>
  }

  return len;
 8002a3a:	687b      	ldr	r3, [r7, #4]
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3718      	adds	r7, #24
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b086      	sub	sp, #24
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a50:	2300      	movs	r3, #0
 8002a52:	617b      	str	r3, [r7, #20]
 8002a54:	e009      	b.n	8002a6a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	1c5a      	adds	r2, r3, #1
 8002a5a:	60ba      	str	r2, [r7, #8]
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	3301      	adds	r3, #1
 8002a68:	617b      	str	r3, [r7, #20]
 8002a6a:	697a      	ldr	r2, [r7, #20]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	dbf1      	blt.n	8002a56 <_write+0x12>
  }
  return len;
 8002a72:	687b      	ldr	r3, [r7, #4]
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3718      	adds	r7, #24
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <_close>:

int _close(int file)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bc80      	pop	{r7}
 8002a90:	4770      	bx	lr

08002a92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b083      	sub	sp, #12
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
 8002a9a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002aa2:	605a      	str	r2, [r3, #4]
  return 0;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bc80      	pop	{r7}
 8002aae:	4770      	bx	lr

08002ab0 <_isatty>:

int _isatty(int file)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ab8:	2301      	movs	r3, #1
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bc80      	pop	{r7}
 8002ac2:	4770      	bx	lr

08002ac4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3714      	adds	r7, #20
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bc80      	pop	{r7}
 8002ada:	4770      	bx	lr

08002adc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b086      	sub	sp, #24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ae4:	4a14      	ldr	r2, [pc, #80]	; (8002b38 <_sbrk+0x5c>)
 8002ae6:	4b15      	ldr	r3, [pc, #84]	; (8002b3c <_sbrk+0x60>)
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002af0:	4b13      	ldr	r3, [pc, #76]	; (8002b40 <_sbrk+0x64>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d102      	bne.n	8002afe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002af8:	4b11      	ldr	r3, [pc, #68]	; (8002b40 <_sbrk+0x64>)
 8002afa:	4a12      	ldr	r2, [pc, #72]	; (8002b44 <_sbrk+0x68>)
 8002afc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002afe:	4b10      	ldr	r3, [pc, #64]	; (8002b40 <_sbrk+0x64>)
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4413      	add	r3, r2
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d207      	bcs.n	8002b1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b0c:	f004 f910 	bl	8006d30 <__errno>
 8002b10:	4603      	mov	r3, r0
 8002b12:	220c      	movs	r2, #12
 8002b14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b16:	f04f 33ff 	mov.w	r3, #4294967295
 8002b1a:	e009      	b.n	8002b30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b1c:	4b08      	ldr	r3, [pc, #32]	; (8002b40 <_sbrk+0x64>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b22:	4b07      	ldr	r3, [pc, #28]	; (8002b40 <_sbrk+0x64>)
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4413      	add	r3, r2
 8002b2a:	4a05      	ldr	r2, [pc, #20]	; (8002b40 <_sbrk+0x64>)
 8002b2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3718      	adds	r7, #24
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	20005000 	.word	0x20005000
 8002b3c:	00000400 	.word	0x00000400
 8002b40:	20000390 	.word	0x20000390
 8002b44:	200004e8 	.word	0x200004e8

08002b48 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b4c:	bf00      	nop
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bc80      	pop	{r7}
 8002b52:	4770      	bx	lr

08002b54 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002b54:	f7ff fff8 	bl	8002b48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b58:	480b      	ldr	r0, [pc, #44]	; (8002b88 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002b5a:	490c      	ldr	r1, [pc, #48]	; (8002b8c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002b5c:	4a0c      	ldr	r2, [pc, #48]	; (8002b90 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002b5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b60:	e002      	b.n	8002b68 <LoopCopyDataInit>

08002b62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b66:	3304      	adds	r3, #4

08002b68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b6c:	d3f9      	bcc.n	8002b62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b6e:	4a09      	ldr	r2, [pc, #36]	; (8002b94 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002b70:	4c09      	ldr	r4, [pc, #36]	; (8002b98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b74:	e001      	b.n	8002b7a <LoopFillZerobss>

08002b76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b78:	3204      	adds	r2, #4

08002b7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b7c:	d3fb      	bcc.n	8002b76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b7e:	f004 f8dd 	bl	8006d3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b82:	f7fe ffa1 	bl	8001ac8 <main>
  bx lr
 8002b86:	4770      	bx	lr
  ldr r0, =_sdata
 8002b88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b8c:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002b90:	0800aa90 	.word	0x0800aa90
  ldr r2, =_sbss
 8002b94:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8002b98:	200004e4 	.word	0x200004e4

08002b9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b9c:	e7fe      	b.n	8002b9c <ADC1_2_IRQHandler>
	...

08002ba0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ba4:	4b08      	ldr	r3, [pc, #32]	; (8002bc8 <HAL_Init+0x28>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a07      	ldr	r2, [pc, #28]	; (8002bc8 <HAL_Init+0x28>)
 8002baa:	f043 0310 	orr.w	r3, r3, #16
 8002bae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bb0:	2003      	movs	r0, #3
 8002bb2:	f000 fd69 	bl	8003688 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bb6:	200f      	movs	r0, #15
 8002bb8:	f000 f808 	bl	8002bcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bbc:	f7ff fdae 	bl	800271c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	40022000 	.word	0x40022000

08002bcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bd4:	4b12      	ldr	r3, [pc, #72]	; (8002c20 <HAL_InitTick+0x54>)
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	4b12      	ldr	r3, [pc, #72]	; (8002c24 <HAL_InitTick+0x58>)
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	4619      	mov	r1, r3
 8002bde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002be2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bea:	4618      	mov	r0, r3
 8002bec:	f000 fd81 	bl	80036f2 <HAL_SYSTICK_Config>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e00e      	b.n	8002c18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2b0f      	cmp	r3, #15
 8002bfe:	d80a      	bhi.n	8002c16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c00:	2200      	movs	r2, #0
 8002c02:	6879      	ldr	r1, [r7, #4]
 8002c04:	f04f 30ff 	mov.w	r0, #4294967295
 8002c08:	f000 fd49 	bl	800369e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c0c:	4a06      	ldr	r2, [pc, #24]	; (8002c28 <HAL_InitTick+0x5c>)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c12:	2300      	movs	r3, #0
 8002c14:	e000      	b.n	8002c18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3708      	adds	r7, #8
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	20000018 	.word	0x20000018
 8002c24:	20000020 	.word	0x20000020
 8002c28:	2000001c 	.word	0x2000001c

08002c2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c30:	4b05      	ldr	r3, [pc, #20]	; (8002c48 <HAL_IncTick+0x1c>)
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	461a      	mov	r2, r3
 8002c36:	4b05      	ldr	r3, [pc, #20]	; (8002c4c <HAL_IncTick+0x20>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	4a03      	ldr	r2, [pc, #12]	; (8002c4c <HAL_IncTick+0x20>)
 8002c3e:	6013      	str	r3, [r2, #0]
}
 8002c40:	bf00      	nop
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bc80      	pop	{r7}
 8002c46:	4770      	bx	lr
 8002c48:	20000020 	.word	0x20000020
 8002c4c:	20000394 	.word	0x20000394

08002c50 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
  return uwTick;
 8002c54:	4b02      	ldr	r3, [pc, #8]	; (8002c60 <HAL_GetTick+0x10>)
 8002c56:	681b      	ldr	r3, [r3, #0]
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bc80      	pop	{r7}
 8002c5e:	4770      	bx	lr
 8002c60:	20000394 	.word	0x20000394

08002c64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c6c:	f7ff fff0 	bl	8002c50 <HAL_GetTick>
 8002c70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c7c:	d005      	beq.n	8002c8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c7e:	4b0a      	ldr	r3, [pc, #40]	; (8002ca8 <HAL_Delay+0x44>)
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	461a      	mov	r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	4413      	add	r3, r2
 8002c88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c8a:	bf00      	nop
 8002c8c:	f7ff ffe0 	bl	8002c50 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d8f7      	bhi.n	8002c8c <HAL_Delay+0x28>
  {
  }
}
 8002c9c:	bf00      	nop
 8002c9e:	bf00      	nop
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	20000020 	.word	0x20000020

08002cac <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b086      	sub	sp, #24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e0be      	b.n	8002e4c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d109      	bne.n	8002cf0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f7ff fd48 	bl	8002780 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f000 fb55 	bl	80033a0 <ADC_ConversionStop_Disable>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfe:	f003 0310 	and.w	r3, r3, #16
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	f040 8099 	bne.w	8002e3a <HAL_ADC_Init+0x18e>
 8002d08:	7dfb      	ldrb	r3, [r7, #23]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f040 8095 	bne.w	8002e3a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d14:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d18:	f023 0302 	bic.w	r3, r3, #2
 8002d1c:	f043 0202 	orr.w	r2, r3, #2
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002d2c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	7b1b      	ldrb	r3, [r3, #12]
 8002d32:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002d34:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002d36:	68ba      	ldr	r2, [r7, #8]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d44:	d003      	beq.n	8002d4e <HAL_ADC_Init+0xa2>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d102      	bne.n	8002d54 <HAL_ADC_Init+0xa8>
 8002d4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d52:	e000      	b.n	8002d56 <HAL_ADC_Init+0xaa>
 8002d54:	2300      	movs	r3, #0
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	7d1b      	ldrb	r3, [r3, #20]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d119      	bne.n	8002d98 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	7b1b      	ldrb	r3, [r3, #12]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d109      	bne.n	8002d80 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	699b      	ldr	r3, [r3, #24]
 8002d70:	3b01      	subs	r3, #1
 8002d72:	035a      	lsls	r2, r3, #13
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d7c:	613b      	str	r3, [r7, #16]
 8002d7e:	e00b      	b.n	8002d98 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d84:	f043 0220 	orr.w	r2, r3, #32
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d90:	f043 0201 	orr.w	r2, r3, #1
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	430a      	orrs	r2, r1
 8002daa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	689a      	ldr	r2, [r3, #8]
 8002db2:	4b28      	ldr	r3, [pc, #160]	; (8002e54 <HAL_ADC_Init+0x1a8>)
 8002db4:	4013      	ands	r3, r2
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	6812      	ldr	r2, [r2, #0]
 8002dba:	68b9      	ldr	r1, [r7, #8]
 8002dbc:	430b      	orrs	r3, r1
 8002dbe:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dc8:	d003      	beq.n	8002dd2 <HAL_ADC_Init+0x126>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d104      	bne.n	8002ddc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	051b      	lsls	r3, r3, #20
 8002dda:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68fa      	ldr	r2, [r7, #12]
 8002dec:	430a      	orrs	r2, r1
 8002dee:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	689a      	ldr	r2, [r3, #8]
 8002df6:	4b18      	ldr	r3, [pc, #96]	; (8002e58 <HAL_ADC_Init+0x1ac>)
 8002df8:	4013      	ands	r3, r2
 8002dfa:	68ba      	ldr	r2, [r7, #8]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d10b      	bne.n	8002e18 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e0a:	f023 0303 	bic.w	r3, r3, #3
 8002e0e:	f043 0201 	orr.w	r2, r3, #1
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002e16:	e018      	b.n	8002e4a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1c:	f023 0312 	bic.w	r3, r3, #18
 8002e20:	f043 0210 	orr.w	r2, r3, #16
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2c:	f043 0201 	orr.w	r2, r3, #1
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002e38:	e007      	b.n	8002e4a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e3e:	f043 0210 	orr.w	r2, r3, #16
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002e4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3718      	adds	r7, #24
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	ffe1f7fd 	.word	0xffe1f7fd
 8002e58:	ff1f0efe 	.word	0xff1f0efe

08002e5c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b086      	sub	sp, #24
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a64      	ldr	r2, [pc, #400]	; (8003004 <HAL_ADC_Start_DMA+0x1a8>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d004      	beq.n	8002e80 <HAL_ADC_Start_DMA+0x24>
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a63      	ldr	r2, [pc, #396]	; (8003008 <HAL_ADC_Start_DMA+0x1ac>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d106      	bne.n	8002e8e <HAL_ADC_Start_DMA+0x32>
 8002e80:	4b60      	ldr	r3, [pc, #384]	; (8003004 <HAL_ADC_Start_DMA+0x1a8>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f040 80b3 	bne.w	8002ff4 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d101      	bne.n	8002e9c <HAL_ADC_Start_DMA+0x40>
 8002e98:	2302      	movs	r3, #2
 8002e9a:	e0ae      	b.n	8002ffa <HAL_ADC_Start_DMA+0x19e>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002ea4:	68f8      	ldr	r0, [r7, #12]
 8002ea6:	f000 fa21 	bl	80032ec <ADC_Enable>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002eae:	7dfb      	ldrb	r3, [r7, #23]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f040 809a 	bne.w	8002fea <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eba:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002ebe:	f023 0301 	bic.w	r3, r3, #1
 8002ec2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a4e      	ldr	r2, [pc, #312]	; (8003008 <HAL_ADC_Start_DMA+0x1ac>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d105      	bne.n	8002ee0 <HAL_ADC_Start_DMA+0x84>
 8002ed4:	4b4b      	ldr	r3, [pc, #300]	; (8003004 <HAL_ADC_Start_DMA+0x1a8>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d115      	bne.n	8002f0c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d026      	beq.n	8002f48 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002efe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f02:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002f0a:	e01d      	b.n	8002f48 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f10:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a39      	ldr	r2, [pc, #228]	; (8003004 <HAL_ADC_Start_DMA+0x1a8>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d004      	beq.n	8002f2c <HAL_ADC_Start_DMA+0xd0>
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a38      	ldr	r2, [pc, #224]	; (8003008 <HAL_ADC_Start_DMA+0x1ac>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d10d      	bne.n	8002f48 <HAL_ADC_Start_DMA+0xec>
 8002f2c:	4b35      	ldr	r3, [pc, #212]	; (8003004 <HAL_ADC_Start_DMA+0x1a8>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d007      	beq.n	8002f48 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f3c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f40:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d006      	beq.n	8002f62 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f58:	f023 0206 	bic.w	r2, r3, #6
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002f60:	e002      	b.n	8002f68 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2200      	movs	r2, #0
 8002f66:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6a1b      	ldr	r3, [r3, #32]
 8002f74:	4a25      	ldr	r2, [pc, #148]	; (800300c <HAL_ADC_Start_DMA+0x1b0>)
 8002f76:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6a1b      	ldr	r3, [r3, #32]
 8002f7c:	4a24      	ldr	r2, [pc, #144]	; (8003010 <HAL_ADC_Start_DMA+0x1b4>)
 8002f7e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6a1b      	ldr	r3, [r3, #32]
 8002f84:	4a23      	ldr	r2, [pc, #140]	; (8003014 <HAL_ADC_Start_DMA+0x1b8>)
 8002f86:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f06f 0202 	mvn.w	r2, #2
 8002f90:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	689a      	ldr	r2, [r3, #8]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fa0:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6a18      	ldr	r0, [r3, #32]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	334c      	adds	r3, #76	; 0x4c
 8002fac:	4619      	mov	r1, r3
 8002fae:	68ba      	ldr	r2, [r7, #8]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f000 fc05 	bl	80037c0 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002fc0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002fc4:	d108      	bne.n	8002fd8 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	689a      	ldr	r2, [r3, #8]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002fd4:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002fd6:	e00f      	b.n	8002ff8 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	689a      	ldr	r2, [r3, #8]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002fe6:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002fe8:	e006      	b.n	8002ff8 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8002ff2:	e001      	b.n	8002ff8 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002ff8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3718      	adds	r7, #24
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	40012400 	.word	0x40012400
 8003008:	40012800 	.word	0x40012800
 800300c:	08003423 	.word	0x08003423
 8003010:	0800349f 	.word	0x0800349f
 8003014:	080034bb 	.word	0x080034bb

08003018 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003020:	bf00      	nop
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	bc80      	pop	{r7}
 8003028:	4770      	bx	lr

0800302a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800302a:	b480      	push	{r7}
 800302c:	b083      	sub	sp, #12
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003032:	bf00      	nop
 8003034:	370c      	adds	r7, #12
 8003036:	46bd      	mov	sp, r7
 8003038:	bc80      	pop	{r7}
 800303a:	4770      	bx	lr

0800303c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	bc80      	pop	{r7}
 800304c:	4770      	bx	lr
	...

08003050 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003050:	b480      	push	{r7}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800305a:	2300      	movs	r3, #0
 800305c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800305e:	2300      	movs	r3, #0
 8003060:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003068:	2b01      	cmp	r3, #1
 800306a:	d101      	bne.n	8003070 <HAL_ADC_ConfigChannel+0x20>
 800306c:	2302      	movs	r3, #2
 800306e:	e0dc      	b.n	800322a <HAL_ADC_ConfigChannel+0x1da>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	2b06      	cmp	r3, #6
 800307e:	d81c      	bhi.n	80030ba <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	685a      	ldr	r2, [r3, #4]
 800308a:	4613      	mov	r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	4413      	add	r3, r2
 8003090:	3b05      	subs	r3, #5
 8003092:	221f      	movs	r2, #31
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	43db      	mvns	r3, r3
 800309a:	4019      	ands	r1, r3
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	6818      	ldr	r0, [r3, #0]
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685a      	ldr	r2, [r3, #4]
 80030a4:	4613      	mov	r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	4413      	add	r3, r2
 80030aa:	3b05      	subs	r3, #5
 80030ac:	fa00 f203 	lsl.w	r2, r0, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	430a      	orrs	r2, r1
 80030b6:	635a      	str	r2, [r3, #52]	; 0x34
 80030b8:	e03c      	b.n	8003134 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	2b0c      	cmp	r3, #12
 80030c0:	d81c      	bhi.n	80030fc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685a      	ldr	r2, [r3, #4]
 80030cc:	4613      	mov	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	4413      	add	r3, r2
 80030d2:	3b23      	subs	r3, #35	; 0x23
 80030d4:	221f      	movs	r2, #31
 80030d6:	fa02 f303 	lsl.w	r3, r2, r3
 80030da:	43db      	mvns	r3, r3
 80030dc:	4019      	ands	r1, r3
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	6818      	ldr	r0, [r3, #0]
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	685a      	ldr	r2, [r3, #4]
 80030e6:	4613      	mov	r3, r2
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	4413      	add	r3, r2
 80030ec:	3b23      	subs	r3, #35	; 0x23
 80030ee:	fa00 f203 	lsl.w	r2, r0, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	430a      	orrs	r2, r1
 80030f8:	631a      	str	r2, [r3, #48]	; 0x30
 80030fa:	e01b      	b.n	8003134 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	685a      	ldr	r2, [r3, #4]
 8003106:	4613      	mov	r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	4413      	add	r3, r2
 800310c:	3b41      	subs	r3, #65	; 0x41
 800310e:	221f      	movs	r2, #31
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	43db      	mvns	r3, r3
 8003116:	4019      	ands	r1, r3
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	6818      	ldr	r0, [r3, #0]
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685a      	ldr	r2, [r3, #4]
 8003120:	4613      	mov	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	4413      	add	r3, r2
 8003126:	3b41      	subs	r3, #65	; 0x41
 8003128:	fa00 f203 	lsl.w	r2, r0, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	430a      	orrs	r2, r1
 8003132:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2b09      	cmp	r3, #9
 800313a:	d91c      	bls.n	8003176 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	68d9      	ldr	r1, [r3, #12]
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	4613      	mov	r3, r2
 8003148:	005b      	lsls	r3, r3, #1
 800314a:	4413      	add	r3, r2
 800314c:	3b1e      	subs	r3, #30
 800314e:	2207      	movs	r2, #7
 8003150:	fa02 f303 	lsl.w	r3, r2, r3
 8003154:	43db      	mvns	r3, r3
 8003156:	4019      	ands	r1, r3
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	6898      	ldr	r0, [r3, #8]
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	4613      	mov	r3, r2
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	4413      	add	r3, r2
 8003166:	3b1e      	subs	r3, #30
 8003168:	fa00 f203 	lsl.w	r2, r0, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	430a      	orrs	r2, r1
 8003172:	60da      	str	r2, [r3, #12]
 8003174:	e019      	b.n	80031aa <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	6919      	ldr	r1, [r3, #16]
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	4613      	mov	r3, r2
 8003182:	005b      	lsls	r3, r3, #1
 8003184:	4413      	add	r3, r2
 8003186:	2207      	movs	r2, #7
 8003188:	fa02 f303 	lsl.w	r3, r2, r3
 800318c:	43db      	mvns	r3, r3
 800318e:	4019      	ands	r1, r3
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	6898      	ldr	r0, [r3, #8]
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	4613      	mov	r3, r2
 800319a:	005b      	lsls	r3, r3, #1
 800319c:	4413      	add	r3, r2
 800319e:	fa00 f203 	lsl.w	r2, r0, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	430a      	orrs	r2, r1
 80031a8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2b10      	cmp	r3, #16
 80031b0:	d003      	beq.n	80031ba <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80031b6:	2b11      	cmp	r3, #17
 80031b8:	d132      	bne.n	8003220 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a1d      	ldr	r2, [pc, #116]	; (8003234 <HAL_ADC_ConfigChannel+0x1e4>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d125      	bne.n	8003210 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d126      	bne.n	8003220 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	689a      	ldr	r2, [r3, #8]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80031e0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2b10      	cmp	r3, #16
 80031e8:	d11a      	bne.n	8003220 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80031ea:	4b13      	ldr	r3, [pc, #76]	; (8003238 <HAL_ADC_ConfigChannel+0x1e8>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a13      	ldr	r2, [pc, #76]	; (800323c <HAL_ADC_ConfigChannel+0x1ec>)
 80031f0:	fba2 2303 	umull	r2, r3, r2, r3
 80031f4:	0c9a      	lsrs	r2, r3, #18
 80031f6:	4613      	mov	r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	4413      	add	r3, r2
 80031fc:	005b      	lsls	r3, r3, #1
 80031fe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003200:	e002      	b.n	8003208 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	3b01      	subs	r3, #1
 8003206:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1f9      	bne.n	8003202 <HAL_ADC_ConfigChannel+0x1b2>
 800320e:	e007      	b.n	8003220 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003214:	f043 0220 	orr.w	r2, r3, #32
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003228:	7bfb      	ldrb	r3, [r7, #15]
}
 800322a:	4618      	mov	r0, r3
 800322c:	3714      	adds	r7, #20
 800322e:	46bd      	mov	sp, r7
 8003230:	bc80      	pop	{r7}
 8003232:	4770      	bx	lr
 8003234:	40012400 	.word	0x40012400
 8003238:	20000018 	.word	0x20000018
 800323c:	431bde83 	.word	0x431bde83

08003240 <HAL_ADC_AnalogWDGConfig>:
  * @param  hadc: ADC handle
  * @param  AnalogWDGConfig: Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));
  assert_param(IS_ADC_RANGE(AnalogWDGConfig->HighThreshold));
  assert_param(IS_ADC_RANGE(AnalogWDGConfig->LowThreshold));
  
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a24      	ldr	r2, [pc, #144]	; (80032e0 <HAL_ADC_AnalogWDGConfig+0xa0>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d003      	beq.n	800325c <HAL_ADC_AnalogWDGConfig+0x1c>
     (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8003258:	4a22      	ldr	r2, [pc, #136]	; (80032e4 <HAL_ADC_AnalogWDGConfig+0xa4>)
 800325a:	4293      	cmp	r3, r2
  {
    assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003262:	2b01      	cmp	r3, #1
 8003264:	d101      	bne.n	800326a <HAL_ADC_AnalogWDGConfig+0x2a>
 8003266:	2302      	movs	r3, #2
 8003268:	e035      	b.n	80032d6 <HAL_ADC_AnalogWDGConfig+0x96>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2201      	movs	r2, #1
 800326e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Analog watchdog configuration */

  /* Configure ADC Analog watchdog interrupt */
  if(AnalogWDGConfig->ITMode == ENABLE)
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	7a1b      	ldrb	r3, [r3, #8]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d108      	bne.n	800328c <HAL_ADC_AnalogWDGConfig+0x4c>
  {
    /* Enable the ADC Analog watchdog interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	685a      	ldr	r2, [r3, #4]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003288:	605a      	str	r2, [r3, #4]
 800328a:	e007      	b.n	800329c <HAL_ADC_AnalogWDGConfig+0x5c>
  }
  else
  {
    /* Disable the ADC Analog watchdog interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	685a      	ldr	r2, [r3, #4]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800329a:	605a      	str	r2, [r3, #4]
  /* Configuration of analog watchdog:                                        */
  /*  - Set the analog watchdog enable mode: regular and/or injected groups,  */
  /*    one or all channels.                                                  */
  /*  - Set the Analog watchdog channel (is not used if watchdog              */
  /*    mode "all channels": ADC_CFGR_AWD1SGL=0).                             */
  MODIFY_REG(hadc->Instance->CR1            ,
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	685a      	ldr	r2, [r3, #4]
 80032a2:	4b11      	ldr	r3, [pc, #68]	; (80032e8 <HAL_ADC_AnalogWDGConfig+0xa8>)
 80032a4:	4013      	ands	r3, r2
 80032a6:	683a      	ldr	r2, [r7, #0]
 80032a8:	6811      	ldr	r1, [r2, #0]
 80032aa:	683a      	ldr	r2, [r7, #0]
 80032ac:	6852      	ldr	r2, [r2, #4]
 80032ae:	4311      	orrs	r1, r2
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	6812      	ldr	r2, [r2, #0]
 80032b4:	430b      	orrs	r3, r1
 80032b6:	6053      	str	r3, [r2, #4]
             ADC_CR1_AWDCH                  ,
             AnalogWDGConfig->WatchdogMode |
             AnalogWDGConfig->Channel        );
  
  /* Set the high threshold */
  WRITE_REG(hadc->Instance->HTR, AnalogWDGConfig->HighThreshold);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	683a      	ldr	r2, [r7, #0]
 80032be:	68d2      	ldr	r2, [r2, #12]
 80032c0:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set the low threshold */
  WRITE_REG(hadc->Instance->LTR, AnalogWDGConfig->LowThreshold);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	683a      	ldr	r2, [r7, #0]
 80032c8:	6912      	ldr	r2, [r2, #16]
 80032ca:	629a      	str	r2, [r3, #40]	; 0x28

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	bc80      	pop	{r7}
 80032de:	4770      	bx	lr
 80032e0:	00800200 	.word	0x00800200
 80032e4:	00400200 	.word	0x00400200
 80032e8:	ff3ffde0 	.word	0xff3ffde0

080032ec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032f4:	2300      	movs	r3, #0
 80032f6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80032f8:	2300      	movs	r3, #0
 80032fa:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	2b01      	cmp	r3, #1
 8003308:	d040      	beq.n	800338c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	689a      	ldr	r2, [r3, #8]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f042 0201 	orr.w	r2, r2, #1
 8003318:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800331a:	4b1f      	ldr	r3, [pc, #124]	; (8003398 <ADC_Enable+0xac>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a1f      	ldr	r2, [pc, #124]	; (800339c <ADC_Enable+0xb0>)
 8003320:	fba2 2303 	umull	r2, r3, r2, r3
 8003324:	0c9b      	lsrs	r3, r3, #18
 8003326:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003328:	e002      	b.n	8003330 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	3b01      	subs	r3, #1
 800332e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1f9      	bne.n	800332a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003336:	f7ff fc8b 	bl	8002c50 <HAL_GetTick>
 800333a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800333c:	e01f      	b.n	800337e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800333e:	f7ff fc87 	bl	8002c50 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d918      	bls.n	800337e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	2b01      	cmp	r3, #1
 8003358:	d011      	beq.n	800337e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800335e:	f043 0210 	orr.w	r2, r3, #16
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336a:	f043 0201 	orr.w	r2, r3, #1
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e007      	b.n	800338e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f003 0301 	and.w	r3, r3, #1
 8003388:	2b01      	cmp	r3, #1
 800338a:	d1d8      	bne.n	800333e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3710      	adds	r7, #16
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	20000018 	.word	0x20000018
 800339c:	431bde83 	.word	0x431bde83

080033a0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033a8:	2300      	movs	r3, #0
 80033aa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d12e      	bne.n	8003418 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	689a      	ldr	r2, [r3, #8]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f022 0201 	bic.w	r2, r2, #1
 80033c8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80033ca:	f7ff fc41 	bl	8002c50 <HAL_GetTick>
 80033ce:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80033d0:	e01b      	b.n	800340a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80033d2:	f7ff fc3d 	bl	8002c50 <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d914      	bls.n	800340a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d10d      	bne.n	800340a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f2:	f043 0210 	orr.w	r2, r3, #16
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fe:	f043 0201 	orr.w	r2, r3, #1
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e007      	b.n	800341a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f003 0301 	and.w	r3, r3, #1
 8003414:	2b01      	cmp	r3, #1
 8003416:	d0dc      	beq.n	80033d2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}

08003422 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003422:	b580      	push	{r7, lr}
 8003424:	b084      	sub	sp, #16
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003434:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003438:	2b00      	cmp	r3, #0
 800343a:	d127      	bne.n	800348c <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003440:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003452:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003456:	d115      	bne.n	8003484 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800345c:	2b00      	cmp	r3, #0
 800345e:	d111      	bne.n	8003484 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003464:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003470:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d105      	bne.n	8003484 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347c:	f043 0201 	orr.w	r2, r3, #1
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003484:	68f8      	ldr	r0, [r7, #12]
 8003486:	f7ff fdc7 	bl	8003018 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800348a:	e004      	b.n	8003496 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6a1b      	ldr	r3, [r3, #32]
 8003490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	4798      	blx	r3
}
 8003496:	bf00      	nop
 8003498:	3710      	adds	r7, #16
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b084      	sub	sp, #16
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034aa:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80034ac:	68f8      	ldr	r0, [r7, #12]
 80034ae:	f7ff fdbc 	bl	800302a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80034b2:	bf00      	nop
 80034b4:	3710      	adds	r7, #16
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}

080034ba <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b084      	sub	sp, #16
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034cc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d8:	f043 0204 	orr.w	r2, r3, #4
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	f7ff fdab 	bl	800303c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80034e6:	bf00      	nop
 80034e8:	3710      	adds	r7, #16
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
	...

080034f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f003 0307 	and.w	r3, r3, #7
 80034fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003500:	4b0c      	ldr	r3, [pc, #48]	; (8003534 <__NVIC_SetPriorityGrouping+0x44>)
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003506:	68ba      	ldr	r2, [r7, #8]
 8003508:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800350c:	4013      	ands	r3, r2
 800350e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003518:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800351c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003520:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003522:	4a04      	ldr	r2, [pc, #16]	; (8003534 <__NVIC_SetPriorityGrouping+0x44>)
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	60d3      	str	r3, [r2, #12]
}
 8003528:	bf00      	nop
 800352a:	3714      	adds	r7, #20
 800352c:	46bd      	mov	sp, r7
 800352e:	bc80      	pop	{r7}
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	e000ed00 	.word	0xe000ed00

08003538 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003538:	b480      	push	{r7}
 800353a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800353c:	4b04      	ldr	r3, [pc, #16]	; (8003550 <__NVIC_GetPriorityGrouping+0x18>)
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	0a1b      	lsrs	r3, r3, #8
 8003542:	f003 0307 	and.w	r3, r3, #7
}
 8003546:	4618      	mov	r0, r3
 8003548:	46bd      	mov	sp, r7
 800354a:	bc80      	pop	{r7}
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	e000ed00 	.word	0xe000ed00

08003554 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	4603      	mov	r3, r0
 800355c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800355e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003562:	2b00      	cmp	r3, #0
 8003564:	db0b      	blt.n	800357e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003566:	79fb      	ldrb	r3, [r7, #7]
 8003568:	f003 021f 	and.w	r2, r3, #31
 800356c:	4906      	ldr	r1, [pc, #24]	; (8003588 <__NVIC_EnableIRQ+0x34>)
 800356e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003572:	095b      	lsrs	r3, r3, #5
 8003574:	2001      	movs	r0, #1
 8003576:	fa00 f202 	lsl.w	r2, r0, r2
 800357a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800357e:	bf00      	nop
 8003580:	370c      	adds	r7, #12
 8003582:	46bd      	mov	sp, r7
 8003584:	bc80      	pop	{r7}
 8003586:	4770      	bx	lr
 8003588:	e000e100 	.word	0xe000e100

0800358c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	4603      	mov	r3, r0
 8003594:	6039      	str	r1, [r7, #0]
 8003596:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800359c:	2b00      	cmp	r3, #0
 800359e:	db0a      	blt.n	80035b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	b2da      	uxtb	r2, r3
 80035a4:	490c      	ldr	r1, [pc, #48]	; (80035d8 <__NVIC_SetPriority+0x4c>)
 80035a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035aa:	0112      	lsls	r2, r2, #4
 80035ac:	b2d2      	uxtb	r2, r2
 80035ae:	440b      	add	r3, r1
 80035b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035b4:	e00a      	b.n	80035cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	b2da      	uxtb	r2, r3
 80035ba:	4908      	ldr	r1, [pc, #32]	; (80035dc <__NVIC_SetPriority+0x50>)
 80035bc:	79fb      	ldrb	r3, [r7, #7]
 80035be:	f003 030f 	and.w	r3, r3, #15
 80035c2:	3b04      	subs	r3, #4
 80035c4:	0112      	lsls	r2, r2, #4
 80035c6:	b2d2      	uxtb	r2, r2
 80035c8:	440b      	add	r3, r1
 80035ca:	761a      	strb	r2, [r3, #24]
}
 80035cc:	bf00      	nop
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bc80      	pop	{r7}
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	e000e100 	.word	0xe000e100
 80035dc:	e000ed00 	.word	0xe000ed00

080035e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b089      	sub	sp, #36	; 0x24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f003 0307 	and.w	r3, r3, #7
 80035f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	f1c3 0307 	rsb	r3, r3, #7
 80035fa:	2b04      	cmp	r3, #4
 80035fc:	bf28      	it	cs
 80035fe:	2304      	movcs	r3, #4
 8003600:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	3304      	adds	r3, #4
 8003606:	2b06      	cmp	r3, #6
 8003608:	d902      	bls.n	8003610 <NVIC_EncodePriority+0x30>
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	3b03      	subs	r3, #3
 800360e:	e000      	b.n	8003612 <NVIC_EncodePriority+0x32>
 8003610:	2300      	movs	r3, #0
 8003612:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003614:	f04f 32ff 	mov.w	r2, #4294967295
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	fa02 f303 	lsl.w	r3, r2, r3
 800361e:	43da      	mvns	r2, r3
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	401a      	ands	r2, r3
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003628:	f04f 31ff 	mov.w	r1, #4294967295
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	fa01 f303 	lsl.w	r3, r1, r3
 8003632:	43d9      	mvns	r1, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003638:	4313      	orrs	r3, r2
         );
}
 800363a:	4618      	mov	r0, r3
 800363c:	3724      	adds	r7, #36	; 0x24
 800363e:	46bd      	mov	sp, r7
 8003640:	bc80      	pop	{r7}
 8003642:	4770      	bx	lr

08003644 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	3b01      	subs	r3, #1
 8003650:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003654:	d301      	bcc.n	800365a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003656:	2301      	movs	r3, #1
 8003658:	e00f      	b.n	800367a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800365a:	4a0a      	ldr	r2, [pc, #40]	; (8003684 <SysTick_Config+0x40>)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	3b01      	subs	r3, #1
 8003660:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003662:	210f      	movs	r1, #15
 8003664:	f04f 30ff 	mov.w	r0, #4294967295
 8003668:	f7ff ff90 	bl	800358c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800366c:	4b05      	ldr	r3, [pc, #20]	; (8003684 <SysTick_Config+0x40>)
 800366e:	2200      	movs	r2, #0
 8003670:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003672:	4b04      	ldr	r3, [pc, #16]	; (8003684 <SysTick_Config+0x40>)
 8003674:	2207      	movs	r2, #7
 8003676:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3708      	adds	r7, #8
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	e000e010 	.word	0xe000e010

08003688 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f7ff ff2d 	bl	80034f0 <__NVIC_SetPriorityGrouping>
}
 8003696:	bf00      	nop
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800369e:	b580      	push	{r7, lr}
 80036a0:	b086      	sub	sp, #24
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	4603      	mov	r3, r0
 80036a6:	60b9      	str	r1, [r7, #8]
 80036a8:	607a      	str	r2, [r7, #4]
 80036aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036ac:	2300      	movs	r3, #0
 80036ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036b0:	f7ff ff42 	bl	8003538 <__NVIC_GetPriorityGrouping>
 80036b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	68b9      	ldr	r1, [r7, #8]
 80036ba:	6978      	ldr	r0, [r7, #20]
 80036bc:	f7ff ff90 	bl	80035e0 <NVIC_EncodePriority>
 80036c0:	4602      	mov	r2, r0
 80036c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036c6:	4611      	mov	r1, r2
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7ff ff5f 	bl	800358c <__NVIC_SetPriority>
}
 80036ce:	bf00      	nop
 80036d0:	3718      	adds	r7, #24
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b082      	sub	sp, #8
 80036da:	af00      	add	r7, sp, #0
 80036dc:	4603      	mov	r3, r0
 80036de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7ff ff35 	bl	8003554 <__NVIC_EnableIRQ>
}
 80036ea:	bf00      	nop
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b082      	sub	sp, #8
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f7ff ffa2 	bl	8003644 <SysTick_Config>
 8003700:	4603      	mov	r3, r0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3708      	adds	r7, #8
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
	...

0800370c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800370c:	b480      	push	{r7}
 800370e:	b085      	sub	sp, #20
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003714:	2300      	movs	r3, #0
 8003716:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d101      	bne.n	8003722 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e043      	b.n	80037aa <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	461a      	mov	r2, r3
 8003728:	4b22      	ldr	r3, [pc, #136]	; (80037b4 <HAL_DMA_Init+0xa8>)
 800372a:	4413      	add	r3, r2
 800372c:	4a22      	ldr	r2, [pc, #136]	; (80037b8 <HAL_DMA_Init+0xac>)
 800372e:	fba2 2303 	umull	r2, r3, r2, r3
 8003732:	091b      	lsrs	r3, r3, #4
 8003734:	009a      	lsls	r2, r3, #2
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a1f      	ldr	r2, [pc, #124]	; (80037bc <HAL_DMA_Init+0xb0>)
 800373e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2202      	movs	r2, #2
 8003744:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003756:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800375a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003764:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003770:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800377c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	69db      	ldr	r3, [r3, #28]
 8003782:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	4313      	orrs	r3, r2
 8003788:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3714      	adds	r7, #20
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bc80      	pop	{r7}
 80037b2:	4770      	bx	lr
 80037b4:	bffdfff8 	.word	0xbffdfff8
 80037b8:	cccccccd 	.word	0xcccccccd
 80037bc:	40020000 	.word	0x40020000

080037c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b086      	sub	sp, #24
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	607a      	str	r2, [r7, #4]
 80037cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037ce:	2300      	movs	r3, #0
 80037d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d101      	bne.n	80037e0 <HAL_DMA_Start_IT+0x20>
 80037dc:	2302      	movs	r3, #2
 80037de:	e04b      	b.n	8003878 <HAL_DMA_Start_IT+0xb8>
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d13a      	bne.n	800386a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2202      	movs	r2, #2
 80037f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f022 0201 	bic.w	r2, r2, #1
 8003810:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	68b9      	ldr	r1, [r7, #8]
 8003818:	68f8      	ldr	r0, [r7, #12]
 800381a:	f000 f937 	bl	8003a8c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003822:	2b00      	cmp	r3, #0
 8003824:	d008      	beq.n	8003838 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f042 020e 	orr.w	r2, r2, #14
 8003834:	601a      	str	r2, [r3, #0]
 8003836:	e00f      	b.n	8003858 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f022 0204 	bic.w	r2, r2, #4
 8003846:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f042 020a 	orr.w	r2, r2, #10
 8003856:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f042 0201 	orr.w	r2, r2, #1
 8003866:	601a      	str	r2, [r3, #0]
 8003868:	e005      	b.n	8003876 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003872:	2302      	movs	r3, #2
 8003874:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003876:	7dfb      	ldrb	r3, [r7, #23]
}
 8003878:	4618      	mov	r0, r3
 800387a:	3718      	adds	r7, #24
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389c:	2204      	movs	r2, #4
 800389e:	409a      	lsls	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	4013      	ands	r3, r2
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d04f      	beq.n	8003948 <HAL_DMA_IRQHandler+0xc8>
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	f003 0304 	and.w	r3, r3, #4
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d04a      	beq.n	8003948 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0320 	and.w	r3, r3, #32
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d107      	bne.n	80038d0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f022 0204 	bic.w	r2, r2, #4
 80038ce:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a66      	ldr	r2, [pc, #408]	; (8003a70 <HAL_DMA_IRQHandler+0x1f0>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d029      	beq.n	800392e <HAL_DMA_IRQHandler+0xae>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a65      	ldr	r2, [pc, #404]	; (8003a74 <HAL_DMA_IRQHandler+0x1f4>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d022      	beq.n	800392a <HAL_DMA_IRQHandler+0xaa>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a63      	ldr	r2, [pc, #396]	; (8003a78 <HAL_DMA_IRQHandler+0x1f8>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d01a      	beq.n	8003924 <HAL_DMA_IRQHandler+0xa4>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a62      	ldr	r2, [pc, #392]	; (8003a7c <HAL_DMA_IRQHandler+0x1fc>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d012      	beq.n	800391e <HAL_DMA_IRQHandler+0x9e>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a60      	ldr	r2, [pc, #384]	; (8003a80 <HAL_DMA_IRQHandler+0x200>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d00a      	beq.n	8003918 <HAL_DMA_IRQHandler+0x98>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a5f      	ldr	r2, [pc, #380]	; (8003a84 <HAL_DMA_IRQHandler+0x204>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d102      	bne.n	8003912 <HAL_DMA_IRQHandler+0x92>
 800390c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003910:	e00e      	b.n	8003930 <HAL_DMA_IRQHandler+0xb0>
 8003912:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003916:	e00b      	b.n	8003930 <HAL_DMA_IRQHandler+0xb0>
 8003918:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800391c:	e008      	b.n	8003930 <HAL_DMA_IRQHandler+0xb0>
 800391e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003922:	e005      	b.n	8003930 <HAL_DMA_IRQHandler+0xb0>
 8003924:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003928:	e002      	b.n	8003930 <HAL_DMA_IRQHandler+0xb0>
 800392a:	2340      	movs	r3, #64	; 0x40
 800392c:	e000      	b.n	8003930 <HAL_DMA_IRQHandler+0xb0>
 800392e:	2304      	movs	r3, #4
 8003930:	4a55      	ldr	r2, [pc, #340]	; (8003a88 <HAL_DMA_IRQHandler+0x208>)
 8003932:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003938:	2b00      	cmp	r3, #0
 800393a:	f000 8094 	beq.w	8003a66 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003946:	e08e      	b.n	8003a66 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394c:	2202      	movs	r2, #2
 800394e:	409a      	lsls	r2, r3
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	4013      	ands	r3, r2
 8003954:	2b00      	cmp	r3, #0
 8003956:	d056      	beq.n	8003a06 <HAL_DMA_IRQHandler+0x186>
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d051      	beq.n	8003a06 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0320 	and.w	r3, r3, #32
 800396c:	2b00      	cmp	r3, #0
 800396e:	d10b      	bne.n	8003988 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f022 020a 	bic.w	r2, r2, #10
 800397e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a38      	ldr	r2, [pc, #224]	; (8003a70 <HAL_DMA_IRQHandler+0x1f0>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d029      	beq.n	80039e6 <HAL_DMA_IRQHandler+0x166>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a37      	ldr	r2, [pc, #220]	; (8003a74 <HAL_DMA_IRQHandler+0x1f4>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d022      	beq.n	80039e2 <HAL_DMA_IRQHandler+0x162>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a35      	ldr	r2, [pc, #212]	; (8003a78 <HAL_DMA_IRQHandler+0x1f8>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d01a      	beq.n	80039dc <HAL_DMA_IRQHandler+0x15c>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a34      	ldr	r2, [pc, #208]	; (8003a7c <HAL_DMA_IRQHandler+0x1fc>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d012      	beq.n	80039d6 <HAL_DMA_IRQHandler+0x156>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a32      	ldr	r2, [pc, #200]	; (8003a80 <HAL_DMA_IRQHandler+0x200>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d00a      	beq.n	80039d0 <HAL_DMA_IRQHandler+0x150>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a31      	ldr	r2, [pc, #196]	; (8003a84 <HAL_DMA_IRQHandler+0x204>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d102      	bne.n	80039ca <HAL_DMA_IRQHandler+0x14a>
 80039c4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80039c8:	e00e      	b.n	80039e8 <HAL_DMA_IRQHandler+0x168>
 80039ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039ce:	e00b      	b.n	80039e8 <HAL_DMA_IRQHandler+0x168>
 80039d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039d4:	e008      	b.n	80039e8 <HAL_DMA_IRQHandler+0x168>
 80039d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80039da:	e005      	b.n	80039e8 <HAL_DMA_IRQHandler+0x168>
 80039dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80039e0:	e002      	b.n	80039e8 <HAL_DMA_IRQHandler+0x168>
 80039e2:	2320      	movs	r3, #32
 80039e4:	e000      	b.n	80039e8 <HAL_DMA_IRQHandler+0x168>
 80039e6:	2302      	movs	r3, #2
 80039e8:	4a27      	ldr	r2, [pc, #156]	; (8003a88 <HAL_DMA_IRQHandler+0x208>)
 80039ea:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d034      	beq.n	8003a66 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003a04:	e02f      	b.n	8003a66 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0a:	2208      	movs	r2, #8
 8003a0c:	409a      	lsls	r2, r3
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	4013      	ands	r3, r2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d028      	beq.n	8003a68 <HAL_DMA_IRQHandler+0x1e8>
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	f003 0308 	and.w	r3, r3, #8
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d023      	beq.n	8003a68 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f022 020e 	bic.w	r2, r2, #14
 8003a2e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a38:	2101      	movs	r1, #1
 8003a3a:	fa01 f202 	lsl.w	r2, r1, r2
 8003a3e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d004      	beq.n	8003a68 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	4798      	blx	r3
    }
  }
  return;
 8003a66:	bf00      	nop
 8003a68:	bf00      	nop
}
 8003a6a:	3710      	adds	r7, #16
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	40020008 	.word	0x40020008
 8003a74:	4002001c 	.word	0x4002001c
 8003a78:	40020030 	.word	0x40020030
 8003a7c:	40020044 	.word	0x40020044
 8003a80:	40020058 	.word	0x40020058
 8003a84:	4002006c 	.word	0x4002006c
 8003a88:	40020000 	.word	0x40020000

08003a8c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	607a      	str	r2, [r7, #4]
 8003a98:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa2:	2101      	movs	r1, #1
 8003aa4:	fa01 f202 	lsl.w	r2, r1, r2
 8003aa8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	683a      	ldr	r2, [r7, #0]
 8003ab0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	2b10      	cmp	r3, #16
 8003ab8:	d108      	bne.n	8003acc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68ba      	ldr	r2, [r7, #8]
 8003ac8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003aca:	e007      	b.n	8003adc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68ba      	ldr	r2, [r7, #8]
 8003ad2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	60da      	str	r2, [r3, #12]
}
 8003adc:	bf00      	nop
 8003ade:	3714      	adds	r7, #20
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bc80      	pop	{r7}
 8003ae4:	4770      	bx	lr
	...

08003ae8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b08b      	sub	sp, #44	; 0x2c
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003af2:	2300      	movs	r3, #0
 8003af4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003af6:	2300      	movs	r3, #0
 8003af8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003afa:	e169      	b.n	8003dd0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003afc:	2201      	movs	r2, #1
 8003afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b00:	fa02 f303 	lsl.w	r3, r2, r3
 8003b04:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	69fa      	ldr	r2, [r7, #28]
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003b10:	69ba      	ldr	r2, [r7, #24]
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	f040 8158 	bne.w	8003dca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	4a9a      	ldr	r2, [pc, #616]	; (8003d88 <HAL_GPIO_Init+0x2a0>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d05e      	beq.n	8003be2 <HAL_GPIO_Init+0xfa>
 8003b24:	4a98      	ldr	r2, [pc, #608]	; (8003d88 <HAL_GPIO_Init+0x2a0>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d875      	bhi.n	8003c16 <HAL_GPIO_Init+0x12e>
 8003b2a:	4a98      	ldr	r2, [pc, #608]	; (8003d8c <HAL_GPIO_Init+0x2a4>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d058      	beq.n	8003be2 <HAL_GPIO_Init+0xfa>
 8003b30:	4a96      	ldr	r2, [pc, #600]	; (8003d8c <HAL_GPIO_Init+0x2a4>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d86f      	bhi.n	8003c16 <HAL_GPIO_Init+0x12e>
 8003b36:	4a96      	ldr	r2, [pc, #600]	; (8003d90 <HAL_GPIO_Init+0x2a8>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d052      	beq.n	8003be2 <HAL_GPIO_Init+0xfa>
 8003b3c:	4a94      	ldr	r2, [pc, #592]	; (8003d90 <HAL_GPIO_Init+0x2a8>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d869      	bhi.n	8003c16 <HAL_GPIO_Init+0x12e>
 8003b42:	4a94      	ldr	r2, [pc, #592]	; (8003d94 <HAL_GPIO_Init+0x2ac>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d04c      	beq.n	8003be2 <HAL_GPIO_Init+0xfa>
 8003b48:	4a92      	ldr	r2, [pc, #584]	; (8003d94 <HAL_GPIO_Init+0x2ac>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d863      	bhi.n	8003c16 <HAL_GPIO_Init+0x12e>
 8003b4e:	4a92      	ldr	r2, [pc, #584]	; (8003d98 <HAL_GPIO_Init+0x2b0>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d046      	beq.n	8003be2 <HAL_GPIO_Init+0xfa>
 8003b54:	4a90      	ldr	r2, [pc, #576]	; (8003d98 <HAL_GPIO_Init+0x2b0>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d85d      	bhi.n	8003c16 <HAL_GPIO_Init+0x12e>
 8003b5a:	2b12      	cmp	r3, #18
 8003b5c:	d82a      	bhi.n	8003bb4 <HAL_GPIO_Init+0xcc>
 8003b5e:	2b12      	cmp	r3, #18
 8003b60:	d859      	bhi.n	8003c16 <HAL_GPIO_Init+0x12e>
 8003b62:	a201      	add	r2, pc, #4	; (adr r2, 8003b68 <HAL_GPIO_Init+0x80>)
 8003b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b68:	08003be3 	.word	0x08003be3
 8003b6c:	08003bbd 	.word	0x08003bbd
 8003b70:	08003bcf 	.word	0x08003bcf
 8003b74:	08003c11 	.word	0x08003c11
 8003b78:	08003c17 	.word	0x08003c17
 8003b7c:	08003c17 	.word	0x08003c17
 8003b80:	08003c17 	.word	0x08003c17
 8003b84:	08003c17 	.word	0x08003c17
 8003b88:	08003c17 	.word	0x08003c17
 8003b8c:	08003c17 	.word	0x08003c17
 8003b90:	08003c17 	.word	0x08003c17
 8003b94:	08003c17 	.word	0x08003c17
 8003b98:	08003c17 	.word	0x08003c17
 8003b9c:	08003c17 	.word	0x08003c17
 8003ba0:	08003c17 	.word	0x08003c17
 8003ba4:	08003c17 	.word	0x08003c17
 8003ba8:	08003c17 	.word	0x08003c17
 8003bac:	08003bc5 	.word	0x08003bc5
 8003bb0:	08003bd9 	.word	0x08003bd9
 8003bb4:	4a79      	ldr	r2, [pc, #484]	; (8003d9c <HAL_GPIO_Init+0x2b4>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d013      	beq.n	8003be2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003bba:	e02c      	b.n	8003c16 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	623b      	str	r3, [r7, #32]
          break;
 8003bc2:	e029      	b.n	8003c18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	3304      	adds	r3, #4
 8003bca:	623b      	str	r3, [r7, #32]
          break;
 8003bcc:	e024      	b.n	8003c18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	3308      	adds	r3, #8
 8003bd4:	623b      	str	r3, [r7, #32]
          break;
 8003bd6:	e01f      	b.n	8003c18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	330c      	adds	r3, #12
 8003bde:	623b      	str	r3, [r7, #32]
          break;
 8003be0:	e01a      	b.n	8003c18 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d102      	bne.n	8003bf0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003bea:	2304      	movs	r3, #4
 8003bec:	623b      	str	r3, [r7, #32]
          break;
 8003bee:	e013      	b.n	8003c18 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d105      	bne.n	8003c04 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003bf8:	2308      	movs	r3, #8
 8003bfa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	69fa      	ldr	r2, [r7, #28]
 8003c00:	611a      	str	r2, [r3, #16]
          break;
 8003c02:	e009      	b.n	8003c18 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003c04:	2308      	movs	r3, #8
 8003c06:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	69fa      	ldr	r2, [r7, #28]
 8003c0c:	615a      	str	r2, [r3, #20]
          break;
 8003c0e:	e003      	b.n	8003c18 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003c10:	2300      	movs	r3, #0
 8003c12:	623b      	str	r3, [r7, #32]
          break;
 8003c14:	e000      	b.n	8003c18 <HAL_GPIO_Init+0x130>
          break;
 8003c16:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003c18:	69bb      	ldr	r3, [r7, #24]
 8003c1a:	2bff      	cmp	r3, #255	; 0xff
 8003c1c:	d801      	bhi.n	8003c22 <HAL_GPIO_Init+0x13a>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	e001      	b.n	8003c26 <HAL_GPIO_Init+0x13e>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	3304      	adds	r3, #4
 8003c26:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	2bff      	cmp	r3, #255	; 0xff
 8003c2c:	d802      	bhi.n	8003c34 <HAL_GPIO_Init+0x14c>
 8003c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	e002      	b.n	8003c3a <HAL_GPIO_Init+0x152>
 8003c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c36:	3b08      	subs	r3, #8
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	210f      	movs	r1, #15
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	fa01 f303 	lsl.w	r3, r1, r3
 8003c48:	43db      	mvns	r3, r3
 8003c4a:	401a      	ands	r2, r3
 8003c4c:	6a39      	ldr	r1, [r7, #32]
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	fa01 f303 	lsl.w	r3, r1, r3
 8003c54:	431a      	orrs	r2, r3
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	f000 80b1 	beq.w	8003dca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003c68:	4b4d      	ldr	r3, [pc, #308]	; (8003da0 <HAL_GPIO_Init+0x2b8>)
 8003c6a:	699b      	ldr	r3, [r3, #24]
 8003c6c:	4a4c      	ldr	r2, [pc, #304]	; (8003da0 <HAL_GPIO_Init+0x2b8>)
 8003c6e:	f043 0301 	orr.w	r3, r3, #1
 8003c72:	6193      	str	r3, [r2, #24]
 8003c74:	4b4a      	ldr	r3, [pc, #296]	; (8003da0 <HAL_GPIO_Init+0x2b8>)
 8003c76:	699b      	ldr	r3, [r3, #24]
 8003c78:	f003 0301 	and.w	r3, r3, #1
 8003c7c:	60bb      	str	r3, [r7, #8]
 8003c7e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003c80:	4a48      	ldr	r2, [pc, #288]	; (8003da4 <HAL_GPIO_Init+0x2bc>)
 8003c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c84:	089b      	lsrs	r3, r3, #2
 8003c86:	3302      	adds	r3, #2
 8003c88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c8c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c90:	f003 0303 	and.w	r3, r3, #3
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	220f      	movs	r2, #15
 8003c98:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9c:	43db      	mvns	r3, r3
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a40      	ldr	r2, [pc, #256]	; (8003da8 <HAL_GPIO_Init+0x2c0>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d013      	beq.n	8003cd4 <HAL_GPIO_Init+0x1ec>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4a3f      	ldr	r2, [pc, #252]	; (8003dac <HAL_GPIO_Init+0x2c4>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d00d      	beq.n	8003cd0 <HAL_GPIO_Init+0x1e8>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4a3e      	ldr	r2, [pc, #248]	; (8003db0 <HAL_GPIO_Init+0x2c8>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d007      	beq.n	8003ccc <HAL_GPIO_Init+0x1e4>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a3d      	ldr	r2, [pc, #244]	; (8003db4 <HAL_GPIO_Init+0x2cc>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d101      	bne.n	8003cc8 <HAL_GPIO_Init+0x1e0>
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	e006      	b.n	8003cd6 <HAL_GPIO_Init+0x1ee>
 8003cc8:	2304      	movs	r3, #4
 8003cca:	e004      	b.n	8003cd6 <HAL_GPIO_Init+0x1ee>
 8003ccc:	2302      	movs	r3, #2
 8003cce:	e002      	b.n	8003cd6 <HAL_GPIO_Init+0x1ee>
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e000      	b.n	8003cd6 <HAL_GPIO_Init+0x1ee>
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cd8:	f002 0203 	and.w	r2, r2, #3
 8003cdc:	0092      	lsls	r2, r2, #2
 8003cde:	4093      	lsls	r3, r2
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003ce6:	492f      	ldr	r1, [pc, #188]	; (8003da4 <HAL_GPIO_Init+0x2bc>)
 8003ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cea:	089b      	lsrs	r3, r3, #2
 8003cec:	3302      	adds	r3, #2
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d006      	beq.n	8003d0e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003d00:	4b2d      	ldr	r3, [pc, #180]	; (8003db8 <HAL_GPIO_Init+0x2d0>)
 8003d02:	689a      	ldr	r2, [r3, #8]
 8003d04:	492c      	ldr	r1, [pc, #176]	; (8003db8 <HAL_GPIO_Init+0x2d0>)
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	608b      	str	r3, [r1, #8]
 8003d0c:	e006      	b.n	8003d1c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003d0e:	4b2a      	ldr	r3, [pc, #168]	; (8003db8 <HAL_GPIO_Init+0x2d0>)
 8003d10:	689a      	ldr	r2, [r3, #8]
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	43db      	mvns	r3, r3
 8003d16:	4928      	ldr	r1, [pc, #160]	; (8003db8 <HAL_GPIO_Init+0x2d0>)
 8003d18:	4013      	ands	r3, r2
 8003d1a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d006      	beq.n	8003d36 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003d28:	4b23      	ldr	r3, [pc, #140]	; (8003db8 <HAL_GPIO_Init+0x2d0>)
 8003d2a:	68da      	ldr	r2, [r3, #12]
 8003d2c:	4922      	ldr	r1, [pc, #136]	; (8003db8 <HAL_GPIO_Init+0x2d0>)
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	60cb      	str	r3, [r1, #12]
 8003d34:	e006      	b.n	8003d44 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003d36:	4b20      	ldr	r3, [pc, #128]	; (8003db8 <HAL_GPIO_Init+0x2d0>)
 8003d38:	68da      	ldr	r2, [r3, #12]
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	43db      	mvns	r3, r3
 8003d3e:	491e      	ldr	r1, [pc, #120]	; (8003db8 <HAL_GPIO_Init+0x2d0>)
 8003d40:	4013      	ands	r3, r2
 8003d42:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d006      	beq.n	8003d5e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003d50:	4b19      	ldr	r3, [pc, #100]	; (8003db8 <HAL_GPIO_Init+0x2d0>)
 8003d52:	685a      	ldr	r2, [r3, #4]
 8003d54:	4918      	ldr	r1, [pc, #96]	; (8003db8 <HAL_GPIO_Init+0x2d0>)
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	604b      	str	r3, [r1, #4]
 8003d5c:	e006      	b.n	8003d6c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003d5e:	4b16      	ldr	r3, [pc, #88]	; (8003db8 <HAL_GPIO_Init+0x2d0>)
 8003d60:	685a      	ldr	r2, [r3, #4]
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	43db      	mvns	r3, r3
 8003d66:	4914      	ldr	r1, [pc, #80]	; (8003db8 <HAL_GPIO_Init+0x2d0>)
 8003d68:	4013      	ands	r3, r2
 8003d6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d021      	beq.n	8003dbc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003d78:	4b0f      	ldr	r3, [pc, #60]	; (8003db8 <HAL_GPIO_Init+0x2d0>)
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	490e      	ldr	r1, [pc, #56]	; (8003db8 <HAL_GPIO_Init+0x2d0>)
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	600b      	str	r3, [r1, #0]
 8003d84:	e021      	b.n	8003dca <HAL_GPIO_Init+0x2e2>
 8003d86:	bf00      	nop
 8003d88:	10320000 	.word	0x10320000
 8003d8c:	10310000 	.word	0x10310000
 8003d90:	10220000 	.word	0x10220000
 8003d94:	10210000 	.word	0x10210000
 8003d98:	10120000 	.word	0x10120000
 8003d9c:	10110000 	.word	0x10110000
 8003da0:	40021000 	.word	0x40021000
 8003da4:	40010000 	.word	0x40010000
 8003da8:	40010800 	.word	0x40010800
 8003dac:	40010c00 	.word	0x40010c00
 8003db0:	40011000 	.word	0x40011000
 8003db4:	40011400 	.word	0x40011400
 8003db8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003dbc:	4b0b      	ldr	r3, [pc, #44]	; (8003dec <HAL_GPIO_Init+0x304>)
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	43db      	mvns	r3, r3
 8003dc4:	4909      	ldr	r1, [pc, #36]	; (8003dec <HAL_GPIO_Init+0x304>)
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dcc:	3301      	adds	r3, #1
 8003dce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	f47f ae8e 	bne.w	8003afc <HAL_GPIO_Init+0x14>
  }
}
 8003de0:	bf00      	nop
 8003de2:	bf00      	nop
 8003de4:	372c      	adds	r7, #44	; 0x2c
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bc80      	pop	{r7}
 8003dea:	4770      	bx	lr
 8003dec:	40010400 	.word	0x40010400

08003df0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b085      	sub	sp, #20
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	460b      	mov	r3, r1
 8003dfa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	689a      	ldr	r2, [r3, #8]
 8003e00:	887b      	ldrh	r3, [r7, #2]
 8003e02:	4013      	ands	r3, r2
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d002      	beq.n	8003e0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	73fb      	strb	r3, [r7, #15]
 8003e0c:	e001      	b.n	8003e12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3714      	adds	r7, #20
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bc80      	pop	{r7}
 8003e1c:	4770      	bx	lr

08003e1e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e1e:	b480      	push	{r7}
 8003e20:	b083      	sub	sp, #12
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
 8003e26:	460b      	mov	r3, r1
 8003e28:	807b      	strh	r3, [r7, #2]
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e2e:	787b      	ldrb	r3, [r7, #1]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d003      	beq.n	8003e3c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e34:	887a      	ldrh	r2, [r7, #2]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003e3a:	e003      	b.n	8003e44 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003e3c:	887b      	ldrh	r3, [r7, #2]
 8003e3e:	041a      	lsls	r2, r3, #16
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	611a      	str	r2, [r3, #16]
}
 8003e44:	bf00      	nop
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bc80      	pop	{r7}
 8003e4c:	4770      	bx	lr
	...

08003e50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d101      	bne.n	8003e62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e12b      	b.n	80040ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d106      	bne.n	8003e7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f7fe fcea 	bl	8002850 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2224      	movs	r2, #36	; 0x24
 8003e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f022 0201 	bic.w	r2, r2, #1
 8003e92:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ea2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003eb2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003eb4:	f001 fbca 	bl	800564c <HAL_RCC_GetPCLK1Freq>
 8003eb8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	4a81      	ldr	r2, [pc, #516]	; (80040c4 <HAL_I2C_Init+0x274>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d807      	bhi.n	8003ed4 <HAL_I2C_Init+0x84>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	4a80      	ldr	r2, [pc, #512]	; (80040c8 <HAL_I2C_Init+0x278>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	bf94      	ite	ls
 8003ecc:	2301      	movls	r3, #1
 8003ece:	2300      	movhi	r3, #0
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	e006      	b.n	8003ee2 <HAL_I2C_Init+0x92>
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	4a7d      	ldr	r2, [pc, #500]	; (80040cc <HAL_I2C_Init+0x27c>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	bf94      	ite	ls
 8003edc:	2301      	movls	r3, #1
 8003ede:	2300      	movhi	r3, #0
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d001      	beq.n	8003eea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e0e7      	b.n	80040ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	4a78      	ldr	r2, [pc, #480]	; (80040d0 <HAL_I2C_Init+0x280>)
 8003eee:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef2:	0c9b      	lsrs	r3, r3, #18
 8003ef4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68ba      	ldr	r2, [r7, #8]
 8003f06:	430a      	orrs	r2, r1
 8003f08:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	6a1b      	ldr	r3, [r3, #32]
 8003f10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	4a6a      	ldr	r2, [pc, #424]	; (80040c4 <HAL_I2C_Init+0x274>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d802      	bhi.n	8003f24 <HAL_I2C_Init+0xd4>
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	3301      	adds	r3, #1
 8003f22:	e009      	b.n	8003f38 <HAL_I2C_Init+0xe8>
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003f2a:	fb02 f303 	mul.w	r3, r2, r3
 8003f2e:	4a69      	ldr	r2, [pc, #420]	; (80040d4 <HAL_I2C_Init+0x284>)
 8003f30:	fba2 2303 	umull	r2, r3, r2, r3
 8003f34:	099b      	lsrs	r3, r3, #6
 8003f36:	3301      	adds	r3, #1
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	6812      	ldr	r2, [r2, #0]
 8003f3c:	430b      	orrs	r3, r1
 8003f3e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	69db      	ldr	r3, [r3, #28]
 8003f46:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003f4a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	495c      	ldr	r1, [pc, #368]	; (80040c4 <HAL_I2C_Init+0x274>)
 8003f54:	428b      	cmp	r3, r1
 8003f56:	d819      	bhi.n	8003f8c <HAL_I2C_Init+0x13c>
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	1e59      	subs	r1, r3, #1
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	005b      	lsls	r3, r3, #1
 8003f62:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f66:	1c59      	adds	r1, r3, #1
 8003f68:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003f6c:	400b      	ands	r3, r1
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00a      	beq.n	8003f88 <HAL_I2C_Init+0x138>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	1e59      	subs	r1, r3, #1
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	005b      	lsls	r3, r3, #1
 8003f7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f80:	3301      	adds	r3, #1
 8003f82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f86:	e051      	b.n	800402c <HAL_I2C_Init+0x1dc>
 8003f88:	2304      	movs	r3, #4
 8003f8a:	e04f      	b.n	800402c <HAL_I2C_Init+0x1dc>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d111      	bne.n	8003fb8 <HAL_I2C_Init+0x168>
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	1e58      	subs	r0, r3, #1
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6859      	ldr	r1, [r3, #4]
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	005b      	lsls	r3, r3, #1
 8003fa0:	440b      	add	r3, r1
 8003fa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	bf0c      	ite	eq
 8003fb0:	2301      	moveq	r3, #1
 8003fb2:	2300      	movne	r3, #0
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	e012      	b.n	8003fde <HAL_I2C_Init+0x18e>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	1e58      	subs	r0, r3, #1
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6859      	ldr	r1, [r3, #4]
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	440b      	add	r3, r1
 8003fc6:	0099      	lsls	r1, r3, #2
 8003fc8:	440b      	add	r3, r1
 8003fca:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fce:	3301      	adds	r3, #1
 8003fd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	bf0c      	ite	eq
 8003fd8:	2301      	moveq	r3, #1
 8003fda:	2300      	movne	r3, #0
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d001      	beq.n	8003fe6 <HAL_I2C_Init+0x196>
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e022      	b.n	800402c <HAL_I2C_Init+0x1dc>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d10e      	bne.n	800400c <HAL_I2C_Init+0x1bc>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	1e58      	subs	r0, r3, #1
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6859      	ldr	r1, [r3, #4]
 8003ff6:	460b      	mov	r3, r1
 8003ff8:	005b      	lsls	r3, r3, #1
 8003ffa:	440b      	add	r3, r1
 8003ffc:	fbb0 f3f3 	udiv	r3, r0, r3
 8004000:	3301      	adds	r3, #1
 8004002:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004006:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800400a:	e00f      	b.n	800402c <HAL_I2C_Init+0x1dc>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	1e58      	subs	r0, r3, #1
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6859      	ldr	r1, [r3, #4]
 8004014:	460b      	mov	r3, r1
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	440b      	add	r3, r1
 800401a:	0099      	lsls	r1, r3, #2
 800401c:	440b      	add	r3, r1
 800401e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004022:	3301      	adds	r3, #1
 8004024:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004028:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800402c:	6879      	ldr	r1, [r7, #4]
 800402e:	6809      	ldr	r1, [r1, #0]
 8004030:	4313      	orrs	r3, r2
 8004032:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	69da      	ldr	r2, [r3, #28]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a1b      	ldr	r3, [r3, #32]
 8004046:	431a      	orrs	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	430a      	orrs	r2, r1
 800404e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800405a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	6911      	ldr	r1, [r2, #16]
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	68d2      	ldr	r2, [r2, #12]
 8004066:	4311      	orrs	r1, r2
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	6812      	ldr	r2, [r2, #0]
 800406c:	430b      	orrs	r3, r1
 800406e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	695a      	ldr	r2, [r3, #20]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	431a      	orrs	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	430a      	orrs	r2, r1
 800408a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f042 0201 	orr.w	r2, r2, #1
 800409a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2220      	movs	r2, #32
 80040a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3710      	adds	r7, #16
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	000186a0 	.word	0x000186a0
 80040c8:	001e847f 	.word	0x001e847f
 80040cc:	003d08ff 	.word	0x003d08ff
 80040d0:	431bde83 	.word	0x431bde83
 80040d4:	10624dd3 	.word	0x10624dd3

080040d8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b088      	sub	sp, #32
 80040dc:	af02      	add	r7, sp, #8
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	607a      	str	r2, [r7, #4]
 80040e2:	461a      	mov	r2, r3
 80040e4:	460b      	mov	r3, r1
 80040e6:	817b      	strh	r3, [r7, #10]
 80040e8:	4613      	mov	r3, r2
 80040ea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80040ec:	f7fe fdb0 	bl	8002c50 <HAL_GetTick>
 80040f0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	2b20      	cmp	r3, #32
 80040fc:	f040 80e0 	bne.w	80042c0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	9300      	str	r3, [sp, #0]
 8004104:	2319      	movs	r3, #25
 8004106:	2201      	movs	r2, #1
 8004108:	4970      	ldr	r1, [pc, #448]	; (80042cc <HAL_I2C_Master_Transmit+0x1f4>)
 800410a:	68f8      	ldr	r0, [r7, #12]
 800410c:	f000 fc9e 	bl	8004a4c <I2C_WaitOnFlagUntilTimeout>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d001      	beq.n	800411a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004116:	2302      	movs	r3, #2
 8004118:	e0d3      	b.n	80042c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004120:	2b01      	cmp	r3, #1
 8004122:	d101      	bne.n	8004128 <HAL_I2C_Master_Transmit+0x50>
 8004124:	2302      	movs	r3, #2
 8004126:	e0cc      	b.n	80042c2 <HAL_I2C_Master_Transmit+0x1ea>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0301 	and.w	r3, r3, #1
 800413a:	2b01      	cmp	r3, #1
 800413c:	d007      	beq.n	800414e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f042 0201 	orr.w	r2, r2, #1
 800414c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800415c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2221      	movs	r2, #33	; 0x21
 8004162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2210      	movs	r2, #16
 800416a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2200      	movs	r2, #0
 8004172:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	893a      	ldrh	r2, [r7, #8]
 800417e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004184:	b29a      	uxth	r2, r3
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	4a50      	ldr	r2, [pc, #320]	; (80042d0 <HAL_I2C_Master_Transmit+0x1f8>)
 800418e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004190:	8979      	ldrh	r1, [r7, #10]
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	6a3a      	ldr	r2, [r7, #32]
 8004196:	68f8      	ldr	r0, [r7, #12]
 8004198:	f000 fb08 	bl	80047ac <I2C_MasterRequestWrite>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d001      	beq.n	80041a6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e08d      	b.n	80042c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041a6:	2300      	movs	r3, #0
 80041a8:	613b      	str	r3, [r7, #16]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	695b      	ldr	r3, [r3, #20]
 80041b0:	613b      	str	r3, [r7, #16]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	613b      	str	r3, [r7, #16]
 80041ba:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80041bc:	e066      	b.n	800428c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041be:	697a      	ldr	r2, [r7, #20]
 80041c0:	6a39      	ldr	r1, [r7, #32]
 80041c2:	68f8      	ldr	r0, [r7, #12]
 80041c4:	f000 fd5c 	bl	8004c80 <I2C_WaitOnTXEFlagUntilTimeout>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00d      	beq.n	80041ea <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d2:	2b04      	cmp	r3, #4
 80041d4:	d107      	bne.n	80041e6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e06b      	b.n	80042c2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ee:	781a      	ldrb	r2, [r3, #0]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fa:	1c5a      	adds	r2, r3, #1
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004204:	b29b      	uxth	r3, r3
 8004206:	3b01      	subs	r3, #1
 8004208:	b29a      	uxth	r2, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004212:	3b01      	subs	r3, #1
 8004214:	b29a      	uxth	r2, r3
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	695b      	ldr	r3, [r3, #20]
 8004220:	f003 0304 	and.w	r3, r3, #4
 8004224:	2b04      	cmp	r3, #4
 8004226:	d11b      	bne.n	8004260 <HAL_I2C_Master_Transmit+0x188>
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800422c:	2b00      	cmp	r3, #0
 800422e:	d017      	beq.n	8004260 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004234:	781a      	ldrb	r2, [r3, #0]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004240:	1c5a      	adds	r2, r3, #1
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800424a:	b29b      	uxth	r3, r3
 800424c:	3b01      	subs	r3, #1
 800424e:	b29a      	uxth	r2, r3
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004258:	3b01      	subs	r3, #1
 800425a:	b29a      	uxth	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004260:	697a      	ldr	r2, [r7, #20]
 8004262:	6a39      	ldr	r1, [r7, #32]
 8004264:	68f8      	ldr	r0, [r7, #12]
 8004266:	f000 fd53 	bl	8004d10 <I2C_WaitOnBTFFlagUntilTimeout>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d00d      	beq.n	800428c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004274:	2b04      	cmp	r3, #4
 8004276:	d107      	bne.n	8004288 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004286:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e01a      	b.n	80042c2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004290:	2b00      	cmp	r3, #0
 8004292:	d194      	bne.n	80041be <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2220      	movs	r2, #32
 80042a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80042bc:	2300      	movs	r3, #0
 80042be:	e000      	b.n	80042c2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80042c0:	2302      	movs	r3, #2
  }
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3718      	adds	r7, #24
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	00100002 	.word	0x00100002
 80042d0:	ffff0000 	.word	0xffff0000

080042d4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b08c      	sub	sp, #48	; 0x30
 80042d8:	af02      	add	r7, sp, #8
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	607a      	str	r2, [r7, #4]
 80042de:	461a      	mov	r2, r3
 80042e0:	460b      	mov	r3, r1
 80042e2:	817b      	strh	r3, [r7, #10]
 80042e4:	4613      	mov	r3, r2
 80042e6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80042e8:	2300      	movs	r3, #0
 80042ea:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80042ec:	f7fe fcb0 	bl	8002c50 <HAL_GetTick>
 80042f0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b20      	cmp	r3, #32
 80042fc:	f040 824b 	bne.w	8004796 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004302:	9300      	str	r3, [sp, #0]
 8004304:	2319      	movs	r3, #25
 8004306:	2201      	movs	r2, #1
 8004308:	497f      	ldr	r1, [pc, #508]	; (8004508 <HAL_I2C_Master_Receive+0x234>)
 800430a:	68f8      	ldr	r0, [r7, #12]
 800430c:	f000 fb9e 	bl	8004a4c <I2C_WaitOnFlagUntilTimeout>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d001      	beq.n	800431a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8004316:	2302      	movs	r3, #2
 8004318:	e23e      	b.n	8004798 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004320:	2b01      	cmp	r3, #1
 8004322:	d101      	bne.n	8004328 <HAL_I2C_Master_Receive+0x54>
 8004324:	2302      	movs	r3, #2
 8004326:	e237      	b.n	8004798 <HAL_I2C_Master_Receive+0x4c4>
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	2b01      	cmp	r3, #1
 800433c:	d007      	beq.n	800434e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f042 0201 	orr.w	r2, r2, #1
 800434c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800435c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2222      	movs	r2, #34	; 0x22
 8004362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2210      	movs	r2, #16
 800436a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2200      	movs	r2, #0
 8004372:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	893a      	ldrh	r2, [r7, #8]
 800437e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004384:	b29a      	uxth	r2, r3
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	4a5f      	ldr	r2, [pc, #380]	; (800450c <HAL_I2C_Master_Receive+0x238>)
 800438e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004390:	8979      	ldrh	r1, [r7, #10]
 8004392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004394:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004396:	68f8      	ldr	r0, [r7, #12]
 8004398:	f000 fa8a 	bl	80048b0 <I2C_MasterRequestRead>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d001      	beq.n	80043a6 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e1f8      	b.n	8004798 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d113      	bne.n	80043d6 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043ae:	2300      	movs	r3, #0
 80043b0:	61fb      	str	r3, [r7, #28]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	695b      	ldr	r3, [r3, #20]
 80043b8:	61fb      	str	r3, [r7, #28]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	699b      	ldr	r3, [r3, #24]
 80043c0:	61fb      	str	r3, [r7, #28]
 80043c2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043d2:	601a      	str	r2, [r3, #0]
 80043d4:	e1cc      	b.n	8004770 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d11e      	bne.n	800441c <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043ec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80043ee:	b672      	cpsid	i
}
 80043f0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043f2:	2300      	movs	r3, #0
 80043f4:	61bb      	str	r3, [r7, #24]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	695b      	ldr	r3, [r3, #20]
 80043fc:	61bb      	str	r3, [r7, #24]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	61bb      	str	r3, [r7, #24]
 8004406:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004416:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004418:	b662      	cpsie	i
}
 800441a:	e035      	b.n	8004488 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004420:	2b02      	cmp	r3, #2
 8004422:	d11e      	bne.n	8004462 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004432:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004434:	b672      	cpsid	i
}
 8004436:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004438:	2300      	movs	r3, #0
 800443a:	617b      	str	r3, [r7, #20]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	617b      	str	r3, [r7, #20]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	699b      	ldr	r3, [r3, #24]
 800444a:	617b      	str	r3, [r7, #20]
 800444c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800445c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800445e:	b662      	cpsie	i
}
 8004460:	e012      	b.n	8004488 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004470:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004472:	2300      	movs	r3, #0
 8004474:	613b      	str	r3, [r7, #16]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	695b      	ldr	r3, [r3, #20]
 800447c:	613b      	str	r3, [r7, #16]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	699b      	ldr	r3, [r3, #24]
 8004484:	613b      	str	r3, [r7, #16]
 8004486:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004488:	e172      	b.n	8004770 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800448e:	2b03      	cmp	r3, #3
 8004490:	f200 811f 	bhi.w	80046d2 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004498:	2b01      	cmp	r3, #1
 800449a:	d123      	bne.n	80044e4 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800449c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800449e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	f000 fc7d 	bl	8004da0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d001      	beq.n	80044b0 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e173      	b.n	8004798 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	691a      	ldr	r2, [r3, #16]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ba:	b2d2      	uxtb	r2, r2
 80044bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c2:	1c5a      	adds	r2, r3, #1
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044cc:	3b01      	subs	r3, #1
 80044ce:	b29a      	uxth	r2, r3
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044d8:	b29b      	uxth	r3, r3
 80044da:	3b01      	subs	r3, #1
 80044dc:	b29a      	uxth	r2, r3
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80044e2:	e145      	b.n	8004770 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d152      	bne.n	8004592 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ee:	9300      	str	r3, [sp, #0]
 80044f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f2:	2200      	movs	r2, #0
 80044f4:	4906      	ldr	r1, [pc, #24]	; (8004510 <HAL_I2C_Master_Receive+0x23c>)
 80044f6:	68f8      	ldr	r0, [r7, #12]
 80044f8:	f000 faa8 	bl	8004a4c <I2C_WaitOnFlagUntilTimeout>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d008      	beq.n	8004514 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e148      	b.n	8004798 <HAL_I2C_Master_Receive+0x4c4>
 8004506:	bf00      	nop
 8004508:	00100002 	.word	0x00100002
 800450c:	ffff0000 	.word	0xffff0000
 8004510:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004514:	b672      	cpsid	i
}
 8004516:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004526:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	691a      	ldr	r2, [r3, #16]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004532:	b2d2      	uxtb	r2, r2
 8004534:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453a:	1c5a      	adds	r2, r3, #1
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004544:	3b01      	subs	r3, #1
 8004546:	b29a      	uxth	r2, r3
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004550:	b29b      	uxth	r3, r3
 8004552:	3b01      	subs	r3, #1
 8004554:	b29a      	uxth	r2, r3
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800455a:	b662      	cpsie	i
}
 800455c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	691a      	ldr	r2, [r3, #16]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004568:	b2d2      	uxtb	r2, r2
 800456a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004570:	1c5a      	adds	r2, r3, #1
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800457a:	3b01      	subs	r3, #1
 800457c:	b29a      	uxth	r2, r3
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004586:	b29b      	uxth	r3, r3
 8004588:	3b01      	subs	r3, #1
 800458a:	b29a      	uxth	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004590:	e0ee      	b.n	8004770 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004594:	9300      	str	r3, [sp, #0]
 8004596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004598:	2200      	movs	r2, #0
 800459a:	4981      	ldr	r1, [pc, #516]	; (80047a0 <HAL_I2C_Master_Receive+0x4cc>)
 800459c:	68f8      	ldr	r0, [r7, #12]
 800459e:	f000 fa55 	bl	8004a4c <I2C_WaitOnFlagUntilTimeout>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d001      	beq.n	80045ac <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e0f5      	b.n	8004798 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045ba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80045bc:	b672      	cpsid	i
}
 80045be:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	691a      	ldr	r2, [r3, #16]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ca:	b2d2      	uxtb	r2, r2
 80045cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d2:	1c5a      	adds	r2, r3, #1
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045dc:	3b01      	subs	r3, #1
 80045de:	b29a      	uxth	r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	3b01      	subs	r3, #1
 80045ec:	b29a      	uxth	r2, r3
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80045f2:	4b6c      	ldr	r3, [pc, #432]	; (80047a4 <HAL_I2C_Master_Receive+0x4d0>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	08db      	lsrs	r3, r3, #3
 80045f8:	4a6b      	ldr	r2, [pc, #428]	; (80047a8 <HAL_I2C_Master_Receive+0x4d4>)
 80045fa:	fba2 2303 	umull	r2, r3, r2, r3
 80045fe:	0a1a      	lsrs	r2, r3, #8
 8004600:	4613      	mov	r3, r2
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	4413      	add	r3, r2
 8004606:	00da      	lsls	r2, r3, #3
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800460c:	6a3b      	ldr	r3, [r7, #32]
 800460e:	3b01      	subs	r3, #1
 8004610:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004612:	6a3b      	ldr	r3, [r7, #32]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d118      	bne.n	800464a <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2200      	movs	r2, #0
 800461c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2220      	movs	r2, #32
 8004622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004632:	f043 0220 	orr.w	r2, r3, #32
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800463a:	b662      	cpsie	i
}
 800463c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e0a6      	b.n	8004798 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	695b      	ldr	r3, [r3, #20]
 8004650:	f003 0304 	and.w	r3, r3, #4
 8004654:	2b04      	cmp	r3, #4
 8004656:	d1d9      	bne.n	800460c <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004666:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	691a      	ldr	r2, [r3, #16]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004672:	b2d2      	uxtb	r2, r2
 8004674:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467a:	1c5a      	adds	r2, r3, #1
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004684:	3b01      	subs	r3, #1
 8004686:	b29a      	uxth	r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004690:	b29b      	uxth	r3, r3
 8004692:	3b01      	subs	r3, #1
 8004694:	b29a      	uxth	r2, r3
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800469a:	b662      	cpsie	i
}
 800469c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	691a      	ldr	r2, [r3, #16]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a8:	b2d2      	uxtb	r2, r2
 80046aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b0:	1c5a      	adds	r2, r3, #1
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ba:	3b01      	subs	r3, #1
 80046bc:	b29a      	uxth	r2, r3
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	3b01      	subs	r3, #1
 80046ca:	b29a      	uxth	r2, r3
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80046d0:	e04e      	b.n	8004770 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80046d6:	68f8      	ldr	r0, [r7, #12]
 80046d8:	f000 fb62 	bl	8004da0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d001      	beq.n	80046e6 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e058      	b.n	8004798 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	691a      	ldr	r2, [r3, #16]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f0:	b2d2      	uxtb	r2, r2
 80046f2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f8:	1c5a      	adds	r2, r3, #1
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004702:	3b01      	subs	r3, #1
 8004704:	b29a      	uxth	r2, r3
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800470e:	b29b      	uxth	r3, r3
 8004710:	3b01      	subs	r3, #1
 8004712:	b29a      	uxth	r2, r3
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	f003 0304 	and.w	r3, r3, #4
 8004722:	2b04      	cmp	r3, #4
 8004724:	d124      	bne.n	8004770 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800472a:	2b03      	cmp	r3, #3
 800472c:	d107      	bne.n	800473e <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800473c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	691a      	ldr	r2, [r3, #16]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004748:	b2d2      	uxtb	r2, r2
 800474a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004750:	1c5a      	adds	r2, r3, #1
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800475a:	3b01      	subs	r3, #1
 800475c:	b29a      	uxth	r2, r3
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004766:	b29b      	uxth	r3, r3
 8004768:	3b01      	subs	r3, #1
 800476a:	b29a      	uxth	r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004774:	2b00      	cmp	r3, #0
 8004776:	f47f ae88 	bne.w	800448a <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2220      	movs	r2, #32
 800477e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004792:	2300      	movs	r3, #0
 8004794:	e000      	b.n	8004798 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8004796:	2302      	movs	r3, #2
  }
}
 8004798:	4618      	mov	r0, r3
 800479a:	3728      	adds	r7, #40	; 0x28
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	00010004 	.word	0x00010004
 80047a4:	20000018 	.word	0x20000018
 80047a8:	14f8b589 	.word	0x14f8b589

080047ac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b088      	sub	sp, #32
 80047b0:	af02      	add	r7, sp, #8
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	607a      	str	r2, [r7, #4]
 80047b6:	603b      	str	r3, [r7, #0]
 80047b8:	460b      	mov	r3, r1
 80047ba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	2b08      	cmp	r3, #8
 80047c6:	d006      	beq.n	80047d6 <I2C_MasterRequestWrite+0x2a>
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d003      	beq.n	80047d6 <I2C_MasterRequestWrite+0x2a>
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80047d4:	d108      	bne.n	80047e8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047e4:	601a      	str	r2, [r3, #0]
 80047e6:	e00b      	b.n	8004800 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ec:	2b12      	cmp	r3, #18
 80047ee:	d107      	bne.n	8004800 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047fe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	9300      	str	r3, [sp, #0]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800480c:	68f8      	ldr	r0, [r7, #12]
 800480e:	f000 f91d 	bl	8004a4c <I2C_WaitOnFlagUntilTimeout>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00d      	beq.n	8004834 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004822:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004826:	d103      	bne.n	8004830 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800482e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004830:	2303      	movs	r3, #3
 8004832:	e035      	b.n	80048a0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800483c:	d108      	bne.n	8004850 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800483e:	897b      	ldrh	r3, [r7, #10]
 8004840:	b2db      	uxtb	r3, r3
 8004842:	461a      	mov	r2, r3
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800484c:	611a      	str	r2, [r3, #16]
 800484e:	e01b      	b.n	8004888 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004850:	897b      	ldrh	r3, [r7, #10]
 8004852:	11db      	asrs	r3, r3, #7
 8004854:	b2db      	uxtb	r3, r3
 8004856:	f003 0306 	and.w	r3, r3, #6
 800485a:	b2db      	uxtb	r3, r3
 800485c:	f063 030f 	orn	r3, r3, #15
 8004860:	b2da      	uxtb	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	490e      	ldr	r1, [pc, #56]	; (80048a8 <I2C_MasterRequestWrite+0xfc>)
 800486e:	68f8      	ldr	r0, [r7, #12]
 8004870:	f000 f966 	bl	8004b40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d001      	beq.n	800487e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e010      	b.n	80048a0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800487e:	897b      	ldrh	r3, [r7, #10]
 8004880:	b2da      	uxtb	r2, r3
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	4907      	ldr	r1, [pc, #28]	; (80048ac <I2C_MasterRequestWrite+0x100>)
 800488e:	68f8      	ldr	r0, [r7, #12]
 8004890:	f000 f956 	bl	8004b40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d001      	beq.n	800489e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e000      	b.n	80048a0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800489e:	2300      	movs	r3, #0
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3718      	adds	r7, #24
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	00010008 	.word	0x00010008
 80048ac:	00010002 	.word	0x00010002

080048b0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b088      	sub	sp, #32
 80048b4:	af02      	add	r7, sp, #8
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	607a      	str	r2, [r7, #4]
 80048ba:	603b      	str	r3, [r7, #0]
 80048bc:	460b      	mov	r3, r1
 80048be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80048d4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	2b08      	cmp	r3, #8
 80048da:	d006      	beq.n	80048ea <I2C_MasterRequestRead+0x3a>
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d003      	beq.n	80048ea <I2C_MasterRequestRead+0x3a>
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80048e8:	d108      	bne.n	80048fc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048f8:	601a      	str	r2, [r3, #0]
 80048fa:	e00b      	b.n	8004914 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004900:	2b11      	cmp	r3, #17
 8004902:	d107      	bne.n	8004914 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004912:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	9300      	str	r3, [sp, #0]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004920:	68f8      	ldr	r0, [r7, #12]
 8004922:	f000 f893 	bl	8004a4c <I2C_WaitOnFlagUntilTimeout>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d00d      	beq.n	8004948 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004936:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800493a:	d103      	bne.n	8004944 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004942:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	e079      	b.n	8004a3c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	691b      	ldr	r3, [r3, #16]
 800494c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004950:	d108      	bne.n	8004964 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004952:	897b      	ldrh	r3, [r7, #10]
 8004954:	b2db      	uxtb	r3, r3
 8004956:	f043 0301 	orr.w	r3, r3, #1
 800495a:	b2da      	uxtb	r2, r3
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	611a      	str	r2, [r3, #16]
 8004962:	e05f      	b.n	8004a24 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004964:	897b      	ldrh	r3, [r7, #10]
 8004966:	11db      	asrs	r3, r3, #7
 8004968:	b2db      	uxtb	r3, r3
 800496a:	f003 0306 	and.w	r3, r3, #6
 800496e:	b2db      	uxtb	r3, r3
 8004970:	f063 030f 	orn	r3, r3, #15
 8004974:	b2da      	uxtb	r2, r3
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	4930      	ldr	r1, [pc, #192]	; (8004a44 <I2C_MasterRequestRead+0x194>)
 8004982:	68f8      	ldr	r0, [r7, #12]
 8004984:	f000 f8dc 	bl	8004b40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004988:	4603      	mov	r3, r0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d001      	beq.n	8004992 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e054      	b.n	8004a3c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004992:	897b      	ldrh	r3, [r7, #10]
 8004994:	b2da      	uxtb	r2, r3
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	4929      	ldr	r1, [pc, #164]	; (8004a48 <I2C_MasterRequestRead+0x198>)
 80049a2:	68f8      	ldr	r0, [r7, #12]
 80049a4:	f000 f8cc 	bl	8004b40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d001      	beq.n	80049b2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e044      	b.n	8004a3c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049b2:	2300      	movs	r3, #0
 80049b4:	613b      	str	r3, [r7, #16]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	695b      	ldr	r3, [r3, #20]
 80049bc:	613b      	str	r3, [r7, #16]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	699b      	ldr	r3, [r3, #24]
 80049c4:	613b      	str	r3, [r7, #16]
 80049c6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049d6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	9300      	str	r3, [sp, #0]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80049e4:	68f8      	ldr	r0, [r7, #12]
 80049e6:	f000 f831 	bl	8004a4c <I2C_WaitOnFlagUntilTimeout>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00d      	beq.n	8004a0c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049fe:	d103      	bne.n	8004a08 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a06:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	e017      	b.n	8004a3c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004a0c:	897b      	ldrh	r3, [r7, #10]
 8004a0e:	11db      	asrs	r3, r3, #7
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	f003 0306 	and.w	r3, r3, #6
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	f063 030e 	orn	r3, r3, #14
 8004a1c:	b2da      	uxtb	r2, r3
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	4907      	ldr	r1, [pc, #28]	; (8004a48 <I2C_MasterRequestRead+0x198>)
 8004a2a:	68f8      	ldr	r0, [r7, #12]
 8004a2c:	f000 f888 	bl	8004b40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d001      	beq.n	8004a3a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e000      	b.n	8004a3c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3718      	adds	r7, #24
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	00010008 	.word	0x00010008
 8004a48:	00010002 	.word	0x00010002

08004a4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	60b9      	str	r1, [r7, #8]
 8004a56:	603b      	str	r3, [r7, #0]
 8004a58:	4613      	mov	r3, r2
 8004a5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a5c:	e048      	b.n	8004af0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a64:	d044      	beq.n	8004af0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a66:	f7fe f8f3 	bl	8002c50 <HAL_GetTick>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	683a      	ldr	r2, [r7, #0]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d302      	bcc.n	8004a7c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d139      	bne.n	8004af0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	0c1b      	lsrs	r3, r3, #16
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d10d      	bne.n	8004aa2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	695b      	ldr	r3, [r3, #20]
 8004a8c:	43da      	mvns	r2, r3
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	4013      	ands	r3, r2
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	bf0c      	ite	eq
 8004a98:	2301      	moveq	r3, #1
 8004a9a:	2300      	movne	r3, #0
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	e00c      	b.n	8004abc <I2C_WaitOnFlagUntilTimeout+0x70>
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	699b      	ldr	r3, [r3, #24]
 8004aa8:	43da      	mvns	r2, r3
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	4013      	ands	r3, r2
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	bf0c      	ite	eq
 8004ab4:	2301      	moveq	r3, #1
 8004ab6:	2300      	movne	r3, #0
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	461a      	mov	r2, r3
 8004abc:	79fb      	ldrb	r3, [r7, #7]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d116      	bne.n	8004af0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2220      	movs	r2, #32
 8004acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004adc:	f043 0220 	orr.w	r2, r3, #32
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e023      	b.n	8004b38 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	0c1b      	lsrs	r3, r3, #16
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d10d      	bne.n	8004b16 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	695b      	ldr	r3, [r3, #20]
 8004b00:	43da      	mvns	r2, r3
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	4013      	ands	r3, r2
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	bf0c      	ite	eq
 8004b0c:	2301      	moveq	r3, #1
 8004b0e:	2300      	movne	r3, #0
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	461a      	mov	r2, r3
 8004b14:	e00c      	b.n	8004b30 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	699b      	ldr	r3, [r3, #24]
 8004b1c:	43da      	mvns	r2, r3
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	4013      	ands	r3, r2
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	bf0c      	ite	eq
 8004b28:	2301      	moveq	r3, #1
 8004b2a:	2300      	movne	r3, #0
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	461a      	mov	r2, r3
 8004b30:	79fb      	ldrb	r3, [r7, #7]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d093      	beq.n	8004a5e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3710      	adds	r7, #16
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]
 8004b4c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b4e:	e071      	b.n	8004c34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	695b      	ldr	r3, [r3, #20]
 8004b56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b5e:	d123      	bne.n	8004ba8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b6e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b78:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2220      	movs	r2, #32
 8004b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b94:	f043 0204 	orr.w	r2, r3, #4
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e067      	b.n	8004c78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bae:	d041      	beq.n	8004c34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bb0:	f7fe f84e 	bl	8002c50 <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d302      	bcc.n	8004bc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d136      	bne.n	8004c34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	0c1b      	lsrs	r3, r3, #16
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d10c      	bne.n	8004bea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	695b      	ldr	r3, [r3, #20]
 8004bd6:	43da      	mvns	r2, r3
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	4013      	ands	r3, r2
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	bf14      	ite	ne
 8004be2:	2301      	movne	r3, #1
 8004be4:	2300      	moveq	r3, #0
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	e00b      	b.n	8004c02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	699b      	ldr	r3, [r3, #24]
 8004bf0:	43da      	mvns	r2, r3
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	bf14      	ite	ne
 8004bfc:	2301      	movne	r3, #1
 8004bfe:	2300      	moveq	r3, #0
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d016      	beq.n	8004c34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2220      	movs	r2, #32
 8004c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c20:	f043 0220 	orr.w	r2, r3, #32
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e021      	b.n	8004c78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	0c1b      	lsrs	r3, r3, #16
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d10c      	bne.n	8004c58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	695b      	ldr	r3, [r3, #20]
 8004c44:	43da      	mvns	r2, r3
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	4013      	ands	r3, r2
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	bf14      	ite	ne
 8004c50:	2301      	movne	r3, #1
 8004c52:	2300      	moveq	r3, #0
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	e00b      	b.n	8004c70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	699b      	ldr	r3, [r3, #24]
 8004c5e:	43da      	mvns	r2, r3
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	4013      	ands	r3, r2
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	bf14      	ite	ne
 8004c6a:	2301      	movne	r3, #1
 8004c6c:	2300      	moveq	r3, #0
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	f47f af6d 	bne.w	8004b50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004c76:	2300      	movs	r3, #0
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3710      	adds	r7, #16
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c8c:	e034      	b.n	8004cf8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c8e:	68f8      	ldr	r0, [r7, #12]
 8004c90:	f000 f8e3 	bl	8004e5a <I2C_IsAcknowledgeFailed>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d001      	beq.n	8004c9e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e034      	b.n	8004d08 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ca4:	d028      	beq.n	8004cf8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ca6:	f7fd ffd3 	bl	8002c50 <HAL_GetTick>
 8004caa:	4602      	mov	r2, r0
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	1ad3      	subs	r3, r2, r3
 8004cb0:	68ba      	ldr	r2, [r7, #8]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d302      	bcc.n	8004cbc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d11d      	bne.n	8004cf8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cc6:	2b80      	cmp	r3, #128	; 0x80
 8004cc8:	d016      	beq.n	8004cf8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2220      	movs	r2, #32
 8004cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce4:	f043 0220 	orr.w	r2, r3, #32
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e007      	b.n	8004d08 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	695b      	ldr	r3, [r3, #20]
 8004cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d02:	2b80      	cmp	r3, #128	; 0x80
 8004d04:	d1c3      	bne.n	8004c8e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004d06:	2300      	movs	r3, #0
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3710      	adds	r7, #16
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d1c:	e034      	b.n	8004d88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d1e:	68f8      	ldr	r0, [r7, #12]
 8004d20:	f000 f89b 	bl	8004e5a <I2C_IsAcknowledgeFailed>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d001      	beq.n	8004d2e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e034      	b.n	8004d98 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d34:	d028      	beq.n	8004d88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d36:	f7fd ff8b 	bl	8002c50 <HAL_GetTick>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	68ba      	ldr	r2, [r7, #8]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d302      	bcc.n	8004d4c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d11d      	bne.n	8004d88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	695b      	ldr	r3, [r3, #20]
 8004d52:	f003 0304 	and.w	r3, r3, #4
 8004d56:	2b04      	cmp	r3, #4
 8004d58:	d016      	beq.n	8004d88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2220      	movs	r2, #32
 8004d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d74:	f043 0220 	orr.w	r2, r3, #32
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e007      	b.n	8004d98 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	695b      	ldr	r3, [r3, #20]
 8004d8e:	f003 0304 	and.w	r3, r3, #4
 8004d92:	2b04      	cmp	r3, #4
 8004d94:	d1c3      	bne.n	8004d1e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3710      	adds	r7, #16
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	60b9      	str	r1, [r7, #8]
 8004daa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004dac:	e049      	b.n	8004e42 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	695b      	ldr	r3, [r3, #20]
 8004db4:	f003 0310 	and.w	r3, r3, #16
 8004db8:	2b10      	cmp	r3, #16
 8004dba:	d119      	bne.n	8004df0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f06f 0210 	mvn.w	r2, #16
 8004dc4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2220      	movs	r2, #32
 8004dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e030      	b.n	8004e52 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004df0:	f7fd ff2e 	bl	8002c50 <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	68ba      	ldr	r2, [r7, #8]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d302      	bcc.n	8004e06 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d11d      	bne.n	8004e42 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	695b      	ldr	r3, [r3, #20]
 8004e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e10:	2b40      	cmp	r3, #64	; 0x40
 8004e12:	d016      	beq.n	8004e42 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2200      	movs	r2, #0
 8004e18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2220      	movs	r2, #32
 8004e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2e:	f043 0220 	orr.w	r2, r3, #32
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e007      	b.n	8004e52 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	695b      	ldr	r3, [r3, #20]
 8004e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e4c:	2b40      	cmp	r3, #64	; 0x40
 8004e4e:	d1ae      	bne.n	8004dae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e50:	2300      	movs	r3, #0
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3710      	adds	r7, #16
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}

08004e5a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004e5a:	b480      	push	{r7}
 8004e5c:	b083      	sub	sp, #12
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	695b      	ldr	r3, [r3, #20]
 8004e68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e70:	d11b      	bne.n	8004eaa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e7a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2220      	movs	r2, #32
 8004e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e96:	f043 0204 	orr.w	r2, r3, #4
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e000      	b.n	8004eac <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004eaa:	2300      	movs	r3, #0
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	370c      	adds	r7, #12
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bc80      	pop	{r7}
 8004eb4:	4770      	bx	lr
	...

08004eb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b086      	sub	sp, #24
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d101      	bne.n	8004eca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e272      	b.n	80053b0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0301 	and.w	r3, r3, #1
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	f000 8087 	beq.w	8004fe6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ed8:	4b92      	ldr	r3, [pc, #584]	; (8005124 <HAL_RCC_OscConfig+0x26c>)
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	f003 030c 	and.w	r3, r3, #12
 8004ee0:	2b04      	cmp	r3, #4
 8004ee2:	d00c      	beq.n	8004efe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004ee4:	4b8f      	ldr	r3, [pc, #572]	; (8005124 <HAL_RCC_OscConfig+0x26c>)
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	f003 030c 	and.w	r3, r3, #12
 8004eec:	2b08      	cmp	r3, #8
 8004eee:	d112      	bne.n	8004f16 <HAL_RCC_OscConfig+0x5e>
 8004ef0:	4b8c      	ldr	r3, [pc, #560]	; (8005124 <HAL_RCC_OscConfig+0x26c>)
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004efc:	d10b      	bne.n	8004f16 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004efe:	4b89      	ldr	r3, [pc, #548]	; (8005124 <HAL_RCC_OscConfig+0x26c>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d06c      	beq.n	8004fe4 <HAL_RCC_OscConfig+0x12c>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d168      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e24c      	b.n	80053b0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f1e:	d106      	bne.n	8004f2e <HAL_RCC_OscConfig+0x76>
 8004f20:	4b80      	ldr	r3, [pc, #512]	; (8005124 <HAL_RCC_OscConfig+0x26c>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a7f      	ldr	r2, [pc, #508]	; (8005124 <HAL_RCC_OscConfig+0x26c>)
 8004f26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f2a:	6013      	str	r3, [r2, #0]
 8004f2c:	e02e      	b.n	8004f8c <HAL_RCC_OscConfig+0xd4>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d10c      	bne.n	8004f50 <HAL_RCC_OscConfig+0x98>
 8004f36:	4b7b      	ldr	r3, [pc, #492]	; (8005124 <HAL_RCC_OscConfig+0x26c>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a7a      	ldr	r2, [pc, #488]	; (8005124 <HAL_RCC_OscConfig+0x26c>)
 8004f3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f40:	6013      	str	r3, [r2, #0]
 8004f42:	4b78      	ldr	r3, [pc, #480]	; (8005124 <HAL_RCC_OscConfig+0x26c>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a77      	ldr	r2, [pc, #476]	; (8005124 <HAL_RCC_OscConfig+0x26c>)
 8004f48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f4c:	6013      	str	r3, [r2, #0]
 8004f4e:	e01d      	b.n	8004f8c <HAL_RCC_OscConfig+0xd4>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f58:	d10c      	bne.n	8004f74 <HAL_RCC_OscConfig+0xbc>
 8004f5a:	4b72      	ldr	r3, [pc, #456]	; (8005124 <HAL_RCC_OscConfig+0x26c>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a71      	ldr	r2, [pc, #452]	; (8005124 <HAL_RCC_OscConfig+0x26c>)
 8004f60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f64:	6013      	str	r3, [r2, #0]
 8004f66:	4b6f      	ldr	r3, [pc, #444]	; (8005124 <HAL_RCC_OscConfig+0x26c>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a6e      	ldr	r2, [pc, #440]	; (8005124 <HAL_RCC_OscConfig+0x26c>)
 8004f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f70:	6013      	str	r3, [r2, #0]
 8004f72:	e00b      	b.n	8004f8c <HAL_RCC_OscConfig+0xd4>
 8004f74:	4b6b      	ldr	r3, [pc, #428]	; (8005124 <HAL_RCC_OscConfig+0x26c>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a6a      	ldr	r2, [pc, #424]	; (8005124 <HAL_RCC_OscConfig+0x26c>)
 8004f7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f7e:	6013      	str	r3, [r2, #0]
 8004f80:	4b68      	ldr	r3, [pc, #416]	; (8005124 <HAL_RCC_OscConfig+0x26c>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a67      	ldr	r2, [pc, #412]	; (8005124 <HAL_RCC_OscConfig+0x26c>)
 8004f86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f8a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d013      	beq.n	8004fbc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f94:	f7fd fe5c 	bl	8002c50 <HAL_GetTick>
 8004f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f9a:	e008      	b.n	8004fae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f9c:	f7fd fe58 	bl	8002c50 <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	2b64      	cmp	r3, #100	; 0x64
 8004fa8:	d901      	bls.n	8004fae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e200      	b.n	80053b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fae:	4b5d      	ldr	r3, [pc, #372]	; (8005124 <HAL_RCC_OscConfig+0x26c>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d0f0      	beq.n	8004f9c <HAL_RCC_OscConfig+0xe4>
 8004fba:	e014      	b.n	8004fe6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fbc:	f7fd fe48 	bl	8002c50 <HAL_GetTick>
 8004fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fc2:	e008      	b.n	8004fd6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fc4:	f7fd fe44 	bl	8002c50 <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	2b64      	cmp	r3, #100	; 0x64
 8004fd0:	d901      	bls.n	8004fd6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e1ec      	b.n	80053b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fd6:	4b53      	ldr	r3, [pc, #332]	; (8005124 <HAL_RCC_OscConfig+0x26c>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d1f0      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x10c>
 8004fe2:	e000      	b.n	8004fe6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fe4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 0302 	and.w	r3, r3, #2
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d063      	beq.n	80050ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ff2:	4b4c      	ldr	r3, [pc, #304]	; (8005124 <HAL_RCC_OscConfig+0x26c>)
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	f003 030c 	and.w	r3, r3, #12
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00b      	beq.n	8005016 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004ffe:	4b49      	ldr	r3, [pc, #292]	; (8005124 <HAL_RCC_OscConfig+0x26c>)
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	f003 030c 	and.w	r3, r3, #12
 8005006:	2b08      	cmp	r3, #8
 8005008:	d11c      	bne.n	8005044 <HAL_RCC_OscConfig+0x18c>
 800500a:	4b46      	ldr	r3, [pc, #280]	; (8005124 <HAL_RCC_OscConfig+0x26c>)
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d116      	bne.n	8005044 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005016:	4b43      	ldr	r3, [pc, #268]	; (8005124 <HAL_RCC_OscConfig+0x26c>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0302 	and.w	r3, r3, #2
 800501e:	2b00      	cmp	r3, #0
 8005020:	d005      	beq.n	800502e <HAL_RCC_OscConfig+0x176>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	2b01      	cmp	r3, #1
 8005028:	d001      	beq.n	800502e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e1c0      	b.n	80053b0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800502e:	4b3d      	ldr	r3, [pc, #244]	; (8005124 <HAL_RCC_OscConfig+0x26c>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	695b      	ldr	r3, [r3, #20]
 800503a:	00db      	lsls	r3, r3, #3
 800503c:	4939      	ldr	r1, [pc, #228]	; (8005124 <HAL_RCC_OscConfig+0x26c>)
 800503e:	4313      	orrs	r3, r2
 8005040:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005042:	e03a      	b.n	80050ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d020      	beq.n	800508e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800504c:	4b36      	ldr	r3, [pc, #216]	; (8005128 <HAL_RCC_OscConfig+0x270>)
 800504e:	2201      	movs	r2, #1
 8005050:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005052:	f7fd fdfd 	bl	8002c50 <HAL_GetTick>
 8005056:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005058:	e008      	b.n	800506c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800505a:	f7fd fdf9 	bl	8002c50 <HAL_GetTick>
 800505e:	4602      	mov	r2, r0
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	2b02      	cmp	r3, #2
 8005066:	d901      	bls.n	800506c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005068:	2303      	movs	r3, #3
 800506a:	e1a1      	b.n	80053b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800506c:	4b2d      	ldr	r3, [pc, #180]	; (8005124 <HAL_RCC_OscConfig+0x26c>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0302 	and.w	r3, r3, #2
 8005074:	2b00      	cmp	r3, #0
 8005076:	d0f0      	beq.n	800505a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005078:	4b2a      	ldr	r3, [pc, #168]	; (8005124 <HAL_RCC_OscConfig+0x26c>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	695b      	ldr	r3, [r3, #20]
 8005084:	00db      	lsls	r3, r3, #3
 8005086:	4927      	ldr	r1, [pc, #156]	; (8005124 <HAL_RCC_OscConfig+0x26c>)
 8005088:	4313      	orrs	r3, r2
 800508a:	600b      	str	r3, [r1, #0]
 800508c:	e015      	b.n	80050ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800508e:	4b26      	ldr	r3, [pc, #152]	; (8005128 <HAL_RCC_OscConfig+0x270>)
 8005090:	2200      	movs	r2, #0
 8005092:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005094:	f7fd fddc 	bl	8002c50 <HAL_GetTick>
 8005098:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800509a:	e008      	b.n	80050ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800509c:	f7fd fdd8 	bl	8002c50 <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d901      	bls.n	80050ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e180      	b.n	80053b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050ae:	4b1d      	ldr	r3, [pc, #116]	; (8005124 <HAL_RCC_OscConfig+0x26c>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 0302 	and.w	r3, r3, #2
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d1f0      	bne.n	800509c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 0308 	and.w	r3, r3, #8
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d03a      	beq.n	800513c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d019      	beq.n	8005102 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050ce:	4b17      	ldr	r3, [pc, #92]	; (800512c <HAL_RCC_OscConfig+0x274>)
 80050d0:	2201      	movs	r2, #1
 80050d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050d4:	f7fd fdbc 	bl	8002c50 <HAL_GetTick>
 80050d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050da:	e008      	b.n	80050ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050dc:	f7fd fdb8 	bl	8002c50 <HAL_GetTick>
 80050e0:	4602      	mov	r2, r0
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d901      	bls.n	80050ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80050ea:	2303      	movs	r3, #3
 80050ec:	e160      	b.n	80053b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050ee:	4b0d      	ldr	r3, [pc, #52]	; (8005124 <HAL_RCC_OscConfig+0x26c>)
 80050f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f2:	f003 0302 	and.w	r3, r3, #2
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d0f0      	beq.n	80050dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80050fa:	2001      	movs	r0, #1
 80050fc:	f000 faba 	bl	8005674 <RCC_Delay>
 8005100:	e01c      	b.n	800513c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005102:	4b0a      	ldr	r3, [pc, #40]	; (800512c <HAL_RCC_OscConfig+0x274>)
 8005104:	2200      	movs	r2, #0
 8005106:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005108:	f7fd fda2 	bl	8002c50 <HAL_GetTick>
 800510c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800510e:	e00f      	b.n	8005130 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005110:	f7fd fd9e 	bl	8002c50 <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	2b02      	cmp	r3, #2
 800511c:	d908      	bls.n	8005130 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e146      	b.n	80053b0 <HAL_RCC_OscConfig+0x4f8>
 8005122:	bf00      	nop
 8005124:	40021000 	.word	0x40021000
 8005128:	42420000 	.word	0x42420000
 800512c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005130:	4b92      	ldr	r3, [pc, #584]	; (800537c <HAL_RCC_OscConfig+0x4c4>)
 8005132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005134:	f003 0302 	and.w	r3, r3, #2
 8005138:	2b00      	cmp	r3, #0
 800513a:	d1e9      	bne.n	8005110 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0304 	and.w	r3, r3, #4
 8005144:	2b00      	cmp	r3, #0
 8005146:	f000 80a6 	beq.w	8005296 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800514a:	2300      	movs	r3, #0
 800514c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800514e:	4b8b      	ldr	r3, [pc, #556]	; (800537c <HAL_RCC_OscConfig+0x4c4>)
 8005150:	69db      	ldr	r3, [r3, #28]
 8005152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005156:	2b00      	cmp	r3, #0
 8005158:	d10d      	bne.n	8005176 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800515a:	4b88      	ldr	r3, [pc, #544]	; (800537c <HAL_RCC_OscConfig+0x4c4>)
 800515c:	69db      	ldr	r3, [r3, #28]
 800515e:	4a87      	ldr	r2, [pc, #540]	; (800537c <HAL_RCC_OscConfig+0x4c4>)
 8005160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005164:	61d3      	str	r3, [r2, #28]
 8005166:	4b85      	ldr	r3, [pc, #532]	; (800537c <HAL_RCC_OscConfig+0x4c4>)
 8005168:	69db      	ldr	r3, [r3, #28]
 800516a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800516e:	60bb      	str	r3, [r7, #8]
 8005170:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005172:	2301      	movs	r3, #1
 8005174:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005176:	4b82      	ldr	r3, [pc, #520]	; (8005380 <HAL_RCC_OscConfig+0x4c8>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800517e:	2b00      	cmp	r3, #0
 8005180:	d118      	bne.n	80051b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005182:	4b7f      	ldr	r3, [pc, #508]	; (8005380 <HAL_RCC_OscConfig+0x4c8>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a7e      	ldr	r2, [pc, #504]	; (8005380 <HAL_RCC_OscConfig+0x4c8>)
 8005188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800518c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800518e:	f7fd fd5f 	bl	8002c50 <HAL_GetTick>
 8005192:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005194:	e008      	b.n	80051a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005196:	f7fd fd5b 	bl	8002c50 <HAL_GetTick>
 800519a:	4602      	mov	r2, r0
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	1ad3      	subs	r3, r2, r3
 80051a0:	2b64      	cmp	r3, #100	; 0x64
 80051a2:	d901      	bls.n	80051a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80051a4:	2303      	movs	r3, #3
 80051a6:	e103      	b.n	80053b0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051a8:	4b75      	ldr	r3, [pc, #468]	; (8005380 <HAL_RCC_OscConfig+0x4c8>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d0f0      	beq.n	8005196 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d106      	bne.n	80051ca <HAL_RCC_OscConfig+0x312>
 80051bc:	4b6f      	ldr	r3, [pc, #444]	; (800537c <HAL_RCC_OscConfig+0x4c4>)
 80051be:	6a1b      	ldr	r3, [r3, #32]
 80051c0:	4a6e      	ldr	r2, [pc, #440]	; (800537c <HAL_RCC_OscConfig+0x4c4>)
 80051c2:	f043 0301 	orr.w	r3, r3, #1
 80051c6:	6213      	str	r3, [r2, #32]
 80051c8:	e02d      	b.n	8005226 <HAL_RCC_OscConfig+0x36e>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d10c      	bne.n	80051ec <HAL_RCC_OscConfig+0x334>
 80051d2:	4b6a      	ldr	r3, [pc, #424]	; (800537c <HAL_RCC_OscConfig+0x4c4>)
 80051d4:	6a1b      	ldr	r3, [r3, #32]
 80051d6:	4a69      	ldr	r2, [pc, #420]	; (800537c <HAL_RCC_OscConfig+0x4c4>)
 80051d8:	f023 0301 	bic.w	r3, r3, #1
 80051dc:	6213      	str	r3, [r2, #32]
 80051de:	4b67      	ldr	r3, [pc, #412]	; (800537c <HAL_RCC_OscConfig+0x4c4>)
 80051e0:	6a1b      	ldr	r3, [r3, #32]
 80051e2:	4a66      	ldr	r2, [pc, #408]	; (800537c <HAL_RCC_OscConfig+0x4c4>)
 80051e4:	f023 0304 	bic.w	r3, r3, #4
 80051e8:	6213      	str	r3, [r2, #32]
 80051ea:	e01c      	b.n	8005226 <HAL_RCC_OscConfig+0x36e>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	2b05      	cmp	r3, #5
 80051f2:	d10c      	bne.n	800520e <HAL_RCC_OscConfig+0x356>
 80051f4:	4b61      	ldr	r3, [pc, #388]	; (800537c <HAL_RCC_OscConfig+0x4c4>)
 80051f6:	6a1b      	ldr	r3, [r3, #32]
 80051f8:	4a60      	ldr	r2, [pc, #384]	; (800537c <HAL_RCC_OscConfig+0x4c4>)
 80051fa:	f043 0304 	orr.w	r3, r3, #4
 80051fe:	6213      	str	r3, [r2, #32]
 8005200:	4b5e      	ldr	r3, [pc, #376]	; (800537c <HAL_RCC_OscConfig+0x4c4>)
 8005202:	6a1b      	ldr	r3, [r3, #32]
 8005204:	4a5d      	ldr	r2, [pc, #372]	; (800537c <HAL_RCC_OscConfig+0x4c4>)
 8005206:	f043 0301 	orr.w	r3, r3, #1
 800520a:	6213      	str	r3, [r2, #32]
 800520c:	e00b      	b.n	8005226 <HAL_RCC_OscConfig+0x36e>
 800520e:	4b5b      	ldr	r3, [pc, #364]	; (800537c <HAL_RCC_OscConfig+0x4c4>)
 8005210:	6a1b      	ldr	r3, [r3, #32]
 8005212:	4a5a      	ldr	r2, [pc, #360]	; (800537c <HAL_RCC_OscConfig+0x4c4>)
 8005214:	f023 0301 	bic.w	r3, r3, #1
 8005218:	6213      	str	r3, [r2, #32]
 800521a:	4b58      	ldr	r3, [pc, #352]	; (800537c <HAL_RCC_OscConfig+0x4c4>)
 800521c:	6a1b      	ldr	r3, [r3, #32]
 800521e:	4a57      	ldr	r2, [pc, #348]	; (800537c <HAL_RCC_OscConfig+0x4c4>)
 8005220:	f023 0304 	bic.w	r3, r3, #4
 8005224:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d015      	beq.n	800525a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800522e:	f7fd fd0f 	bl	8002c50 <HAL_GetTick>
 8005232:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005234:	e00a      	b.n	800524c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005236:	f7fd fd0b 	bl	8002c50 <HAL_GetTick>
 800523a:	4602      	mov	r2, r0
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	f241 3288 	movw	r2, #5000	; 0x1388
 8005244:	4293      	cmp	r3, r2
 8005246:	d901      	bls.n	800524c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	e0b1      	b.n	80053b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800524c:	4b4b      	ldr	r3, [pc, #300]	; (800537c <HAL_RCC_OscConfig+0x4c4>)
 800524e:	6a1b      	ldr	r3, [r3, #32]
 8005250:	f003 0302 	and.w	r3, r3, #2
 8005254:	2b00      	cmp	r3, #0
 8005256:	d0ee      	beq.n	8005236 <HAL_RCC_OscConfig+0x37e>
 8005258:	e014      	b.n	8005284 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800525a:	f7fd fcf9 	bl	8002c50 <HAL_GetTick>
 800525e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005260:	e00a      	b.n	8005278 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005262:	f7fd fcf5 	bl	8002c50 <HAL_GetTick>
 8005266:	4602      	mov	r2, r0
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005270:	4293      	cmp	r3, r2
 8005272:	d901      	bls.n	8005278 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005274:	2303      	movs	r3, #3
 8005276:	e09b      	b.n	80053b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005278:	4b40      	ldr	r3, [pc, #256]	; (800537c <HAL_RCC_OscConfig+0x4c4>)
 800527a:	6a1b      	ldr	r3, [r3, #32]
 800527c:	f003 0302 	and.w	r3, r3, #2
 8005280:	2b00      	cmp	r3, #0
 8005282:	d1ee      	bne.n	8005262 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005284:	7dfb      	ldrb	r3, [r7, #23]
 8005286:	2b01      	cmp	r3, #1
 8005288:	d105      	bne.n	8005296 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800528a:	4b3c      	ldr	r3, [pc, #240]	; (800537c <HAL_RCC_OscConfig+0x4c4>)
 800528c:	69db      	ldr	r3, [r3, #28]
 800528e:	4a3b      	ldr	r2, [pc, #236]	; (800537c <HAL_RCC_OscConfig+0x4c4>)
 8005290:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005294:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	69db      	ldr	r3, [r3, #28]
 800529a:	2b00      	cmp	r3, #0
 800529c:	f000 8087 	beq.w	80053ae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80052a0:	4b36      	ldr	r3, [pc, #216]	; (800537c <HAL_RCC_OscConfig+0x4c4>)
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	f003 030c 	and.w	r3, r3, #12
 80052a8:	2b08      	cmp	r3, #8
 80052aa:	d061      	beq.n	8005370 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	69db      	ldr	r3, [r3, #28]
 80052b0:	2b02      	cmp	r3, #2
 80052b2:	d146      	bne.n	8005342 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052b4:	4b33      	ldr	r3, [pc, #204]	; (8005384 <HAL_RCC_OscConfig+0x4cc>)
 80052b6:	2200      	movs	r2, #0
 80052b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052ba:	f7fd fcc9 	bl	8002c50 <HAL_GetTick>
 80052be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052c0:	e008      	b.n	80052d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052c2:	f7fd fcc5 	bl	8002c50 <HAL_GetTick>
 80052c6:	4602      	mov	r2, r0
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	1ad3      	subs	r3, r2, r3
 80052cc:	2b02      	cmp	r3, #2
 80052ce:	d901      	bls.n	80052d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80052d0:	2303      	movs	r3, #3
 80052d2:	e06d      	b.n	80053b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052d4:	4b29      	ldr	r3, [pc, #164]	; (800537c <HAL_RCC_OscConfig+0x4c4>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d1f0      	bne.n	80052c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6a1b      	ldr	r3, [r3, #32]
 80052e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052e8:	d108      	bne.n	80052fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80052ea:	4b24      	ldr	r3, [pc, #144]	; (800537c <HAL_RCC_OscConfig+0x4c4>)
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	4921      	ldr	r1, [pc, #132]	; (800537c <HAL_RCC_OscConfig+0x4c4>)
 80052f8:	4313      	orrs	r3, r2
 80052fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052fc:	4b1f      	ldr	r3, [pc, #124]	; (800537c <HAL_RCC_OscConfig+0x4c4>)
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6a19      	ldr	r1, [r3, #32]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530c:	430b      	orrs	r3, r1
 800530e:	491b      	ldr	r1, [pc, #108]	; (800537c <HAL_RCC_OscConfig+0x4c4>)
 8005310:	4313      	orrs	r3, r2
 8005312:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005314:	4b1b      	ldr	r3, [pc, #108]	; (8005384 <HAL_RCC_OscConfig+0x4cc>)
 8005316:	2201      	movs	r2, #1
 8005318:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800531a:	f7fd fc99 	bl	8002c50 <HAL_GetTick>
 800531e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005320:	e008      	b.n	8005334 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005322:	f7fd fc95 	bl	8002c50 <HAL_GetTick>
 8005326:	4602      	mov	r2, r0
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	2b02      	cmp	r3, #2
 800532e:	d901      	bls.n	8005334 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005330:	2303      	movs	r3, #3
 8005332:	e03d      	b.n	80053b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005334:	4b11      	ldr	r3, [pc, #68]	; (800537c <HAL_RCC_OscConfig+0x4c4>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800533c:	2b00      	cmp	r3, #0
 800533e:	d0f0      	beq.n	8005322 <HAL_RCC_OscConfig+0x46a>
 8005340:	e035      	b.n	80053ae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005342:	4b10      	ldr	r3, [pc, #64]	; (8005384 <HAL_RCC_OscConfig+0x4cc>)
 8005344:	2200      	movs	r2, #0
 8005346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005348:	f7fd fc82 	bl	8002c50 <HAL_GetTick>
 800534c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800534e:	e008      	b.n	8005362 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005350:	f7fd fc7e 	bl	8002c50 <HAL_GetTick>
 8005354:	4602      	mov	r2, r0
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	2b02      	cmp	r3, #2
 800535c:	d901      	bls.n	8005362 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e026      	b.n	80053b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005362:	4b06      	ldr	r3, [pc, #24]	; (800537c <HAL_RCC_OscConfig+0x4c4>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d1f0      	bne.n	8005350 <HAL_RCC_OscConfig+0x498>
 800536e:	e01e      	b.n	80053ae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	69db      	ldr	r3, [r3, #28]
 8005374:	2b01      	cmp	r3, #1
 8005376:	d107      	bne.n	8005388 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e019      	b.n	80053b0 <HAL_RCC_OscConfig+0x4f8>
 800537c:	40021000 	.word	0x40021000
 8005380:	40007000 	.word	0x40007000
 8005384:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005388:	4b0b      	ldr	r3, [pc, #44]	; (80053b8 <HAL_RCC_OscConfig+0x500>)
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a1b      	ldr	r3, [r3, #32]
 8005398:	429a      	cmp	r2, r3
 800539a:	d106      	bne.n	80053aa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d001      	beq.n	80053ae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e000      	b.n	80053b0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80053ae:	2300      	movs	r3, #0
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3718      	adds	r7, #24
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	40021000 	.word	0x40021000

080053bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b084      	sub	sp, #16
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d101      	bne.n	80053d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e0d0      	b.n	8005572 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80053d0:	4b6a      	ldr	r3, [pc, #424]	; (800557c <HAL_RCC_ClockConfig+0x1c0>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0307 	and.w	r3, r3, #7
 80053d8:	683a      	ldr	r2, [r7, #0]
 80053da:	429a      	cmp	r2, r3
 80053dc:	d910      	bls.n	8005400 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053de:	4b67      	ldr	r3, [pc, #412]	; (800557c <HAL_RCC_ClockConfig+0x1c0>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f023 0207 	bic.w	r2, r3, #7
 80053e6:	4965      	ldr	r1, [pc, #404]	; (800557c <HAL_RCC_ClockConfig+0x1c0>)
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053ee:	4b63      	ldr	r3, [pc, #396]	; (800557c <HAL_RCC_ClockConfig+0x1c0>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0307 	and.w	r3, r3, #7
 80053f6:	683a      	ldr	r2, [r7, #0]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d001      	beq.n	8005400 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e0b8      	b.n	8005572 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 0302 	and.w	r3, r3, #2
 8005408:	2b00      	cmp	r3, #0
 800540a:	d020      	beq.n	800544e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0304 	and.w	r3, r3, #4
 8005414:	2b00      	cmp	r3, #0
 8005416:	d005      	beq.n	8005424 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005418:	4b59      	ldr	r3, [pc, #356]	; (8005580 <HAL_RCC_ClockConfig+0x1c4>)
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	4a58      	ldr	r2, [pc, #352]	; (8005580 <HAL_RCC_ClockConfig+0x1c4>)
 800541e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005422:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 0308 	and.w	r3, r3, #8
 800542c:	2b00      	cmp	r3, #0
 800542e:	d005      	beq.n	800543c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005430:	4b53      	ldr	r3, [pc, #332]	; (8005580 <HAL_RCC_ClockConfig+0x1c4>)
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	4a52      	ldr	r2, [pc, #328]	; (8005580 <HAL_RCC_ClockConfig+0x1c4>)
 8005436:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800543a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800543c:	4b50      	ldr	r3, [pc, #320]	; (8005580 <HAL_RCC_ClockConfig+0x1c4>)
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	494d      	ldr	r1, [pc, #308]	; (8005580 <HAL_RCC_ClockConfig+0x1c4>)
 800544a:	4313      	orrs	r3, r2
 800544c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 0301 	and.w	r3, r3, #1
 8005456:	2b00      	cmp	r3, #0
 8005458:	d040      	beq.n	80054dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	2b01      	cmp	r3, #1
 8005460:	d107      	bne.n	8005472 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005462:	4b47      	ldr	r3, [pc, #284]	; (8005580 <HAL_RCC_ClockConfig+0x1c4>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800546a:	2b00      	cmp	r3, #0
 800546c:	d115      	bne.n	800549a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e07f      	b.n	8005572 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	2b02      	cmp	r3, #2
 8005478:	d107      	bne.n	800548a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800547a:	4b41      	ldr	r3, [pc, #260]	; (8005580 <HAL_RCC_ClockConfig+0x1c4>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005482:	2b00      	cmp	r3, #0
 8005484:	d109      	bne.n	800549a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e073      	b.n	8005572 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800548a:	4b3d      	ldr	r3, [pc, #244]	; (8005580 <HAL_RCC_ClockConfig+0x1c4>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0302 	and.w	r3, r3, #2
 8005492:	2b00      	cmp	r3, #0
 8005494:	d101      	bne.n	800549a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e06b      	b.n	8005572 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800549a:	4b39      	ldr	r3, [pc, #228]	; (8005580 <HAL_RCC_ClockConfig+0x1c4>)
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	f023 0203 	bic.w	r2, r3, #3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	4936      	ldr	r1, [pc, #216]	; (8005580 <HAL_RCC_ClockConfig+0x1c4>)
 80054a8:	4313      	orrs	r3, r2
 80054aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80054ac:	f7fd fbd0 	bl	8002c50 <HAL_GetTick>
 80054b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054b2:	e00a      	b.n	80054ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054b4:	f7fd fbcc 	bl	8002c50 <HAL_GetTick>
 80054b8:	4602      	mov	r2, r0
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	f241 3288 	movw	r2, #5000	; 0x1388
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d901      	bls.n	80054ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	e053      	b.n	8005572 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054ca:	4b2d      	ldr	r3, [pc, #180]	; (8005580 <HAL_RCC_ClockConfig+0x1c4>)
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	f003 020c 	and.w	r2, r3, #12
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	429a      	cmp	r2, r3
 80054da:	d1eb      	bne.n	80054b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80054dc:	4b27      	ldr	r3, [pc, #156]	; (800557c <HAL_RCC_ClockConfig+0x1c0>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 0307 	and.w	r3, r3, #7
 80054e4:	683a      	ldr	r2, [r7, #0]
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d210      	bcs.n	800550c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054ea:	4b24      	ldr	r3, [pc, #144]	; (800557c <HAL_RCC_ClockConfig+0x1c0>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f023 0207 	bic.w	r2, r3, #7
 80054f2:	4922      	ldr	r1, [pc, #136]	; (800557c <HAL_RCC_ClockConfig+0x1c0>)
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054fa:	4b20      	ldr	r3, [pc, #128]	; (800557c <HAL_RCC_ClockConfig+0x1c0>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0307 	and.w	r3, r3, #7
 8005502:	683a      	ldr	r2, [r7, #0]
 8005504:	429a      	cmp	r2, r3
 8005506:	d001      	beq.n	800550c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	e032      	b.n	8005572 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 0304 	and.w	r3, r3, #4
 8005514:	2b00      	cmp	r3, #0
 8005516:	d008      	beq.n	800552a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005518:	4b19      	ldr	r3, [pc, #100]	; (8005580 <HAL_RCC_ClockConfig+0x1c4>)
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	4916      	ldr	r1, [pc, #88]	; (8005580 <HAL_RCC_ClockConfig+0x1c4>)
 8005526:	4313      	orrs	r3, r2
 8005528:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0308 	and.w	r3, r3, #8
 8005532:	2b00      	cmp	r3, #0
 8005534:	d009      	beq.n	800554a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005536:	4b12      	ldr	r3, [pc, #72]	; (8005580 <HAL_RCC_ClockConfig+0x1c4>)
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	00db      	lsls	r3, r3, #3
 8005544:	490e      	ldr	r1, [pc, #56]	; (8005580 <HAL_RCC_ClockConfig+0x1c4>)
 8005546:	4313      	orrs	r3, r2
 8005548:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800554a:	f000 f821 	bl	8005590 <HAL_RCC_GetSysClockFreq>
 800554e:	4602      	mov	r2, r0
 8005550:	4b0b      	ldr	r3, [pc, #44]	; (8005580 <HAL_RCC_ClockConfig+0x1c4>)
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	091b      	lsrs	r3, r3, #4
 8005556:	f003 030f 	and.w	r3, r3, #15
 800555a:	490a      	ldr	r1, [pc, #40]	; (8005584 <HAL_RCC_ClockConfig+0x1c8>)
 800555c:	5ccb      	ldrb	r3, [r1, r3]
 800555e:	fa22 f303 	lsr.w	r3, r2, r3
 8005562:	4a09      	ldr	r2, [pc, #36]	; (8005588 <HAL_RCC_ClockConfig+0x1cc>)
 8005564:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005566:	4b09      	ldr	r3, [pc, #36]	; (800558c <HAL_RCC_ClockConfig+0x1d0>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4618      	mov	r0, r3
 800556c:	f7fd fb2e 	bl	8002bcc <HAL_InitTick>

  return HAL_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	3710      	adds	r7, #16
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	40022000 	.word	0x40022000
 8005580:	40021000 	.word	0x40021000
 8005584:	0800a634 	.word	0x0800a634
 8005588:	20000018 	.word	0x20000018
 800558c:	2000001c 	.word	0x2000001c

08005590 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005590:	b480      	push	{r7}
 8005592:	b087      	sub	sp, #28
 8005594:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005596:	2300      	movs	r3, #0
 8005598:	60fb      	str	r3, [r7, #12]
 800559a:	2300      	movs	r3, #0
 800559c:	60bb      	str	r3, [r7, #8]
 800559e:	2300      	movs	r3, #0
 80055a0:	617b      	str	r3, [r7, #20]
 80055a2:	2300      	movs	r3, #0
 80055a4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80055a6:	2300      	movs	r3, #0
 80055a8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80055aa:	4b1e      	ldr	r3, [pc, #120]	; (8005624 <HAL_RCC_GetSysClockFreq+0x94>)
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f003 030c 	and.w	r3, r3, #12
 80055b6:	2b04      	cmp	r3, #4
 80055b8:	d002      	beq.n	80055c0 <HAL_RCC_GetSysClockFreq+0x30>
 80055ba:	2b08      	cmp	r3, #8
 80055bc:	d003      	beq.n	80055c6 <HAL_RCC_GetSysClockFreq+0x36>
 80055be:	e027      	b.n	8005610 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80055c0:	4b19      	ldr	r3, [pc, #100]	; (8005628 <HAL_RCC_GetSysClockFreq+0x98>)
 80055c2:	613b      	str	r3, [r7, #16]
      break;
 80055c4:	e027      	b.n	8005616 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	0c9b      	lsrs	r3, r3, #18
 80055ca:	f003 030f 	and.w	r3, r3, #15
 80055ce:	4a17      	ldr	r2, [pc, #92]	; (800562c <HAL_RCC_GetSysClockFreq+0x9c>)
 80055d0:	5cd3      	ldrb	r3, [r2, r3]
 80055d2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d010      	beq.n	8005600 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80055de:	4b11      	ldr	r3, [pc, #68]	; (8005624 <HAL_RCC_GetSysClockFreq+0x94>)
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	0c5b      	lsrs	r3, r3, #17
 80055e4:	f003 0301 	and.w	r3, r3, #1
 80055e8:	4a11      	ldr	r2, [pc, #68]	; (8005630 <HAL_RCC_GetSysClockFreq+0xa0>)
 80055ea:	5cd3      	ldrb	r3, [r2, r3]
 80055ec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a0d      	ldr	r2, [pc, #52]	; (8005628 <HAL_RCC_GetSysClockFreq+0x98>)
 80055f2:	fb03 f202 	mul.w	r2, r3, r2
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80055fc:	617b      	str	r3, [r7, #20]
 80055fe:	e004      	b.n	800560a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a0c      	ldr	r2, [pc, #48]	; (8005634 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005604:	fb02 f303 	mul.w	r3, r2, r3
 8005608:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	613b      	str	r3, [r7, #16]
      break;
 800560e:	e002      	b.n	8005616 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005610:	4b05      	ldr	r3, [pc, #20]	; (8005628 <HAL_RCC_GetSysClockFreq+0x98>)
 8005612:	613b      	str	r3, [r7, #16]
      break;
 8005614:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005616:	693b      	ldr	r3, [r7, #16]
}
 8005618:	4618      	mov	r0, r3
 800561a:	371c      	adds	r7, #28
 800561c:	46bd      	mov	sp, r7
 800561e:	bc80      	pop	{r7}
 8005620:	4770      	bx	lr
 8005622:	bf00      	nop
 8005624:	40021000 	.word	0x40021000
 8005628:	007a1200 	.word	0x007a1200
 800562c:	0800a64c 	.word	0x0800a64c
 8005630:	0800a65c 	.word	0x0800a65c
 8005634:	003d0900 	.word	0x003d0900

08005638 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005638:	b480      	push	{r7}
 800563a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800563c:	4b02      	ldr	r3, [pc, #8]	; (8005648 <HAL_RCC_GetHCLKFreq+0x10>)
 800563e:	681b      	ldr	r3, [r3, #0]
}
 8005640:	4618      	mov	r0, r3
 8005642:	46bd      	mov	sp, r7
 8005644:	bc80      	pop	{r7}
 8005646:	4770      	bx	lr
 8005648:	20000018 	.word	0x20000018

0800564c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005650:	f7ff fff2 	bl	8005638 <HAL_RCC_GetHCLKFreq>
 8005654:	4602      	mov	r2, r0
 8005656:	4b05      	ldr	r3, [pc, #20]	; (800566c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	0a1b      	lsrs	r3, r3, #8
 800565c:	f003 0307 	and.w	r3, r3, #7
 8005660:	4903      	ldr	r1, [pc, #12]	; (8005670 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005662:	5ccb      	ldrb	r3, [r1, r3]
 8005664:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005668:	4618      	mov	r0, r3
 800566a:	bd80      	pop	{r7, pc}
 800566c:	40021000 	.word	0x40021000
 8005670:	0800a644 	.word	0x0800a644

08005674 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005674:	b480      	push	{r7}
 8005676:	b085      	sub	sp, #20
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800567c:	4b0a      	ldr	r3, [pc, #40]	; (80056a8 <RCC_Delay+0x34>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a0a      	ldr	r2, [pc, #40]	; (80056ac <RCC_Delay+0x38>)
 8005682:	fba2 2303 	umull	r2, r3, r2, r3
 8005686:	0a5b      	lsrs	r3, r3, #9
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	fb02 f303 	mul.w	r3, r2, r3
 800568e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005690:	bf00      	nop
  }
  while (Delay --);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	1e5a      	subs	r2, r3, #1
 8005696:	60fa      	str	r2, [r7, #12]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d1f9      	bne.n	8005690 <RCC_Delay+0x1c>
}
 800569c:	bf00      	nop
 800569e:	bf00      	nop
 80056a0:	3714      	adds	r7, #20
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bc80      	pop	{r7}
 80056a6:	4770      	bx	lr
 80056a8:	20000018 	.word	0x20000018
 80056ac:	10624dd3 	.word	0x10624dd3

080056b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b086      	sub	sp, #24
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80056b8:	2300      	movs	r3, #0
 80056ba:	613b      	str	r3, [r7, #16]
 80056bc:	2300      	movs	r3, #0
 80056be:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 0301 	and.w	r3, r3, #1
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d07d      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80056cc:	2300      	movs	r3, #0
 80056ce:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056d0:	4b4f      	ldr	r3, [pc, #316]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056d2:	69db      	ldr	r3, [r3, #28]
 80056d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d10d      	bne.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056dc:	4b4c      	ldr	r3, [pc, #304]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056de:	69db      	ldr	r3, [r3, #28]
 80056e0:	4a4b      	ldr	r2, [pc, #300]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056e6:	61d3      	str	r3, [r2, #28]
 80056e8:	4b49      	ldr	r3, [pc, #292]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056ea:	69db      	ldr	r3, [r3, #28]
 80056ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056f0:	60bb      	str	r3, [r7, #8]
 80056f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056f4:	2301      	movs	r3, #1
 80056f6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056f8:	4b46      	ldr	r3, [pc, #280]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005700:	2b00      	cmp	r3, #0
 8005702:	d118      	bne.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005704:	4b43      	ldr	r3, [pc, #268]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a42      	ldr	r2, [pc, #264]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800570a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800570e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005710:	f7fd fa9e 	bl	8002c50 <HAL_GetTick>
 8005714:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005716:	e008      	b.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005718:	f7fd fa9a 	bl	8002c50 <HAL_GetTick>
 800571c:	4602      	mov	r2, r0
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	2b64      	cmp	r3, #100	; 0x64
 8005724:	d901      	bls.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005726:	2303      	movs	r3, #3
 8005728:	e06d      	b.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800572a:	4b3a      	ldr	r3, [pc, #232]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005732:	2b00      	cmp	r3, #0
 8005734:	d0f0      	beq.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005736:	4b36      	ldr	r3, [pc, #216]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005738:	6a1b      	ldr	r3, [r3, #32]
 800573a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800573e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d02e      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800574e:	68fa      	ldr	r2, [r7, #12]
 8005750:	429a      	cmp	r2, r3
 8005752:	d027      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005754:	4b2e      	ldr	r3, [pc, #184]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005756:	6a1b      	ldr	r3, [r3, #32]
 8005758:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800575c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800575e:	4b2e      	ldr	r3, [pc, #184]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005760:	2201      	movs	r2, #1
 8005762:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005764:	4b2c      	ldr	r3, [pc, #176]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005766:	2200      	movs	r2, #0
 8005768:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800576a:	4a29      	ldr	r2, [pc, #164]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f003 0301 	and.w	r3, r3, #1
 8005776:	2b00      	cmp	r3, #0
 8005778:	d014      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800577a:	f7fd fa69 	bl	8002c50 <HAL_GetTick>
 800577e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005780:	e00a      	b.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005782:	f7fd fa65 	bl	8002c50 <HAL_GetTick>
 8005786:	4602      	mov	r2, r0
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	1ad3      	subs	r3, r2, r3
 800578c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005790:	4293      	cmp	r3, r2
 8005792:	d901      	bls.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	e036      	b.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005798:	4b1d      	ldr	r3, [pc, #116]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800579a:	6a1b      	ldr	r3, [r3, #32]
 800579c:	f003 0302 	and.w	r3, r3, #2
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d0ee      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80057a4:	4b1a      	ldr	r3, [pc, #104]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057a6:	6a1b      	ldr	r3, [r3, #32]
 80057a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	4917      	ldr	r1, [pc, #92]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057b2:	4313      	orrs	r3, r2
 80057b4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80057b6:	7dfb      	ldrb	r3, [r7, #23]
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d105      	bne.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057bc:	4b14      	ldr	r3, [pc, #80]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057be:	69db      	ldr	r3, [r3, #28]
 80057c0:	4a13      	ldr	r2, [pc, #76]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057c6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 0302 	and.w	r3, r3, #2
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d008      	beq.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80057d4:	4b0e      	ldr	r3, [pc, #56]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	490b      	ldr	r1, [pc, #44]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057e2:	4313      	orrs	r3, r2
 80057e4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 0310 	and.w	r3, r3, #16
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d008      	beq.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80057f2:	4b07      	ldr	r3, [pc, #28]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	4904      	ldr	r1, [pc, #16]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005800:	4313      	orrs	r3, r2
 8005802:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	3718      	adds	r7, #24
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
 800580e:	bf00      	nop
 8005810:	40021000 	.word	0x40021000
 8005814:	40007000 	.word	0x40007000
 8005818:	42420440 	.word	0x42420440

0800581c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b082      	sub	sp, #8
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d101      	bne.n	800582e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e041      	b.n	80058b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005834:	b2db      	uxtb	r3, r3
 8005836:	2b00      	cmp	r3, #0
 8005838:	d106      	bne.n	8005848 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f7fd f870 	bl	8002928 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2202      	movs	r2, #2
 800584c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	3304      	adds	r3, #4
 8005858:	4619      	mov	r1, r3
 800585a:	4610      	mov	r0, r2
 800585c:	f000 f940 	bl	8005ae0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058b0:	2300      	movs	r3, #0
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3708      	adds	r7, #8
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
	...

080058bc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80058bc:	b480      	push	{r7}
 80058be:	b085      	sub	sp, #20
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d001      	beq.n	80058d4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e032      	b.n	800593a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2202      	movs	r2, #2
 80058d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a18      	ldr	r2, [pc, #96]	; (8005944 <HAL_TIM_Base_Start+0x88>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d00e      	beq.n	8005904 <HAL_TIM_Base_Start+0x48>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058ee:	d009      	beq.n	8005904 <HAL_TIM_Base_Start+0x48>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a14      	ldr	r2, [pc, #80]	; (8005948 <HAL_TIM_Base_Start+0x8c>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d004      	beq.n	8005904 <HAL_TIM_Base_Start+0x48>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a13      	ldr	r2, [pc, #76]	; (800594c <HAL_TIM_Base_Start+0x90>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d111      	bne.n	8005928 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	f003 0307 	and.w	r3, r3, #7
 800590e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2b06      	cmp	r3, #6
 8005914:	d010      	beq.n	8005938 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f042 0201 	orr.w	r2, r2, #1
 8005924:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005926:	e007      	b.n	8005938 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f042 0201 	orr.w	r2, r2, #1
 8005936:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005938:	2300      	movs	r3, #0
}
 800593a:	4618      	mov	r0, r3
 800593c:	3714      	adds	r7, #20
 800593e:	46bd      	mov	sp, r7
 8005940:	bc80      	pop	{r7}
 8005942:	4770      	bx	lr
 8005944:	40012c00 	.word	0x40012c00
 8005948:	40000400 	.word	0x40000400
 800594c:	40000800 	.word	0x40000800

08005950 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b084      	sub	sp, #16
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800595a:	2300      	movs	r3, #0
 800595c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005964:	2b01      	cmp	r3, #1
 8005966:	d101      	bne.n	800596c <HAL_TIM_ConfigClockSource+0x1c>
 8005968:	2302      	movs	r3, #2
 800596a:	e0b4      	b.n	8005ad6 <HAL_TIM_ConfigClockSource+0x186>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2202      	movs	r2, #2
 8005978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800598a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005992:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68ba      	ldr	r2, [r7, #8]
 800599a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059a4:	d03e      	beq.n	8005a24 <HAL_TIM_ConfigClockSource+0xd4>
 80059a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059aa:	f200 8087 	bhi.w	8005abc <HAL_TIM_ConfigClockSource+0x16c>
 80059ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059b2:	f000 8086 	beq.w	8005ac2 <HAL_TIM_ConfigClockSource+0x172>
 80059b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059ba:	d87f      	bhi.n	8005abc <HAL_TIM_ConfigClockSource+0x16c>
 80059bc:	2b70      	cmp	r3, #112	; 0x70
 80059be:	d01a      	beq.n	80059f6 <HAL_TIM_ConfigClockSource+0xa6>
 80059c0:	2b70      	cmp	r3, #112	; 0x70
 80059c2:	d87b      	bhi.n	8005abc <HAL_TIM_ConfigClockSource+0x16c>
 80059c4:	2b60      	cmp	r3, #96	; 0x60
 80059c6:	d050      	beq.n	8005a6a <HAL_TIM_ConfigClockSource+0x11a>
 80059c8:	2b60      	cmp	r3, #96	; 0x60
 80059ca:	d877      	bhi.n	8005abc <HAL_TIM_ConfigClockSource+0x16c>
 80059cc:	2b50      	cmp	r3, #80	; 0x50
 80059ce:	d03c      	beq.n	8005a4a <HAL_TIM_ConfigClockSource+0xfa>
 80059d0:	2b50      	cmp	r3, #80	; 0x50
 80059d2:	d873      	bhi.n	8005abc <HAL_TIM_ConfigClockSource+0x16c>
 80059d4:	2b40      	cmp	r3, #64	; 0x40
 80059d6:	d058      	beq.n	8005a8a <HAL_TIM_ConfigClockSource+0x13a>
 80059d8:	2b40      	cmp	r3, #64	; 0x40
 80059da:	d86f      	bhi.n	8005abc <HAL_TIM_ConfigClockSource+0x16c>
 80059dc:	2b30      	cmp	r3, #48	; 0x30
 80059de:	d064      	beq.n	8005aaa <HAL_TIM_ConfigClockSource+0x15a>
 80059e0:	2b30      	cmp	r3, #48	; 0x30
 80059e2:	d86b      	bhi.n	8005abc <HAL_TIM_ConfigClockSource+0x16c>
 80059e4:	2b20      	cmp	r3, #32
 80059e6:	d060      	beq.n	8005aaa <HAL_TIM_ConfigClockSource+0x15a>
 80059e8:	2b20      	cmp	r3, #32
 80059ea:	d867      	bhi.n	8005abc <HAL_TIM_ConfigClockSource+0x16c>
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d05c      	beq.n	8005aaa <HAL_TIM_ConfigClockSource+0x15a>
 80059f0:	2b10      	cmp	r3, #16
 80059f2:	d05a      	beq.n	8005aaa <HAL_TIM_ConfigClockSource+0x15a>
 80059f4:	e062      	b.n	8005abc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005a06:	f000 f944 	bl	8005c92 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005a18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	68ba      	ldr	r2, [r7, #8]
 8005a20:	609a      	str	r2, [r3, #8]
      break;
 8005a22:	e04f      	b.n	8005ac4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005a34:	f000 f92d 	bl	8005c92 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	689a      	ldr	r2, [r3, #8]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a46:	609a      	str	r2, [r3, #8]
      break;
 8005a48:	e03c      	b.n	8005ac4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a56:	461a      	mov	r2, r3
 8005a58:	f000 f8a4 	bl	8005ba4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	2150      	movs	r1, #80	; 0x50
 8005a62:	4618      	mov	r0, r3
 8005a64:	f000 f8fb 	bl	8005c5e <TIM_ITRx_SetConfig>
      break;
 8005a68:	e02c      	b.n	8005ac4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a76:	461a      	mov	r2, r3
 8005a78:	f000 f8c2 	bl	8005c00 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	2160      	movs	r1, #96	; 0x60
 8005a82:	4618      	mov	r0, r3
 8005a84:	f000 f8eb 	bl	8005c5e <TIM_ITRx_SetConfig>
      break;
 8005a88:	e01c      	b.n	8005ac4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a96:	461a      	mov	r2, r3
 8005a98:	f000 f884 	bl	8005ba4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2140      	movs	r1, #64	; 0x40
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f000 f8db 	bl	8005c5e <TIM_ITRx_SetConfig>
      break;
 8005aa8:	e00c      	b.n	8005ac4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	4610      	mov	r0, r2
 8005ab6:	f000 f8d2 	bl	8005c5e <TIM_ITRx_SetConfig>
      break;
 8005aba:	e003      	b.n	8005ac4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	73fb      	strb	r3, [r7, #15]
      break;
 8005ac0:	e000      	b.n	8005ac4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005ac2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3710      	adds	r7, #16
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
	...

08005ae0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b085      	sub	sp, #20
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4a29      	ldr	r2, [pc, #164]	; (8005b98 <TIM_Base_SetConfig+0xb8>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d00b      	beq.n	8005b10 <TIM_Base_SetConfig+0x30>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005afe:	d007      	beq.n	8005b10 <TIM_Base_SetConfig+0x30>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4a26      	ldr	r2, [pc, #152]	; (8005b9c <TIM_Base_SetConfig+0xbc>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d003      	beq.n	8005b10 <TIM_Base_SetConfig+0x30>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a25      	ldr	r2, [pc, #148]	; (8005ba0 <TIM_Base_SetConfig+0xc0>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d108      	bne.n	8005b22 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	68fa      	ldr	r2, [r7, #12]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a1c      	ldr	r2, [pc, #112]	; (8005b98 <TIM_Base_SetConfig+0xb8>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d00b      	beq.n	8005b42 <TIM_Base_SetConfig+0x62>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b30:	d007      	beq.n	8005b42 <TIM_Base_SetConfig+0x62>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a19      	ldr	r2, [pc, #100]	; (8005b9c <TIM_Base_SetConfig+0xbc>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d003      	beq.n	8005b42 <TIM_Base_SetConfig+0x62>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a18      	ldr	r2, [pc, #96]	; (8005ba0 <TIM_Base_SetConfig+0xc0>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d108      	bne.n	8005b54 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	68fa      	ldr	r2, [r7, #12]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	695b      	ldr	r3, [r3, #20]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	689a      	ldr	r2, [r3, #8]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4a07      	ldr	r2, [pc, #28]	; (8005b98 <TIM_Base_SetConfig+0xb8>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d103      	bne.n	8005b88 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	691a      	ldr	r2, [r3, #16]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	615a      	str	r2, [r3, #20]
}
 8005b8e:	bf00      	nop
 8005b90:	3714      	adds	r7, #20
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bc80      	pop	{r7}
 8005b96:	4770      	bx	lr
 8005b98:	40012c00 	.word	0x40012c00
 8005b9c:	40000400 	.word	0x40000400
 8005ba0:	40000800 	.word	0x40000800

08005ba4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b087      	sub	sp, #28
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6a1b      	ldr	r3, [r3, #32]
 8005bb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6a1b      	ldr	r3, [r3, #32]
 8005bba:	f023 0201 	bic.w	r2, r3, #1
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	699b      	ldr	r3, [r3, #24]
 8005bc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005bce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	011b      	lsls	r3, r3, #4
 8005bd4:	693a      	ldr	r2, [r7, #16]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	f023 030a 	bic.w	r3, r3, #10
 8005be0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005be2:	697a      	ldr	r2, [r7, #20]
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	693a      	ldr	r2, [r7, #16]
 8005bee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	697a      	ldr	r2, [r7, #20]
 8005bf4:	621a      	str	r2, [r3, #32]
}
 8005bf6:	bf00      	nop
 8005bf8:	371c      	adds	r7, #28
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bc80      	pop	{r7}
 8005bfe:	4770      	bx	lr

08005c00 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b087      	sub	sp, #28
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	60b9      	str	r1, [r7, #8]
 8005c0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6a1b      	ldr	r3, [r3, #32]
 8005c10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	6a1b      	ldr	r3, [r3, #32]
 8005c16:	f023 0210 	bic.w	r2, r3, #16
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	699b      	ldr	r3, [r3, #24]
 8005c22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	031b      	lsls	r3, r3, #12
 8005c30:	693a      	ldr	r2, [r7, #16]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c3c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	011b      	lsls	r3, r3, #4
 8005c42:	697a      	ldr	r2, [r7, #20]
 8005c44:	4313      	orrs	r3, r2
 8005c46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	693a      	ldr	r2, [r7, #16]
 8005c4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	697a      	ldr	r2, [r7, #20]
 8005c52:	621a      	str	r2, [r3, #32]
}
 8005c54:	bf00      	nop
 8005c56:	371c      	adds	r7, #28
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bc80      	pop	{r7}
 8005c5c:	4770      	bx	lr

08005c5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c5e:	b480      	push	{r7}
 8005c60:	b085      	sub	sp, #20
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6078      	str	r0, [r7, #4]
 8005c66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c76:	683a      	ldr	r2, [r7, #0]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	f043 0307 	orr.w	r3, r3, #7
 8005c80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	68fa      	ldr	r2, [r7, #12]
 8005c86:	609a      	str	r2, [r3, #8]
}
 8005c88:	bf00      	nop
 8005c8a:	3714      	adds	r7, #20
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bc80      	pop	{r7}
 8005c90:	4770      	bx	lr

08005c92 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c92:	b480      	push	{r7}
 8005c94:	b087      	sub	sp, #28
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	60f8      	str	r0, [r7, #12]
 8005c9a:	60b9      	str	r1, [r7, #8]
 8005c9c:	607a      	str	r2, [r7, #4]
 8005c9e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005cac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	021a      	lsls	r2, r3, #8
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	431a      	orrs	r2, r3
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	697a      	ldr	r2, [r7, #20]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	697a      	ldr	r2, [r7, #20]
 8005cc4:	609a      	str	r2, [r3, #8]
}
 8005cc6:	bf00      	nop
 8005cc8:	371c      	adds	r7, #28
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bc80      	pop	{r7}
 8005cce:	4770      	bx	lr

08005cd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b085      	sub	sp, #20
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d101      	bne.n	8005ce8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ce4:	2302      	movs	r3, #2
 8005ce6:	e046      	b.n	8005d76 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2202      	movs	r2, #2
 8005cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	68fa      	ldr	r2, [r7, #12]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	68fa      	ldr	r2, [r7, #12]
 8005d20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a16      	ldr	r2, [pc, #88]	; (8005d80 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d00e      	beq.n	8005d4a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d34:	d009      	beq.n	8005d4a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a12      	ldr	r2, [pc, #72]	; (8005d84 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d004      	beq.n	8005d4a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a10      	ldr	r2, [pc, #64]	; (8005d88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d10c      	bne.n	8005d64 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	68ba      	ldr	r2, [r7, #8]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	68ba      	ldr	r2, [r7, #8]
 8005d62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3714      	adds	r7, #20
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bc80      	pop	{r7}
 8005d7e:	4770      	bx	lr
 8005d80:	40012c00 	.word	0x40012c00
 8005d84:	40000400 	.word	0x40000400
 8005d88:	40000800 	.word	0x40000800

08005d8c <__cvt>:
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d92:	461f      	mov	r7, r3
 8005d94:	bfbb      	ittet	lt
 8005d96:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005d9a:	461f      	movlt	r7, r3
 8005d9c:	2300      	movge	r3, #0
 8005d9e:	232d      	movlt	r3, #45	; 0x2d
 8005da0:	b088      	sub	sp, #32
 8005da2:	4614      	mov	r4, r2
 8005da4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005da6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005da8:	7013      	strb	r3, [r2, #0]
 8005daa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005dac:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005db0:	f023 0820 	bic.w	r8, r3, #32
 8005db4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005db8:	d005      	beq.n	8005dc6 <__cvt+0x3a>
 8005dba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005dbe:	d100      	bne.n	8005dc2 <__cvt+0x36>
 8005dc0:	3501      	adds	r5, #1
 8005dc2:	2302      	movs	r3, #2
 8005dc4:	e000      	b.n	8005dc8 <__cvt+0x3c>
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	aa07      	add	r2, sp, #28
 8005dca:	9204      	str	r2, [sp, #16]
 8005dcc:	aa06      	add	r2, sp, #24
 8005dce:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005dd2:	e9cd 3500 	strd	r3, r5, [sp]
 8005dd6:	4622      	mov	r2, r4
 8005dd8:	463b      	mov	r3, r7
 8005dda:	f001 f871 	bl	8006ec0 <_dtoa_r>
 8005dde:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005de2:	4606      	mov	r6, r0
 8005de4:	d102      	bne.n	8005dec <__cvt+0x60>
 8005de6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005de8:	07db      	lsls	r3, r3, #31
 8005dea:	d522      	bpl.n	8005e32 <__cvt+0xa6>
 8005dec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005df0:	eb06 0905 	add.w	r9, r6, r5
 8005df4:	d110      	bne.n	8005e18 <__cvt+0x8c>
 8005df6:	7833      	ldrb	r3, [r6, #0]
 8005df8:	2b30      	cmp	r3, #48	; 0x30
 8005dfa:	d10a      	bne.n	8005e12 <__cvt+0x86>
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	2300      	movs	r3, #0
 8005e00:	4620      	mov	r0, r4
 8005e02:	4639      	mov	r1, r7
 8005e04:	f7fa fdd0 	bl	80009a8 <__aeabi_dcmpeq>
 8005e08:	b918      	cbnz	r0, 8005e12 <__cvt+0x86>
 8005e0a:	f1c5 0501 	rsb	r5, r5, #1
 8005e0e:	f8ca 5000 	str.w	r5, [sl]
 8005e12:	f8da 3000 	ldr.w	r3, [sl]
 8005e16:	4499      	add	r9, r3
 8005e18:	2200      	movs	r2, #0
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	4620      	mov	r0, r4
 8005e1e:	4639      	mov	r1, r7
 8005e20:	f7fa fdc2 	bl	80009a8 <__aeabi_dcmpeq>
 8005e24:	b108      	cbz	r0, 8005e2a <__cvt+0x9e>
 8005e26:	f8cd 901c 	str.w	r9, [sp, #28]
 8005e2a:	2230      	movs	r2, #48	; 0x30
 8005e2c:	9b07      	ldr	r3, [sp, #28]
 8005e2e:	454b      	cmp	r3, r9
 8005e30:	d307      	bcc.n	8005e42 <__cvt+0xb6>
 8005e32:	4630      	mov	r0, r6
 8005e34:	9b07      	ldr	r3, [sp, #28]
 8005e36:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005e38:	1b9b      	subs	r3, r3, r6
 8005e3a:	6013      	str	r3, [r2, #0]
 8005e3c:	b008      	add	sp, #32
 8005e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e42:	1c59      	adds	r1, r3, #1
 8005e44:	9107      	str	r1, [sp, #28]
 8005e46:	701a      	strb	r2, [r3, #0]
 8005e48:	e7f0      	b.n	8005e2c <__cvt+0xa0>

08005e4a <__exponent>:
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e4e:	2900      	cmp	r1, #0
 8005e50:	f803 2b02 	strb.w	r2, [r3], #2
 8005e54:	bfb6      	itet	lt
 8005e56:	222d      	movlt	r2, #45	; 0x2d
 8005e58:	222b      	movge	r2, #43	; 0x2b
 8005e5a:	4249      	neglt	r1, r1
 8005e5c:	2909      	cmp	r1, #9
 8005e5e:	7042      	strb	r2, [r0, #1]
 8005e60:	dd2a      	ble.n	8005eb8 <__exponent+0x6e>
 8005e62:	f10d 0207 	add.w	r2, sp, #7
 8005e66:	4617      	mov	r7, r2
 8005e68:	260a      	movs	r6, #10
 8005e6a:	fb91 f5f6 	sdiv	r5, r1, r6
 8005e6e:	4694      	mov	ip, r2
 8005e70:	fb06 1415 	mls	r4, r6, r5, r1
 8005e74:	3430      	adds	r4, #48	; 0x30
 8005e76:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005e7a:	460c      	mov	r4, r1
 8005e7c:	2c63      	cmp	r4, #99	; 0x63
 8005e7e:	4629      	mov	r1, r5
 8005e80:	f102 32ff 	add.w	r2, r2, #4294967295
 8005e84:	dcf1      	bgt.n	8005e6a <__exponent+0x20>
 8005e86:	3130      	adds	r1, #48	; 0x30
 8005e88:	f1ac 0402 	sub.w	r4, ip, #2
 8005e8c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005e90:	4622      	mov	r2, r4
 8005e92:	1c41      	adds	r1, r0, #1
 8005e94:	42ba      	cmp	r2, r7
 8005e96:	d30a      	bcc.n	8005eae <__exponent+0x64>
 8005e98:	f10d 0209 	add.w	r2, sp, #9
 8005e9c:	eba2 020c 	sub.w	r2, r2, ip
 8005ea0:	42bc      	cmp	r4, r7
 8005ea2:	bf88      	it	hi
 8005ea4:	2200      	movhi	r2, #0
 8005ea6:	4413      	add	r3, r2
 8005ea8:	1a18      	subs	r0, r3, r0
 8005eaa:	b003      	add	sp, #12
 8005eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005eae:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005eb2:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005eb6:	e7ed      	b.n	8005e94 <__exponent+0x4a>
 8005eb8:	2330      	movs	r3, #48	; 0x30
 8005eba:	3130      	adds	r1, #48	; 0x30
 8005ebc:	7083      	strb	r3, [r0, #2]
 8005ebe:	70c1      	strb	r1, [r0, #3]
 8005ec0:	1d03      	adds	r3, r0, #4
 8005ec2:	e7f1      	b.n	8005ea8 <__exponent+0x5e>

08005ec4 <_printf_float>:
 8005ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ec8:	b091      	sub	sp, #68	; 0x44
 8005eca:	460c      	mov	r4, r1
 8005ecc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005ed0:	4616      	mov	r6, r2
 8005ed2:	461f      	mov	r7, r3
 8005ed4:	4605      	mov	r5, r0
 8005ed6:	f000 fee1 	bl	8006c9c <_localeconv_r>
 8005eda:	6803      	ldr	r3, [r0, #0]
 8005edc:	4618      	mov	r0, r3
 8005ede:	9309      	str	r3, [sp, #36]	; 0x24
 8005ee0:	f7fa f936 	bl	8000150 <strlen>
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	930e      	str	r3, [sp, #56]	; 0x38
 8005ee8:	f8d8 3000 	ldr.w	r3, [r8]
 8005eec:	900a      	str	r0, [sp, #40]	; 0x28
 8005eee:	3307      	adds	r3, #7
 8005ef0:	f023 0307 	bic.w	r3, r3, #7
 8005ef4:	f103 0208 	add.w	r2, r3, #8
 8005ef8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005efc:	f8d4 b000 	ldr.w	fp, [r4]
 8005f00:	f8c8 2000 	str.w	r2, [r8]
 8005f04:	e9d3 a800 	ldrd	sl, r8, [r3]
 8005f08:	4652      	mov	r2, sl
 8005f0a:	4643      	mov	r3, r8
 8005f0c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005f10:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8005f14:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f16:	f04f 32ff 	mov.w	r2, #4294967295
 8005f1a:	4650      	mov	r0, sl
 8005f1c:	4b9c      	ldr	r3, [pc, #624]	; (8006190 <_printf_float+0x2cc>)
 8005f1e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005f20:	f7fa fd74 	bl	8000a0c <__aeabi_dcmpun>
 8005f24:	bb70      	cbnz	r0, 8005f84 <_printf_float+0xc0>
 8005f26:	f04f 32ff 	mov.w	r2, #4294967295
 8005f2a:	4650      	mov	r0, sl
 8005f2c:	4b98      	ldr	r3, [pc, #608]	; (8006190 <_printf_float+0x2cc>)
 8005f2e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005f30:	f7fa fd4e 	bl	80009d0 <__aeabi_dcmple>
 8005f34:	bb30      	cbnz	r0, 8005f84 <_printf_float+0xc0>
 8005f36:	2200      	movs	r2, #0
 8005f38:	2300      	movs	r3, #0
 8005f3a:	4650      	mov	r0, sl
 8005f3c:	4641      	mov	r1, r8
 8005f3e:	f7fa fd3d 	bl	80009bc <__aeabi_dcmplt>
 8005f42:	b110      	cbz	r0, 8005f4a <_printf_float+0x86>
 8005f44:	232d      	movs	r3, #45	; 0x2d
 8005f46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f4a:	4a92      	ldr	r2, [pc, #584]	; (8006194 <_printf_float+0x2d0>)
 8005f4c:	4b92      	ldr	r3, [pc, #584]	; (8006198 <_printf_float+0x2d4>)
 8005f4e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005f52:	bf94      	ite	ls
 8005f54:	4690      	movls	r8, r2
 8005f56:	4698      	movhi	r8, r3
 8005f58:	2303      	movs	r3, #3
 8005f5a:	f04f 0a00 	mov.w	sl, #0
 8005f5e:	6123      	str	r3, [r4, #16]
 8005f60:	f02b 0304 	bic.w	r3, fp, #4
 8005f64:	6023      	str	r3, [r4, #0]
 8005f66:	4633      	mov	r3, r6
 8005f68:	4621      	mov	r1, r4
 8005f6a:	4628      	mov	r0, r5
 8005f6c:	9700      	str	r7, [sp, #0]
 8005f6e:	aa0f      	add	r2, sp, #60	; 0x3c
 8005f70:	f000 f9d6 	bl	8006320 <_printf_common>
 8005f74:	3001      	adds	r0, #1
 8005f76:	f040 8090 	bne.w	800609a <_printf_float+0x1d6>
 8005f7a:	f04f 30ff 	mov.w	r0, #4294967295
 8005f7e:	b011      	add	sp, #68	; 0x44
 8005f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f84:	4652      	mov	r2, sl
 8005f86:	4643      	mov	r3, r8
 8005f88:	4650      	mov	r0, sl
 8005f8a:	4641      	mov	r1, r8
 8005f8c:	f7fa fd3e 	bl	8000a0c <__aeabi_dcmpun>
 8005f90:	b148      	cbz	r0, 8005fa6 <_printf_float+0xe2>
 8005f92:	f1b8 0f00 	cmp.w	r8, #0
 8005f96:	bfb8      	it	lt
 8005f98:	232d      	movlt	r3, #45	; 0x2d
 8005f9a:	4a80      	ldr	r2, [pc, #512]	; (800619c <_printf_float+0x2d8>)
 8005f9c:	bfb8      	it	lt
 8005f9e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005fa2:	4b7f      	ldr	r3, [pc, #508]	; (80061a0 <_printf_float+0x2dc>)
 8005fa4:	e7d3      	b.n	8005f4e <_printf_float+0x8a>
 8005fa6:	6863      	ldr	r3, [r4, #4]
 8005fa8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005fac:	1c5a      	adds	r2, r3, #1
 8005fae:	d142      	bne.n	8006036 <_printf_float+0x172>
 8005fb0:	2306      	movs	r3, #6
 8005fb2:	6063      	str	r3, [r4, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	9206      	str	r2, [sp, #24]
 8005fb8:	aa0e      	add	r2, sp, #56	; 0x38
 8005fba:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005fbe:	aa0d      	add	r2, sp, #52	; 0x34
 8005fc0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005fc4:	9203      	str	r2, [sp, #12]
 8005fc6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005fca:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005fce:	6023      	str	r3, [r4, #0]
 8005fd0:	6863      	ldr	r3, [r4, #4]
 8005fd2:	4652      	mov	r2, sl
 8005fd4:	9300      	str	r3, [sp, #0]
 8005fd6:	4628      	mov	r0, r5
 8005fd8:	4643      	mov	r3, r8
 8005fda:	910b      	str	r1, [sp, #44]	; 0x2c
 8005fdc:	f7ff fed6 	bl	8005d8c <__cvt>
 8005fe0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005fe2:	4680      	mov	r8, r0
 8005fe4:	2947      	cmp	r1, #71	; 0x47
 8005fe6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005fe8:	d108      	bne.n	8005ffc <_printf_float+0x138>
 8005fea:	1cc8      	adds	r0, r1, #3
 8005fec:	db02      	blt.n	8005ff4 <_printf_float+0x130>
 8005fee:	6863      	ldr	r3, [r4, #4]
 8005ff0:	4299      	cmp	r1, r3
 8005ff2:	dd40      	ble.n	8006076 <_printf_float+0x1b2>
 8005ff4:	f1a9 0902 	sub.w	r9, r9, #2
 8005ff8:	fa5f f989 	uxtb.w	r9, r9
 8005ffc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006000:	d81f      	bhi.n	8006042 <_printf_float+0x17e>
 8006002:	464a      	mov	r2, r9
 8006004:	3901      	subs	r1, #1
 8006006:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800600a:	910d      	str	r1, [sp, #52]	; 0x34
 800600c:	f7ff ff1d 	bl	8005e4a <__exponent>
 8006010:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006012:	4682      	mov	sl, r0
 8006014:	1813      	adds	r3, r2, r0
 8006016:	2a01      	cmp	r2, #1
 8006018:	6123      	str	r3, [r4, #16]
 800601a:	dc02      	bgt.n	8006022 <_printf_float+0x15e>
 800601c:	6822      	ldr	r2, [r4, #0]
 800601e:	07d2      	lsls	r2, r2, #31
 8006020:	d501      	bpl.n	8006026 <_printf_float+0x162>
 8006022:	3301      	adds	r3, #1
 8006024:	6123      	str	r3, [r4, #16]
 8006026:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800602a:	2b00      	cmp	r3, #0
 800602c:	d09b      	beq.n	8005f66 <_printf_float+0xa2>
 800602e:	232d      	movs	r3, #45	; 0x2d
 8006030:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006034:	e797      	b.n	8005f66 <_printf_float+0xa2>
 8006036:	2947      	cmp	r1, #71	; 0x47
 8006038:	d1bc      	bne.n	8005fb4 <_printf_float+0xf0>
 800603a:	2b00      	cmp	r3, #0
 800603c:	d1ba      	bne.n	8005fb4 <_printf_float+0xf0>
 800603e:	2301      	movs	r3, #1
 8006040:	e7b7      	b.n	8005fb2 <_printf_float+0xee>
 8006042:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006046:	d118      	bne.n	800607a <_printf_float+0x1b6>
 8006048:	2900      	cmp	r1, #0
 800604a:	6863      	ldr	r3, [r4, #4]
 800604c:	dd0b      	ble.n	8006066 <_printf_float+0x1a2>
 800604e:	6121      	str	r1, [r4, #16]
 8006050:	b913      	cbnz	r3, 8006058 <_printf_float+0x194>
 8006052:	6822      	ldr	r2, [r4, #0]
 8006054:	07d0      	lsls	r0, r2, #31
 8006056:	d502      	bpl.n	800605e <_printf_float+0x19a>
 8006058:	3301      	adds	r3, #1
 800605a:	440b      	add	r3, r1
 800605c:	6123      	str	r3, [r4, #16]
 800605e:	f04f 0a00 	mov.w	sl, #0
 8006062:	65a1      	str	r1, [r4, #88]	; 0x58
 8006064:	e7df      	b.n	8006026 <_printf_float+0x162>
 8006066:	b913      	cbnz	r3, 800606e <_printf_float+0x1aa>
 8006068:	6822      	ldr	r2, [r4, #0]
 800606a:	07d2      	lsls	r2, r2, #31
 800606c:	d501      	bpl.n	8006072 <_printf_float+0x1ae>
 800606e:	3302      	adds	r3, #2
 8006070:	e7f4      	b.n	800605c <_printf_float+0x198>
 8006072:	2301      	movs	r3, #1
 8006074:	e7f2      	b.n	800605c <_printf_float+0x198>
 8006076:	f04f 0967 	mov.w	r9, #103	; 0x67
 800607a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800607c:	4299      	cmp	r1, r3
 800607e:	db05      	blt.n	800608c <_printf_float+0x1c8>
 8006080:	6823      	ldr	r3, [r4, #0]
 8006082:	6121      	str	r1, [r4, #16]
 8006084:	07d8      	lsls	r0, r3, #31
 8006086:	d5ea      	bpl.n	800605e <_printf_float+0x19a>
 8006088:	1c4b      	adds	r3, r1, #1
 800608a:	e7e7      	b.n	800605c <_printf_float+0x198>
 800608c:	2900      	cmp	r1, #0
 800608e:	bfcc      	ite	gt
 8006090:	2201      	movgt	r2, #1
 8006092:	f1c1 0202 	rsble	r2, r1, #2
 8006096:	4413      	add	r3, r2
 8006098:	e7e0      	b.n	800605c <_printf_float+0x198>
 800609a:	6823      	ldr	r3, [r4, #0]
 800609c:	055a      	lsls	r2, r3, #21
 800609e:	d407      	bmi.n	80060b0 <_printf_float+0x1ec>
 80060a0:	6923      	ldr	r3, [r4, #16]
 80060a2:	4642      	mov	r2, r8
 80060a4:	4631      	mov	r1, r6
 80060a6:	4628      	mov	r0, r5
 80060a8:	47b8      	blx	r7
 80060aa:	3001      	adds	r0, #1
 80060ac:	d12b      	bne.n	8006106 <_printf_float+0x242>
 80060ae:	e764      	b.n	8005f7a <_printf_float+0xb6>
 80060b0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80060b4:	f240 80dd 	bls.w	8006272 <_printf_float+0x3ae>
 80060b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80060bc:	2200      	movs	r2, #0
 80060be:	2300      	movs	r3, #0
 80060c0:	f7fa fc72 	bl	80009a8 <__aeabi_dcmpeq>
 80060c4:	2800      	cmp	r0, #0
 80060c6:	d033      	beq.n	8006130 <_printf_float+0x26c>
 80060c8:	2301      	movs	r3, #1
 80060ca:	4631      	mov	r1, r6
 80060cc:	4628      	mov	r0, r5
 80060ce:	4a35      	ldr	r2, [pc, #212]	; (80061a4 <_printf_float+0x2e0>)
 80060d0:	47b8      	blx	r7
 80060d2:	3001      	adds	r0, #1
 80060d4:	f43f af51 	beq.w	8005f7a <_printf_float+0xb6>
 80060d8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80060dc:	429a      	cmp	r2, r3
 80060de:	db02      	blt.n	80060e6 <_printf_float+0x222>
 80060e0:	6823      	ldr	r3, [r4, #0]
 80060e2:	07d8      	lsls	r0, r3, #31
 80060e4:	d50f      	bpl.n	8006106 <_printf_float+0x242>
 80060e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80060ea:	4631      	mov	r1, r6
 80060ec:	4628      	mov	r0, r5
 80060ee:	47b8      	blx	r7
 80060f0:	3001      	adds	r0, #1
 80060f2:	f43f af42 	beq.w	8005f7a <_printf_float+0xb6>
 80060f6:	f04f 0800 	mov.w	r8, #0
 80060fa:	f104 091a 	add.w	r9, r4, #26
 80060fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006100:	3b01      	subs	r3, #1
 8006102:	4543      	cmp	r3, r8
 8006104:	dc09      	bgt.n	800611a <_printf_float+0x256>
 8006106:	6823      	ldr	r3, [r4, #0]
 8006108:	079b      	lsls	r3, r3, #30
 800610a:	f100 8104 	bmi.w	8006316 <_printf_float+0x452>
 800610e:	68e0      	ldr	r0, [r4, #12]
 8006110:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006112:	4298      	cmp	r0, r3
 8006114:	bfb8      	it	lt
 8006116:	4618      	movlt	r0, r3
 8006118:	e731      	b.n	8005f7e <_printf_float+0xba>
 800611a:	2301      	movs	r3, #1
 800611c:	464a      	mov	r2, r9
 800611e:	4631      	mov	r1, r6
 8006120:	4628      	mov	r0, r5
 8006122:	47b8      	blx	r7
 8006124:	3001      	adds	r0, #1
 8006126:	f43f af28 	beq.w	8005f7a <_printf_float+0xb6>
 800612a:	f108 0801 	add.w	r8, r8, #1
 800612e:	e7e6      	b.n	80060fe <_printf_float+0x23a>
 8006130:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006132:	2b00      	cmp	r3, #0
 8006134:	dc38      	bgt.n	80061a8 <_printf_float+0x2e4>
 8006136:	2301      	movs	r3, #1
 8006138:	4631      	mov	r1, r6
 800613a:	4628      	mov	r0, r5
 800613c:	4a19      	ldr	r2, [pc, #100]	; (80061a4 <_printf_float+0x2e0>)
 800613e:	47b8      	blx	r7
 8006140:	3001      	adds	r0, #1
 8006142:	f43f af1a 	beq.w	8005f7a <_printf_float+0xb6>
 8006146:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800614a:	4313      	orrs	r3, r2
 800614c:	d102      	bne.n	8006154 <_printf_float+0x290>
 800614e:	6823      	ldr	r3, [r4, #0]
 8006150:	07d9      	lsls	r1, r3, #31
 8006152:	d5d8      	bpl.n	8006106 <_printf_float+0x242>
 8006154:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006158:	4631      	mov	r1, r6
 800615a:	4628      	mov	r0, r5
 800615c:	47b8      	blx	r7
 800615e:	3001      	adds	r0, #1
 8006160:	f43f af0b 	beq.w	8005f7a <_printf_float+0xb6>
 8006164:	f04f 0900 	mov.w	r9, #0
 8006168:	f104 0a1a 	add.w	sl, r4, #26
 800616c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800616e:	425b      	negs	r3, r3
 8006170:	454b      	cmp	r3, r9
 8006172:	dc01      	bgt.n	8006178 <_printf_float+0x2b4>
 8006174:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006176:	e794      	b.n	80060a2 <_printf_float+0x1de>
 8006178:	2301      	movs	r3, #1
 800617a:	4652      	mov	r2, sl
 800617c:	4631      	mov	r1, r6
 800617e:	4628      	mov	r0, r5
 8006180:	47b8      	blx	r7
 8006182:	3001      	adds	r0, #1
 8006184:	f43f aef9 	beq.w	8005f7a <_printf_float+0xb6>
 8006188:	f109 0901 	add.w	r9, r9, #1
 800618c:	e7ee      	b.n	800616c <_printf_float+0x2a8>
 800618e:	bf00      	nop
 8006190:	7fefffff 	.word	0x7fefffff
 8006194:	0800a65e 	.word	0x0800a65e
 8006198:	0800a662 	.word	0x0800a662
 800619c:	0800a666 	.word	0x0800a666
 80061a0:	0800a66a 	.word	0x0800a66a
 80061a4:	0800a66e 	.word	0x0800a66e
 80061a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80061aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80061ac:	429a      	cmp	r2, r3
 80061ae:	bfa8      	it	ge
 80061b0:	461a      	movge	r2, r3
 80061b2:	2a00      	cmp	r2, #0
 80061b4:	4691      	mov	r9, r2
 80061b6:	dc37      	bgt.n	8006228 <_printf_float+0x364>
 80061b8:	f04f 0b00 	mov.w	fp, #0
 80061bc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80061c0:	f104 021a 	add.w	r2, r4, #26
 80061c4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80061c8:	ebaa 0309 	sub.w	r3, sl, r9
 80061cc:	455b      	cmp	r3, fp
 80061ce:	dc33      	bgt.n	8006238 <_printf_float+0x374>
 80061d0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80061d4:	429a      	cmp	r2, r3
 80061d6:	db3b      	blt.n	8006250 <_printf_float+0x38c>
 80061d8:	6823      	ldr	r3, [r4, #0]
 80061da:	07da      	lsls	r2, r3, #31
 80061dc:	d438      	bmi.n	8006250 <_printf_float+0x38c>
 80061de:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80061e2:	eba2 0903 	sub.w	r9, r2, r3
 80061e6:	eba2 020a 	sub.w	r2, r2, sl
 80061ea:	4591      	cmp	r9, r2
 80061ec:	bfa8      	it	ge
 80061ee:	4691      	movge	r9, r2
 80061f0:	f1b9 0f00 	cmp.w	r9, #0
 80061f4:	dc34      	bgt.n	8006260 <_printf_float+0x39c>
 80061f6:	f04f 0800 	mov.w	r8, #0
 80061fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80061fe:	f104 0a1a 	add.w	sl, r4, #26
 8006202:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006206:	1a9b      	subs	r3, r3, r2
 8006208:	eba3 0309 	sub.w	r3, r3, r9
 800620c:	4543      	cmp	r3, r8
 800620e:	f77f af7a 	ble.w	8006106 <_printf_float+0x242>
 8006212:	2301      	movs	r3, #1
 8006214:	4652      	mov	r2, sl
 8006216:	4631      	mov	r1, r6
 8006218:	4628      	mov	r0, r5
 800621a:	47b8      	blx	r7
 800621c:	3001      	adds	r0, #1
 800621e:	f43f aeac 	beq.w	8005f7a <_printf_float+0xb6>
 8006222:	f108 0801 	add.w	r8, r8, #1
 8006226:	e7ec      	b.n	8006202 <_printf_float+0x33e>
 8006228:	4613      	mov	r3, r2
 800622a:	4631      	mov	r1, r6
 800622c:	4642      	mov	r2, r8
 800622e:	4628      	mov	r0, r5
 8006230:	47b8      	blx	r7
 8006232:	3001      	adds	r0, #1
 8006234:	d1c0      	bne.n	80061b8 <_printf_float+0x2f4>
 8006236:	e6a0      	b.n	8005f7a <_printf_float+0xb6>
 8006238:	2301      	movs	r3, #1
 800623a:	4631      	mov	r1, r6
 800623c:	4628      	mov	r0, r5
 800623e:	920b      	str	r2, [sp, #44]	; 0x2c
 8006240:	47b8      	blx	r7
 8006242:	3001      	adds	r0, #1
 8006244:	f43f ae99 	beq.w	8005f7a <_printf_float+0xb6>
 8006248:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800624a:	f10b 0b01 	add.w	fp, fp, #1
 800624e:	e7b9      	b.n	80061c4 <_printf_float+0x300>
 8006250:	4631      	mov	r1, r6
 8006252:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006256:	4628      	mov	r0, r5
 8006258:	47b8      	blx	r7
 800625a:	3001      	adds	r0, #1
 800625c:	d1bf      	bne.n	80061de <_printf_float+0x31a>
 800625e:	e68c      	b.n	8005f7a <_printf_float+0xb6>
 8006260:	464b      	mov	r3, r9
 8006262:	4631      	mov	r1, r6
 8006264:	4628      	mov	r0, r5
 8006266:	eb08 020a 	add.w	r2, r8, sl
 800626a:	47b8      	blx	r7
 800626c:	3001      	adds	r0, #1
 800626e:	d1c2      	bne.n	80061f6 <_printf_float+0x332>
 8006270:	e683      	b.n	8005f7a <_printf_float+0xb6>
 8006272:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006274:	2a01      	cmp	r2, #1
 8006276:	dc01      	bgt.n	800627c <_printf_float+0x3b8>
 8006278:	07db      	lsls	r3, r3, #31
 800627a:	d539      	bpl.n	80062f0 <_printf_float+0x42c>
 800627c:	2301      	movs	r3, #1
 800627e:	4642      	mov	r2, r8
 8006280:	4631      	mov	r1, r6
 8006282:	4628      	mov	r0, r5
 8006284:	47b8      	blx	r7
 8006286:	3001      	adds	r0, #1
 8006288:	f43f ae77 	beq.w	8005f7a <_printf_float+0xb6>
 800628c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006290:	4631      	mov	r1, r6
 8006292:	4628      	mov	r0, r5
 8006294:	47b8      	blx	r7
 8006296:	3001      	adds	r0, #1
 8006298:	f43f ae6f 	beq.w	8005f7a <_printf_float+0xb6>
 800629c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80062a0:	2200      	movs	r2, #0
 80062a2:	2300      	movs	r3, #0
 80062a4:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 80062a8:	f7fa fb7e 	bl	80009a8 <__aeabi_dcmpeq>
 80062ac:	b9d8      	cbnz	r0, 80062e6 <_printf_float+0x422>
 80062ae:	f109 33ff 	add.w	r3, r9, #4294967295
 80062b2:	f108 0201 	add.w	r2, r8, #1
 80062b6:	4631      	mov	r1, r6
 80062b8:	4628      	mov	r0, r5
 80062ba:	47b8      	blx	r7
 80062bc:	3001      	adds	r0, #1
 80062be:	d10e      	bne.n	80062de <_printf_float+0x41a>
 80062c0:	e65b      	b.n	8005f7a <_printf_float+0xb6>
 80062c2:	2301      	movs	r3, #1
 80062c4:	464a      	mov	r2, r9
 80062c6:	4631      	mov	r1, r6
 80062c8:	4628      	mov	r0, r5
 80062ca:	47b8      	blx	r7
 80062cc:	3001      	adds	r0, #1
 80062ce:	f43f ae54 	beq.w	8005f7a <_printf_float+0xb6>
 80062d2:	f108 0801 	add.w	r8, r8, #1
 80062d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80062d8:	3b01      	subs	r3, #1
 80062da:	4543      	cmp	r3, r8
 80062dc:	dcf1      	bgt.n	80062c2 <_printf_float+0x3fe>
 80062de:	4653      	mov	r3, sl
 80062e0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80062e4:	e6de      	b.n	80060a4 <_printf_float+0x1e0>
 80062e6:	f04f 0800 	mov.w	r8, #0
 80062ea:	f104 091a 	add.w	r9, r4, #26
 80062ee:	e7f2      	b.n	80062d6 <_printf_float+0x412>
 80062f0:	2301      	movs	r3, #1
 80062f2:	4642      	mov	r2, r8
 80062f4:	e7df      	b.n	80062b6 <_printf_float+0x3f2>
 80062f6:	2301      	movs	r3, #1
 80062f8:	464a      	mov	r2, r9
 80062fa:	4631      	mov	r1, r6
 80062fc:	4628      	mov	r0, r5
 80062fe:	47b8      	blx	r7
 8006300:	3001      	adds	r0, #1
 8006302:	f43f ae3a 	beq.w	8005f7a <_printf_float+0xb6>
 8006306:	f108 0801 	add.w	r8, r8, #1
 800630a:	68e3      	ldr	r3, [r4, #12]
 800630c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800630e:	1a5b      	subs	r3, r3, r1
 8006310:	4543      	cmp	r3, r8
 8006312:	dcf0      	bgt.n	80062f6 <_printf_float+0x432>
 8006314:	e6fb      	b.n	800610e <_printf_float+0x24a>
 8006316:	f04f 0800 	mov.w	r8, #0
 800631a:	f104 0919 	add.w	r9, r4, #25
 800631e:	e7f4      	b.n	800630a <_printf_float+0x446>

08006320 <_printf_common>:
 8006320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006324:	4616      	mov	r6, r2
 8006326:	4699      	mov	r9, r3
 8006328:	688a      	ldr	r2, [r1, #8]
 800632a:	690b      	ldr	r3, [r1, #16]
 800632c:	4607      	mov	r7, r0
 800632e:	4293      	cmp	r3, r2
 8006330:	bfb8      	it	lt
 8006332:	4613      	movlt	r3, r2
 8006334:	6033      	str	r3, [r6, #0]
 8006336:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800633a:	460c      	mov	r4, r1
 800633c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006340:	b10a      	cbz	r2, 8006346 <_printf_common+0x26>
 8006342:	3301      	adds	r3, #1
 8006344:	6033      	str	r3, [r6, #0]
 8006346:	6823      	ldr	r3, [r4, #0]
 8006348:	0699      	lsls	r1, r3, #26
 800634a:	bf42      	ittt	mi
 800634c:	6833      	ldrmi	r3, [r6, #0]
 800634e:	3302      	addmi	r3, #2
 8006350:	6033      	strmi	r3, [r6, #0]
 8006352:	6825      	ldr	r5, [r4, #0]
 8006354:	f015 0506 	ands.w	r5, r5, #6
 8006358:	d106      	bne.n	8006368 <_printf_common+0x48>
 800635a:	f104 0a19 	add.w	sl, r4, #25
 800635e:	68e3      	ldr	r3, [r4, #12]
 8006360:	6832      	ldr	r2, [r6, #0]
 8006362:	1a9b      	subs	r3, r3, r2
 8006364:	42ab      	cmp	r3, r5
 8006366:	dc2b      	bgt.n	80063c0 <_printf_common+0xa0>
 8006368:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800636c:	1e13      	subs	r3, r2, #0
 800636e:	6822      	ldr	r2, [r4, #0]
 8006370:	bf18      	it	ne
 8006372:	2301      	movne	r3, #1
 8006374:	0692      	lsls	r2, r2, #26
 8006376:	d430      	bmi.n	80063da <_printf_common+0xba>
 8006378:	4649      	mov	r1, r9
 800637a:	4638      	mov	r0, r7
 800637c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006380:	47c0      	blx	r8
 8006382:	3001      	adds	r0, #1
 8006384:	d023      	beq.n	80063ce <_printf_common+0xae>
 8006386:	6823      	ldr	r3, [r4, #0]
 8006388:	6922      	ldr	r2, [r4, #16]
 800638a:	f003 0306 	and.w	r3, r3, #6
 800638e:	2b04      	cmp	r3, #4
 8006390:	bf14      	ite	ne
 8006392:	2500      	movne	r5, #0
 8006394:	6833      	ldreq	r3, [r6, #0]
 8006396:	f04f 0600 	mov.w	r6, #0
 800639a:	bf08      	it	eq
 800639c:	68e5      	ldreq	r5, [r4, #12]
 800639e:	f104 041a 	add.w	r4, r4, #26
 80063a2:	bf08      	it	eq
 80063a4:	1aed      	subeq	r5, r5, r3
 80063a6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80063aa:	bf08      	it	eq
 80063ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80063b0:	4293      	cmp	r3, r2
 80063b2:	bfc4      	itt	gt
 80063b4:	1a9b      	subgt	r3, r3, r2
 80063b6:	18ed      	addgt	r5, r5, r3
 80063b8:	42b5      	cmp	r5, r6
 80063ba:	d11a      	bne.n	80063f2 <_printf_common+0xd2>
 80063bc:	2000      	movs	r0, #0
 80063be:	e008      	b.n	80063d2 <_printf_common+0xb2>
 80063c0:	2301      	movs	r3, #1
 80063c2:	4652      	mov	r2, sl
 80063c4:	4649      	mov	r1, r9
 80063c6:	4638      	mov	r0, r7
 80063c8:	47c0      	blx	r8
 80063ca:	3001      	adds	r0, #1
 80063cc:	d103      	bne.n	80063d6 <_printf_common+0xb6>
 80063ce:	f04f 30ff 	mov.w	r0, #4294967295
 80063d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063d6:	3501      	adds	r5, #1
 80063d8:	e7c1      	b.n	800635e <_printf_common+0x3e>
 80063da:	2030      	movs	r0, #48	; 0x30
 80063dc:	18e1      	adds	r1, r4, r3
 80063de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80063e2:	1c5a      	adds	r2, r3, #1
 80063e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80063e8:	4422      	add	r2, r4
 80063ea:	3302      	adds	r3, #2
 80063ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80063f0:	e7c2      	b.n	8006378 <_printf_common+0x58>
 80063f2:	2301      	movs	r3, #1
 80063f4:	4622      	mov	r2, r4
 80063f6:	4649      	mov	r1, r9
 80063f8:	4638      	mov	r0, r7
 80063fa:	47c0      	blx	r8
 80063fc:	3001      	adds	r0, #1
 80063fe:	d0e6      	beq.n	80063ce <_printf_common+0xae>
 8006400:	3601      	adds	r6, #1
 8006402:	e7d9      	b.n	80063b8 <_printf_common+0x98>

08006404 <_printf_i>:
 8006404:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006408:	7e0f      	ldrb	r7, [r1, #24]
 800640a:	4691      	mov	r9, r2
 800640c:	2f78      	cmp	r7, #120	; 0x78
 800640e:	4680      	mov	r8, r0
 8006410:	460c      	mov	r4, r1
 8006412:	469a      	mov	sl, r3
 8006414:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006416:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800641a:	d807      	bhi.n	800642c <_printf_i+0x28>
 800641c:	2f62      	cmp	r7, #98	; 0x62
 800641e:	d80a      	bhi.n	8006436 <_printf_i+0x32>
 8006420:	2f00      	cmp	r7, #0
 8006422:	f000 80d5 	beq.w	80065d0 <_printf_i+0x1cc>
 8006426:	2f58      	cmp	r7, #88	; 0x58
 8006428:	f000 80c1 	beq.w	80065ae <_printf_i+0x1aa>
 800642c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006430:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006434:	e03a      	b.n	80064ac <_printf_i+0xa8>
 8006436:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800643a:	2b15      	cmp	r3, #21
 800643c:	d8f6      	bhi.n	800642c <_printf_i+0x28>
 800643e:	a101      	add	r1, pc, #4	; (adr r1, 8006444 <_printf_i+0x40>)
 8006440:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006444:	0800649d 	.word	0x0800649d
 8006448:	080064b1 	.word	0x080064b1
 800644c:	0800642d 	.word	0x0800642d
 8006450:	0800642d 	.word	0x0800642d
 8006454:	0800642d 	.word	0x0800642d
 8006458:	0800642d 	.word	0x0800642d
 800645c:	080064b1 	.word	0x080064b1
 8006460:	0800642d 	.word	0x0800642d
 8006464:	0800642d 	.word	0x0800642d
 8006468:	0800642d 	.word	0x0800642d
 800646c:	0800642d 	.word	0x0800642d
 8006470:	080065b7 	.word	0x080065b7
 8006474:	080064dd 	.word	0x080064dd
 8006478:	08006571 	.word	0x08006571
 800647c:	0800642d 	.word	0x0800642d
 8006480:	0800642d 	.word	0x0800642d
 8006484:	080065d9 	.word	0x080065d9
 8006488:	0800642d 	.word	0x0800642d
 800648c:	080064dd 	.word	0x080064dd
 8006490:	0800642d 	.word	0x0800642d
 8006494:	0800642d 	.word	0x0800642d
 8006498:	08006579 	.word	0x08006579
 800649c:	682b      	ldr	r3, [r5, #0]
 800649e:	1d1a      	adds	r2, r3, #4
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	602a      	str	r2, [r5, #0]
 80064a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80064ac:	2301      	movs	r3, #1
 80064ae:	e0a0      	b.n	80065f2 <_printf_i+0x1ee>
 80064b0:	6820      	ldr	r0, [r4, #0]
 80064b2:	682b      	ldr	r3, [r5, #0]
 80064b4:	0607      	lsls	r7, r0, #24
 80064b6:	f103 0104 	add.w	r1, r3, #4
 80064ba:	6029      	str	r1, [r5, #0]
 80064bc:	d501      	bpl.n	80064c2 <_printf_i+0xbe>
 80064be:	681e      	ldr	r6, [r3, #0]
 80064c0:	e003      	b.n	80064ca <_printf_i+0xc6>
 80064c2:	0646      	lsls	r6, r0, #25
 80064c4:	d5fb      	bpl.n	80064be <_printf_i+0xba>
 80064c6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80064ca:	2e00      	cmp	r6, #0
 80064cc:	da03      	bge.n	80064d6 <_printf_i+0xd2>
 80064ce:	232d      	movs	r3, #45	; 0x2d
 80064d0:	4276      	negs	r6, r6
 80064d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064d6:	230a      	movs	r3, #10
 80064d8:	4859      	ldr	r0, [pc, #356]	; (8006640 <_printf_i+0x23c>)
 80064da:	e012      	b.n	8006502 <_printf_i+0xfe>
 80064dc:	682b      	ldr	r3, [r5, #0]
 80064de:	6820      	ldr	r0, [r4, #0]
 80064e0:	1d19      	adds	r1, r3, #4
 80064e2:	6029      	str	r1, [r5, #0]
 80064e4:	0605      	lsls	r5, r0, #24
 80064e6:	d501      	bpl.n	80064ec <_printf_i+0xe8>
 80064e8:	681e      	ldr	r6, [r3, #0]
 80064ea:	e002      	b.n	80064f2 <_printf_i+0xee>
 80064ec:	0641      	lsls	r1, r0, #25
 80064ee:	d5fb      	bpl.n	80064e8 <_printf_i+0xe4>
 80064f0:	881e      	ldrh	r6, [r3, #0]
 80064f2:	2f6f      	cmp	r7, #111	; 0x6f
 80064f4:	bf0c      	ite	eq
 80064f6:	2308      	moveq	r3, #8
 80064f8:	230a      	movne	r3, #10
 80064fa:	4851      	ldr	r0, [pc, #324]	; (8006640 <_printf_i+0x23c>)
 80064fc:	2100      	movs	r1, #0
 80064fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006502:	6865      	ldr	r5, [r4, #4]
 8006504:	2d00      	cmp	r5, #0
 8006506:	bfa8      	it	ge
 8006508:	6821      	ldrge	r1, [r4, #0]
 800650a:	60a5      	str	r5, [r4, #8]
 800650c:	bfa4      	itt	ge
 800650e:	f021 0104 	bicge.w	r1, r1, #4
 8006512:	6021      	strge	r1, [r4, #0]
 8006514:	b90e      	cbnz	r6, 800651a <_printf_i+0x116>
 8006516:	2d00      	cmp	r5, #0
 8006518:	d04b      	beq.n	80065b2 <_printf_i+0x1ae>
 800651a:	4615      	mov	r5, r2
 800651c:	fbb6 f1f3 	udiv	r1, r6, r3
 8006520:	fb03 6711 	mls	r7, r3, r1, r6
 8006524:	5dc7      	ldrb	r7, [r0, r7]
 8006526:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800652a:	4637      	mov	r7, r6
 800652c:	42bb      	cmp	r3, r7
 800652e:	460e      	mov	r6, r1
 8006530:	d9f4      	bls.n	800651c <_printf_i+0x118>
 8006532:	2b08      	cmp	r3, #8
 8006534:	d10b      	bne.n	800654e <_printf_i+0x14a>
 8006536:	6823      	ldr	r3, [r4, #0]
 8006538:	07de      	lsls	r6, r3, #31
 800653a:	d508      	bpl.n	800654e <_printf_i+0x14a>
 800653c:	6923      	ldr	r3, [r4, #16]
 800653e:	6861      	ldr	r1, [r4, #4]
 8006540:	4299      	cmp	r1, r3
 8006542:	bfde      	ittt	le
 8006544:	2330      	movle	r3, #48	; 0x30
 8006546:	f805 3c01 	strble.w	r3, [r5, #-1]
 800654a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800654e:	1b52      	subs	r2, r2, r5
 8006550:	6122      	str	r2, [r4, #16]
 8006552:	464b      	mov	r3, r9
 8006554:	4621      	mov	r1, r4
 8006556:	4640      	mov	r0, r8
 8006558:	f8cd a000 	str.w	sl, [sp]
 800655c:	aa03      	add	r2, sp, #12
 800655e:	f7ff fedf 	bl	8006320 <_printf_common>
 8006562:	3001      	adds	r0, #1
 8006564:	d14a      	bne.n	80065fc <_printf_i+0x1f8>
 8006566:	f04f 30ff 	mov.w	r0, #4294967295
 800656a:	b004      	add	sp, #16
 800656c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006570:	6823      	ldr	r3, [r4, #0]
 8006572:	f043 0320 	orr.w	r3, r3, #32
 8006576:	6023      	str	r3, [r4, #0]
 8006578:	2778      	movs	r7, #120	; 0x78
 800657a:	4832      	ldr	r0, [pc, #200]	; (8006644 <_printf_i+0x240>)
 800657c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006580:	6823      	ldr	r3, [r4, #0]
 8006582:	6829      	ldr	r1, [r5, #0]
 8006584:	061f      	lsls	r7, r3, #24
 8006586:	f851 6b04 	ldr.w	r6, [r1], #4
 800658a:	d402      	bmi.n	8006592 <_printf_i+0x18e>
 800658c:	065f      	lsls	r7, r3, #25
 800658e:	bf48      	it	mi
 8006590:	b2b6      	uxthmi	r6, r6
 8006592:	07df      	lsls	r7, r3, #31
 8006594:	bf48      	it	mi
 8006596:	f043 0320 	orrmi.w	r3, r3, #32
 800659a:	6029      	str	r1, [r5, #0]
 800659c:	bf48      	it	mi
 800659e:	6023      	strmi	r3, [r4, #0]
 80065a0:	b91e      	cbnz	r6, 80065aa <_printf_i+0x1a6>
 80065a2:	6823      	ldr	r3, [r4, #0]
 80065a4:	f023 0320 	bic.w	r3, r3, #32
 80065a8:	6023      	str	r3, [r4, #0]
 80065aa:	2310      	movs	r3, #16
 80065ac:	e7a6      	b.n	80064fc <_printf_i+0xf8>
 80065ae:	4824      	ldr	r0, [pc, #144]	; (8006640 <_printf_i+0x23c>)
 80065b0:	e7e4      	b.n	800657c <_printf_i+0x178>
 80065b2:	4615      	mov	r5, r2
 80065b4:	e7bd      	b.n	8006532 <_printf_i+0x12e>
 80065b6:	682b      	ldr	r3, [r5, #0]
 80065b8:	6826      	ldr	r6, [r4, #0]
 80065ba:	1d18      	adds	r0, r3, #4
 80065bc:	6961      	ldr	r1, [r4, #20]
 80065be:	6028      	str	r0, [r5, #0]
 80065c0:	0635      	lsls	r5, r6, #24
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	d501      	bpl.n	80065ca <_printf_i+0x1c6>
 80065c6:	6019      	str	r1, [r3, #0]
 80065c8:	e002      	b.n	80065d0 <_printf_i+0x1cc>
 80065ca:	0670      	lsls	r0, r6, #25
 80065cc:	d5fb      	bpl.n	80065c6 <_printf_i+0x1c2>
 80065ce:	8019      	strh	r1, [r3, #0]
 80065d0:	2300      	movs	r3, #0
 80065d2:	4615      	mov	r5, r2
 80065d4:	6123      	str	r3, [r4, #16]
 80065d6:	e7bc      	b.n	8006552 <_printf_i+0x14e>
 80065d8:	682b      	ldr	r3, [r5, #0]
 80065da:	2100      	movs	r1, #0
 80065dc:	1d1a      	adds	r2, r3, #4
 80065de:	602a      	str	r2, [r5, #0]
 80065e0:	681d      	ldr	r5, [r3, #0]
 80065e2:	6862      	ldr	r2, [r4, #4]
 80065e4:	4628      	mov	r0, r5
 80065e6:	f000 fbcf 	bl	8006d88 <memchr>
 80065ea:	b108      	cbz	r0, 80065f0 <_printf_i+0x1ec>
 80065ec:	1b40      	subs	r0, r0, r5
 80065ee:	6060      	str	r0, [r4, #4]
 80065f0:	6863      	ldr	r3, [r4, #4]
 80065f2:	6123      	str	r3, [r4, #16]
 80065f4:	2300      	movs	r3, #0
 80065f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065fa:	e7aa      	b.n	8006552 <_printf_i+0x14e>
 80065fc:	462a      	mov	r2, r5
 80065fe:	4649      	mov	r1, r9
 8006600:	4640      	mov	r0, r8
 8006602:	6923      	ldr	r3, [r4, #16]
 8006604:	47d0      	blx	sl
 8006606:	3001      	adds	r0, #1
 8006608:	d0ad      	beq.n	8006566 <_printf_i+0x162>
 800660a:	6823      	ldr	r3, [r4, #0]
 800660c:	079b      	lsls	r3, r3, #30
 800660e:	d413      	bmi.n	8006638 <_printf_i+0x234>
 8006610:	68e0      	ldr	r0, [r4, #12]
 8006612:	9b03      	ldr	r3, [sp, #12]
 8006614:	4298      	cmp	r0, r3
 8006616:	bfb8      	it	lt
 8006618:	4618      	movlt	r0, r3
 800661a:	e7a6      	b.n	800656a <_printf_i+0x166>
 800661c:	2301      	movs	r3, #1
 800661e:	4632      	mov	r2, r6
 8006620:	4649      	mov	r1, r9
 8006622:	4640      	mov	r0, r8
 8006624:	47d0      	blx	sl
 8006626:	3001      	adds	r0, #1
 8006628:	d09d      	beq.n	8006566 <_printf_i+0x162>
 800662a:	3501      	adds	r5, #1
 800662c:	68e3      	ldr	r3, [r4, #12]
 800662e:	9903      	ldr	r1, [sp, #12]
 8006630:	1a5b      	subs	r3, r3, r1
 8006632:	42ab      	cmp	r3, r5
 8006634:	dcf2      	bgt.n	800661c <_printf_i+0x218>
 8006636:	e7eb      	b.n	8006610 <_printf_i+0x20c>
 8006638:	2500      	movs	r5, #0
 800663a:	f104 0619 	add.w	r6, r4, #25
 800663e:	e7f5      	b.n	800662c <_printf_i+0x228>
 8006640:	0800a670 	.word	0x0800a670
 8006644:	0800a681 	.word	0x0800a681

08006648 <_scanf_float>:
 8006648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800664c:	b087      	sub	sp, #28
 800664e:	9303      	str	r3, [sp, #12]
 8006650:	688b      	ldr	r3, [r1, #8]
 8006652:	4617      	mov	r7, r2
 8006654:	1e5a      	subs	r2, r3, #1
 8006656:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800665a:	bf85      	ittet	hi
 800665c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006660:	195b      	addhi	r3, r3, r5
 8006662:	2300      	movls	r3, #0
 8006664:	9302      	strhi	r3, [sp, #8]
 8006666:	bf88      	it	hi
 8006668:	f240 135d 	movwhi	r3, #349	; 0x15d
 800666c:	468b      	mov	fp, r1
 800666e:	f04f 0500 	mov.w	r5, #0
 8006672:	bf8c      	ite	hi
 8006674:	608b      	strhi	r3, [r1, #8]
 8006676:	9302      	strls	r3, [sp, #8]
 8006678:	680b      	ldr	r3, [r1, #0]
 800667a:	4680      	mov	r8, r0
 800667c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006680:	f84b 3b1c 	str.w	r3, [fp], #28
 8006684:	460c      	mov	r4, r1
 8006686:	465e      	mov	r6, fp
 8006688:	46aa      	mov	sl, r5
 800668a:	46a9      	mov	r9, r5
 800668c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006690:	9501      	str	r5, [sp, #4]
 8006692:	68a2      	ldr	r2, [r4, #8]
 8006694:	b152      	cbz	r2, 80066ac <_scanf_float+0x64>
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	2b4e      	cmp	r3, #78	; 0x4e
 800669c:	d864      	bhi.n	8006768 <_scanf_float+0x120>
 800669e:	2b40      	cmp	r3, #64	; 0x40
 80066a0:	d83c      	bhi.n	800671c <_scanf_float+0xd4>
 80066a2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80066a6:	b2c8      	uxtb	r0, r1
 80066a8:	280e      	cmp	r0, #14
 80066aa:	d93a      	bls.n	8006722 <_scanf_float+0xda>
 80066ac:	f1b9 0f00 	cmp.w	r9, #0
 80066b0:	d003      	beq.n	80066ba <_scanf_float+0x72>
 80066b2:	6823      	ldr	r3, [r4, #0]
 80066b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066b8:	6023      	str	r3, [r4, #0]
 80066ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80066be:	f1ba 0f01 	cmp.w	sl, #1
 80066c2:	f200 8113 	bhi.w	80068ec <_scanf_float+0x2a4>
 80066c6:	455e      	cmp	r6, fp
 80066c8:	f200 8105 	bhi.w	80068d6 <_scanf_float+0x28e>
 80066cc:	2501      	movs	r5, #1
 80066ce:	4628      	mov	r0, r5
 80066d0:	b007      	add	sp, #28
 80066d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066d6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80066da:	2a0d      	cmp	r2, #13
 80066dc:	d8e6      	bhi.n	80066ac <_scanf_float+0x64>
 80066de:	a101      	add	r1, pc, #4	; (adr r1, 80066e4 <_scanf_float+0x9c>)
 80066e0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80066e4:	08006823 	.word	0x08006823
 80066e8:	080066ad 	.word	0x080066ad
 80066ec:	080066ad 	.word	0x080066ad
 80066f0:	080066ad 	.word	0x080066ad
 80066f4:	08006883 	.word	0x08006883
 80066f8:	0800685b 	.word	0x0800685b
 80066fc:	080066ad 	.word	0x080066ad
 8006700:	080066ad 	.word	0x080066ad
 8006704:	08006831 	.word	0x08006831
 8006708:	080066ad 	.word	0x080066ad
 800670c:	080066ad 	.word	0x080066ad
 8006710:	080066ad 	.word	0x080066ad
 8006714:	080066ad 	.word	0x080066ad
 8006718:	080067e9 	.word	0x080067e9
 800671c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006720:	e7db      	b.n	80066da <_scanf_float+0x92>
 8006722:	290e      	cmp	r1, #14
 8006724:	d8c2      	bhi.n	80066ac <_scanf_float+0x64>
 8006726:	a001      	add	r0, pc, #4	; (adr r0, 800672c <_scanf_float+0xe4>)
 8006728:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800672c:	080067db 	.word	0x080067db
 8006730:	080066ad 	.word	0x080066ad
 8006734:	080067db 	.word	0x080067db
 8006738:	0800686f 	.word	0x0800686f
 800673c:	080066ad 	.word	0x080066ad
 8006740:	08006789 	.word	0x08006789
 8006744:	080067c5 	.word	0x080067c5
 8006748:	080067c5 	.word	0x080067c5
 800674c:	080067c5 	.word	0x080067c5
 8006750:	080067c5 	.word	0x080067c5
 8006754:	080067c5 	.word	0x080067c5
 8006758:	080067c5 	.word	0x080067c5
 800675c:	080067c5 	.word	0x080067c5
 8006760:	080067c5 	.word	0x080067c5
 8006764:	080067c5 	.word	0x080067c5
 8006768:	2b6e      	cmp	r3, #110	; 0x6e
 800676a:	d809      	bhi.n	8006780 <_scanf_float+0x138>
 800676c:	2b60      	cmp	r3, #96	; 0x60
 800676e:	d8b2      	bhi.n	80066d6 <_scanf_float+0x8e>
 8006770:	2b54      	cmp	r3, #84	; 0x54
 8006772:	d077      	beq.n	8006864 <_scanf_float+0x21c>
 8006774:	2b59      	cmp	r3, #89	; 0x59
 8006776:	d199      	bne.n	80066ac <_scanf_float+0x64>
 8006778:	2d07      	cmp	r5, #7
 800677a:	d197      	bne.n	80066ac <_scanf_float+0x64>
 800677c:	2508      	movs	r5, #8
 800677e:	e029      	b.n	80067d4 <_scanf_float+0x18c>
 8006780:	2b74      	cmp	r3, #116	; 0x74
 8006782:	d06f      	beq.n	8006864 <_scanf_float+0x21c>
 8006784:	2b79      	cmp	r3, #121	; 0x79
 8006786:	e7f6      	b.n	8006776 <_scanf_float+0x12e>
 8006788:	6821      	ldr	r1, [r4, #0]
 800678a:	05c8      	lsls	r0, r1, #23
 800678c:	d51a      	bpl.n	80067c4 <_scanf_float+0x17c>
 800678e:	9b02      	ldr	r3, [sp, #8]
 8006790:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006794:	6021      	str	r1, [r4, #0]
 8006796:	f109 0901 	add.w	r9, r9, #1
 800679a:	b11b      	cbz	r3, 80067a4 <_scanf_float+0x15c>
 800679c:	3b01      	subs	r3, #1
 800679e:	3201      	adds	r2, #1
 80067a0:	9302      	str	r3, [sp, #8]
 80067a2:	60a2      	str	r2, [r4, #8]
 80067a4:	68a3      	ldr	r3, [r4, #8]
 80067a6:	3b01      	subs	r3, #1
 80067a8:	60a3      	str	r3, [r4, #8]
 80067aa:	6923      	ldr	r3, [r4, #16]
 80067ac:	3301      	adds	r3, #1
 80067ae:	6123      	str	r3, [r4, #16]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	3b01      	subs	r3, #1
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	607b      	str	r3, [r7, #4]
 80067b8:	f340 8084 	ble.w	80068c4 <_scanf_float+0x27c>
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	3301      	adds	r3, #1
 80067c0:	603b      	str	r3, [r7, #0]
 80067c2:	e766      	b.n	8006692 <_scanf_float+0x4a>
 80067c4:	eb1a 0f05 	cmn.w	sl, r5
 80067c8:	f47f af70 	bne.w	80066ac <_scanf_float+0x64>
 80067cc:	6822      	ldr	r2, [r4, #0]
 80067ce:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80067d2:	6022      	str	r2, [r4, #0]
 80067d4:	f806 3b01 	strb.w	r3, [r6], #1
 80067d8:	e7e4      	b.n	80067a4 <_scanf_float+0x15c>
 80067da:	6822      	ldr	r2, [r4, #0]
 80067dc:	0610      	lsls	r0, r2, #24
 80067de:	f57f af65 	bpl.w	80066ac <_scanf_float+0x64>
 80067e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80067e6:	e7f4      	b.n	80067d2 <_scanf_float+0x18a>
 80067e8:	f1ba 0f00 	cmp.w	sl, #0
 80067ec:	d10e      	bne.n	800680c <_scanf_float+0x1c4>
 80067ee:	f1b9 0f00 	cmp.w	r9, #0
 80067f2:	d10e      	bne.n	8006812 <_scanf_float+0x1ca>
 80067f4:	6822      	ldr	r2, [r4, #0]
 80067f6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80067fa:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80067fe:	d108      	bne.n	8006812 <_scanf_float+0x1ca>
 8006800:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006804:	f04f 0a01 	mov.w	sl, #1
 8006808:	6022      	str	r2, [r4, #0]
 800680a:	e7e3      	b.n	80067d4 <_scanf_float+0x18c>
 800680c:	f1ba 0f02 	cmp.w	sl, #2
 8006810:	d055      	beq.n	80068be <_scanf_float+0x276>
 8006812:	2d01      	cmp	r5, #1
 8006814:	d002      	beq.n	800681c <_scanf_float+0x1d4>
 8006816:	2d04      	cmp	r5, #4
 8006818:	f47f af48 	bne.w	80066ac <_scanf_float+0x64>
 800681c:	3501      	adds	r5, #1
 800681e:	b2ed      	uxtb	r5, r5
 8006820:	e7d8      	b.n	80067d4 <_scanf_float+0x18c>
 8006822:	f1ba 0f01 	cmp.w	sl, #1
 8006826:	f47f af41 	bne.w	80066ac <_scanf_float+0x64>
 800682a:	f04f 0a02 	mov.w	sl, #2
 800682e:	e7d1      	b.n	80067d4 <_scanf_float+0x18c>
 8006830:	b97d      	cbnz	r5, 8006852 <_scanf_float+0x20a>
 8006832:	f1b9 0f00 	cmp.w	r9, #0
 8006836:	f47f af3c 	bne.w	80066b2 <_scanf_float+0x6a>
 800683a:	6822      	ldr	r2, [r4, #0]
 800683c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006840:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006844:	f47f af39 	bne.w	80066ba <_scanf_float+0x72>
 8006848:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800684c:	2501      	movs	r5, #1
 800684e:	6022      	str	r2, [r4, #0]
 8006850:	e7c0      	b.n	80067d4 <_scanf_float+0x18c>
 8006852:	2d03      	cmp	r5, #3
 8006854:	d0e2      	beq.n	800681c <_scanf_float+0x1d4>
 8006856:	2d05      	cmp	r5, #5
 8006858:	e7de      	b.n	8006818 <_scanf_float+0x1d0>
 800685a:	2d02      	cmp	r5, #2
 800685c:	f47f af26 	bne.w	80066ac <_scanf_float+0x64>
 8006860:	2503      	movs	r5, #3
 8006862:	e7b7      	b.n	80067d4 <_scanf_float+0x18c>
 8006864:	2d06      	cmp	r5, #6
 8006866:	f47f af21 	bne.w	80066ac <_scanf_float+0x64>
 800686a:	2507      	movs	r5, #7
 800686c:	e7b2      	b.n	80067d4 <_scanf_float+0x18c>
 800686e:	6822      	ldr	r2, [r4, #0]
 8006870:	0591      	lsls	r1, r2, #22
 8006872:	f57f af1b 	bpl.w	80066ac <_scanf_float+0x64>
 8006876:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800687a:	6022      	str	r2, [r4, #0]
 800687c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006880:	e7a8      	b.n	80067d4 <_scanf_float+0x18c>
 8006882:	6822      	ldr	r2, [r4, #0]
 8006884:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006888:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800688c:	d006      	beq.n	800689c <_scanf_float+0x254>
 800688e:	0550      	lsls	r0, r2, #21
 8006890:	f57f af0c 	bpl.w	80066ac <_scanf_float+0x64>
 8006894:	f1b9 0f00 	cmp.w	r9, #0
 8006898:	f43f af0f 	beq.w	80066ba <_scanf_float+0x72>
 800689c:	0591      	lsls	r1, r2, #22
 800689e:	bf58      	it	pl
 80068a0:	9901      	ldrpl	r1, [sp, #4]
 80068a2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80068a6:	bf58      	it	pl
 80068a8:	eba9 0101 	subpl.w	r1, r9, r1
 80068ac:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80068b0:	f04f 0900 	mov.w	r9, #0
 80068b4:	bf58      	it	pl
 80068b6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80068ba:	6022      	str	r2, [r4, #0]
 80068bc:	e78a      	b.n	80067d4 <_scanf_float+0x18c>
 80068be:	f04f 0a03 	mov.w	sl, #3
 80068c2:	e787      	b.n	80067d4 <_scanf_float+0x18c>
 80068c4:	4639      	mov	r1, r7
 80068c6:	4640      	mov	r0, r8
 80068c8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80068cc:	4798      	blx	r3
 80068ce:	2800      	cmp	r0, #0
 80068d0:	f43f aedf 	beq.w	8006692 <_scanf_float+0x4a>
 80068d4:	e6ea      	b.n	80066ac <_scanf_float+0x64>
 80068d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80068da:	463a      	mov	r2, r7
 80068dc:	4640      	mov	r0, r8
 80068de:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80068e2:	4798      	blx	r3
 80068e4:	6923      	ldr	r3, [r4, #16]
 80068e6:	3b01      	subs	r3, #1
 80068e8:	6123      	str	r3, [r4, #16]
 80068ea:	e6ec      	b.n	80066c6 <_scanf_float+0x7e>
 80068ec:	1e6b      	subs	r3, r5, #1
 80068ee:	2b06      	cmp	r3, #6
 80068f0:	d825      	bhi.n	800693e <_scanf_float+0x2f6>
 80068f2:	2d02      	cmp	r5, #2
 80068f4:	d836      	bhi.n	8006964 <_scanf_float+0x31c>
 80068f6:	455e      	cmp	r6, fp
 80068f8:	f67f aee8 	bls.w	80066cc <_scanf_float+0x84>
 80068fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006900:	463a      	mov	r2, r7
 8006902:	4640      	mov	r0, r8
 8006904:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006908:	4798      	blx	r3
 800690a:	6923      	ldr	r3, [r4, #16]
 800690c:	3b01      	subs	r3, #1
 800690e:	6123      	str	r3, [r4, #16]
 8006910:	e7f1      	b.n	80068f6 <_scanf_float+0x2ae>
 8006912:	9802      	ldr	r0, [sp, #8]
 8006914:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006918:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800691c:	463a      	mov	r2, r7
 800691e:	9002      	str	r0, [sp, #8]
 8006920:	4640      	mov	r0, r8
 8006922:	4798      	blx	r3
 8006924:	6923      	ldr	r3, [r4, #16]
 8006926:	3b01      	subs	r3, #1
 8006928:	6123      	str	r3, [r4, #16]
 800692a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800692e:	fa5f fa8a 	uxtb.w	sl, sl
 8006932:	f1ba 0f02 	cmp.w	sl, #2
 8006936:	d1ec      	bne.n	8006912 <_scanf_float+0x2ca>
 8006938:	3d03      	subs	r5, #3
 800693a:	b2ed      	uxtb	r5, r5
 800693c:	1b76      	subs	r6, r6, r5
 800693e:	6823      	ldr	r3, [r4, #0]
 8006940:	05da      	lsls	r2, r3, #23
 8006942:	d52f      	bpl.n	80069a4 <_scanf_float+0x35c>
 8006944:	055b      	lsls	r3, r3, #21
 8006946:	d510      	bpl.n	800696a <_scanf_float+0x322>
 8006948:	455e      	cmp	r6, fp
 800694a:	f67f aebf 	bls.w	80066cc <_scanf_float+0x84>
 800694e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006952:	463a      	mov	r2, r7
 8006954:	4640      	mov	r0, r8
 8006956:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800695a:	4798      	blx	r3
 800695c:	6923      	ldr	r3, [r4, #16]
 800695e:	3b01      	subs	r3, #1
 8006960:	6123      	str	r3, [r4, #16]
 8006962:	e7f1      	b.n	8006948 <_scanf_float+0x300>
 8006964:	46aa      	mov	sl, r5
 8006966:	9602      	str	r6, [sp, #8]
 8006968:	e7df      	b.n	800692a <_scanf_float+0x2e2>
 800696a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800696e:	6923      	ldr	r3, [r4, #16]
 8006970:	2965      	cmp	r1, #101	; 0x65
 8006972:	f103 33ff 	add.w	r3, r3, #4294967295
 8006976:	f106 35ff 	add.w	r5, r6, #4294967295
 800697a:	6123      	str	r3, [r4, #16]
 800697c:	d00c      	beq.n	8006998 <_scanf_float+0x350>
 800697e:	2945      	cmp	r1, #69	; 0x45
 8006980:	d00a      	beq.n	8006998 <_scanf_float+0x350>
 8006982:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006986:	463a      	mov	r2, r7
 8006988:	4640      	mov	r0, r8
 800698a:	4798      	blx	r3
 800698c:	6923      	ldr	r3, [r4, #16]
 800698e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006992:	3b01      	subs	r3, #1
 8006994:	1eb5      	subs	r5, r6, #2
 8006996:	6123      	str	r3, [r4, #16]
 8006998:	463a      	mov	r2, r7
 800699a:	4640      	mov	r0, r8
 800699c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80069a0:	4798      	blx	r3
 80069a2:	462e      	mov	r6, r5
 80069a4:	6825      	ldr	r5, [r4, #0]
 80069a6:	f015 0510 	ands.w	r5, r5, #16
 80069aa:	d155      	bne.n	8006a58 <_scanf_float+0x410>
 80069ac:	7035      	strb	r5, [r6, #0]
 80069ae:	6823      	ldr	r3, [r4, #0]
 80069b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80069b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069b8:	d11d      	bne.n	80069f6 <_scanf_float+0x3ae>
 80069ba:	9b01      	ldr	r3, [sp, #4]
 80069bc:	454b      	cmp	r3, r9
 80069be:	eba3 0209 	sub.w	r2, r3, r9
 80069c2:	d125      	bne.n	8006a10 <_scanf_float+0x3c8>
 80069c4:	2200      	movs	r2, #0
 80069c6:	4659      	mov	r1, fp
 80069c8:	4640      	mov	r0, r8
 80069ca:	f002 fc0d 	bl	80091e8 <_strtod_r>
 80069ce:	9b03      	ldr	r3, [sp, #12]
 80069d0:	f8d4 c000 	ldr.w	ip, [r4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f01c 0f02 	tst.w	ip, #2
 80069da:	4606      	mov	r6, r0
 80069dc:	460f      	mov	r7, r1
 80069de:	f103 0204 	add.w	r2, r3, #4
 80069e2:	d020      	beq.n	8006a26 <_scanf_float+0x3de>
 80069e4:	9903      	ldr	r1, [sp, #12]
 80069e6:	600a      	str	r2, [r1, #0]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	e9c3 6700 	strd	r6, r7, [r3]
 80069ee:	68e3      	ldr	r3, [r4, #12]
 80069f0:	3301      	adds	r3, #1
 80069f2:	60e3      	str	r3, [r4, #12]
 80069f4:	e66b      	b.n	80066ce <_scanf_float+0x86>
 80069f6:	9b04      	ldr	r3, [sp, #16]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d0e3      	beq.n	80069c4 <_scanf_float+0x37c>
 80069fc:	9905      	ldr	r1, [sp, #20]
 80069fe:	230a      	movs	r3, #10
 8006a00:	462a      	mov	r2, r5
 8006a02:	4640      	mov	r0, r8
 8006a04:	3101      	adds	r1, #1
 8006a06:	f002 fc73 	bl	80092f0 <_strtol_r>
 8006a0a:	9b04      	ldr	r3, [sp, #16]
 8006a0c:	9e05      	ldr	r6, [sp, #20]
 8006a0e:	1ac2      	subs	r2, r0, r3
 8006a10:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006a14:	429e      	cmp	r6, r3
 8006a16:	bf28      	it	cs
 8006a18:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006a1c:	4630      	mov	r0, r6
 8006a1e:	490f      	ldr	r1, [pc, #60]	; (8006a5c <_scanf_float+0x414>)
 8006a20:	f000 f8d0 	bl	8006bc4 <siprintf>
 8006a24:	e7ce      	b.n	80069c4 <_scanf_float+0x37c>
 8006a26:	f01c 0f04 	tst.w	ip, #4
 8006a2a:	d1db      	bne.n	80069e4 <_scanf_float+0x39c>
 8006a2c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8006a30:	f8cc 2000 	str.w	r2, [ip]
 8006a34:	f8d3 8000 	ldr.w	r8, [r3]
 8006a38:	4602      	mov	r2, r0
 8006a3a:	460b      	mov	r3, r1
 8006a3c:	f7f9 ffe6 	bl	8000a0c <__aeabi_dcmpun>
 8006a40:	b128      	cbz	r0, 8006a4e <_scanf_float+0x406>
 8006a42:	4807      	ldr	r0, [pc, #28]	; (8006a60 <_scanf_float+0x418>)
 8006a44:	f000 f9ae 	bl	8006da4 <nanf>
 8006a48:	f8c8 0000 	str.w	r0, [r8]
 8006a4c:	e7cf      	b.n	80069ee <_scanf_float+0x3a6>
 8006a4e:	4630      	mov	r0, r6
 8006a50:	4639      	mov	r1, r7
 8006a52:	f7fa f839 	bl	8000ac8 <__aeabi_d2f>
 8006a56:	e7f7      	b.n	8006a48 <_scanf_float+0x400>
 8006a58:	2500      	movs	r5, #0
 8006a5a:	e638      	b.n	80066ce <_scanf_float+0x86>
 8006a5c:	0800a692 	.word	0x0800a692
 8006a60:	0800aa25 	.word	0x0800aa25

08006a64 <std>:
 8006a64:	2300      	movs	r3, #0
 8006a66:	b510      	push	{r4, lr}
 8006a68:	4604      	mov	r4, r0
 8006a6a:	e9c0 3300 	strd	r3, r3, [r0]
 8006a6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006a72:	6083      	str	r3, [r0, #8]
 8006a74:	8181      	strh	r1, [r0, #12]
 8006a76:	6643      	str	r3, [r0, #100]	; 0x64
 8006a78:	81c2      	strh	r2, [r0, #14]
 8006a7a:	6183      	str	r3, [r0, #24]
 8006a7c:	4619      	mov	r1, r3
 8006a7e:	2208      	movs	r2, #8
 8006a80:	305c      	adds	r0, #92	; 0x5c
 8006a82:	f000 f902 	bl	8006c8a <memset>
 8006a86:	4b05      	ldr	r3, [pc, #20]	; (8006a9c <std+0x38>)
 8006a88:	6224      	str	r4, [r4, #32]
 8006a8a:	6263      	str	r3, [r4, #36]	; 0x24
 8006a8c:	4b04      	ldr	r3, [pc, #16]	; (8006aa0 <std+0x3c>)
 8006a8e:	62a3      	str	r3, [r4, #40]	; 0x28
 8006a90:	4b04      	ldr	r3, [pc, #16]	; (8006aa4 <std+0x40>)
 8006a92:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006a94:	4b04      	ldr	r3, [pc, #16]	; (8006aa8 <std+0x44>)
 8006a96:	6323      	str	r3, [r4, #48]	; 0x30
 8006a98:	bd10      	pop	{r4, pc}
 8006a9a:	bf00      	nop
 8006a9c:	08006c05 	.word	0x08006c05
 8006aa0:	08006c27 	.word	0x08006c27
 8006aa4:	08006c5f 	.word	0x08006c5f
 8006aa8:	08006c83 	.word	0x08006c83

08006aac <stdio_exit_handler>:
 8006aac:	4a02      	ldr	r2, [pc, #8]	; (8006ab8 <stdio_exit_handler+0xc>)
 8006aae:	4903      	ldr	r1, [pc, #12]	; (8006abc <stdio_exit_handler+0x10>)
 8006ab0:	4803      	ldr	r0, [pc, #12]	; (8006ac0 <stdio_exit_handler+0x14>)
 8006ab2:	f000 b869 	b.w	8006b88 <_fwalk_sglue>
 8006ab6:	bf00      	nop
 8006ab8:	20000024 	.word	0x20000024
 8006abc:	080096a9 	.word	0x080096a9
 8006ac0:	20000030 	.word	0x20000030

08006ac4 <cleanup_stdio>:
 8006ac4:	6841      	ldr	r1, [r0, #4]
 8006ac6:	4b0c      	ldr	r3, [pc, #48]	; (8006af8 <cleanup_stdio+0x34>)
 8006ac8:	b510      	push	{r4, lr}
 8006aca:	4299      	cmp	r1, r3
 8006acc:	4604      	mov	r4, r0
 8006ace:	d001      	beq.n	8006ad4 <cleanup_stdio+0x10>
 8006ad0:	f002 fdea 	bl	80096a8 <_fflush_r>
 8006ad4:	68a1      	ldr	r1, [r4, #8]
 8006ad6:	4b09      	ldr	r3, [pc, #36]	; (8006afc <cleanup_stdio+0x38>)
 8006ad8:	4299      	cmp	r1, r3
 8006ada:	d002      	beq.n	8006ae2 <cleanup_stdio+0x1e>
 8006adc:	4620      	mov	r0, r4
 8006ade:	f002 fde3 	bl	80096a8 <_fflush_r>
 8006ae2:	68e1      	ldr	r1, [r4, #12]
 8006ae4:	4b06      	ldr	r3, [pc, #24]	; (8006b00 <cleanup_stdio+0x3c>)
 8006ae6:	4299      	cmp	r1, r3
 8006ae8:	d004      	beq.n	8006af4 <cleanup_stdio+0x30>
 8006aea:	4620      	mov	r0, r4
 8006aec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006af0:	f002 bdda 	b.w	80096a8 <_fflush_r>
 8006af4:	bd10      	pop	{r4, pc}
 8006af6:	bf00      	nop
 8006af8:	20000398 	.word	0x20000398
 8006afc:	20000400 	.word	0x20000400
 8006b00:	20000468 	.word	0x20000468

08006b04 <global_stdio_init.part.0>:
 8006b04:	b510      	push	{r4, lr}
 8006b06:	4b0b      	ldr	r3, [pc, #44]	; (8006b34 <global_stdio_init.part.0+0x30>)
 8006b08:	4c0b      	ldr	r4, [pc, #44]	; (8006b38 <global_stdio_init.part.0+0x34>)
 8006b0a:	4a0c      	ldr	r2, [pc, #48]	; (8006b3c <global_stdio_init.part.0+0x38>)
 8006b0c:	4620      	mov	r0, r4
 8006b0e:	601a      	str	r2, [r3, #0]
 8006b10:	2104      	movs	r1, #4
 8006b12:	2200      	movs	r2, #0
 8006b14:	f7ff ffa6 	bl	8006a64 <std>
 8006b18:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	2109      	movs	r1, #9
 8006b20:	f7ff ffa0 	bl	8006a64 <std>
 8006b24:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006b28:	2202      	movs	r2, #2
 8006b2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b2e:	2112      	movs	r1, #18
 8006b30:	f7ff bf98 	b.w	8006a64 <std>
 8006b34:	200004d0 	.word	0x200004d0
 8006b38:	20000398 	.word	0x20000398
 8006b3c:	08006aad 	.word	0x08006aad

08006b40 <__sfp_lock_acquire>:
 8006b40:	4801      	ldr	r0, [pc, #4]	; (8006b48 <__sfp_lock_acquire+0x8>)
 8006b42:	f000 b91f 	b.w	8006d84 <__retarget_lock_acquire_recursive>
 8006b46:	bf00      	nop
 8006b48:	200004d9 	.word	0x200004d9

08006b4c <__sfp_lock_release>:
 8006b4c:	4801      	ldr	r0, [pc, #4]	; (8006b54 <__sfp_lock_release+0x8>)
 8006b4e:	f000 b91a 	b.w	8006d86 <__retarget_lock_release_recursive>
 8006b52:	bf00      	nop
 8006b54:	200004d9 	.word	0x200004d9

08006b58 <__sinit>:
 8006b58:	b510      	push	{r4, lr}
 8006b5a:	4604      	mov	r4, r0
 8006b5c:	f7ff fff0 	bl	8006b40 <__sfp_lock_acquire>
 8006b60:	6a23      	ldr	r3, [r4, #32]
 8006b62:	b11b      	cbz	r3, 8006b6c <__sinit+0x14>
 8006b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b68:	f7ff bff0 	b.w	8006b4c <__sfp_lock_release>
 8006b6c:	4b04      	ldr	r3, [pc, #16]	; (8006b80 <__sinit+0x28>)
 8006b6e:	6223      	str	r3, [r4, #32]
 8006b70:	4b04      	ldr	r3, [pc, #16]	; (8006b84 <__sinit+0x2c>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d1f5      	bne.n	8006b64 <__sinit+0xc>
 8006b78:	f7ff ffc4 	bl	8006b04 <global_stdio_init.part.0>
 8006b7c:	e7f2      	b.n	8006b64 <__sinit+0xc>
 8006b7e:	bf00      	nop
 8006b80:	08006ac5 	.word	0x08006ac5
 8006b84:	200004d0 	.word	0x200004d0

08006b88 <_fwalk_sglue>:
 8006b88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b8c:	4607      	mov	r7, r0
 8006b8e:	4688      	mov	r8, r1
 8006b90:	4614      	mov	r4, r2
 8006b92:	2600      	movs	r6, #0
 8006b94:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b98:	f1b9 0901 	subs.w	r9, r9, #1
 8006b9c:	d505      	bpl.n	8006baa <_fwalk_sglue+0x22>
 8006b9e:	6824      	ldr	r4, [r4, #0]
 8006ba0:	2c00      	cmp	r4, #0
 8006ba2:	d1f7      	bne.n	8006b94 <_fwalk_sglue+0xc>
 8006ba4:	4630      	mov	r0, r6
 8006ba6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006baa:	89ab      	ldrh	r3, [r5, #12]
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d907      	bls.n	8006bc0 <_fwalk_sglue+0x38>
 8006bb0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006bb4:	3301      	adds	r3, #1
 8006bb6:	d003      	beq.n	8006bc0 <_fwalk_sglue+0x38>
 8006bb8:	4629      	mov	r1, r5
 8006bba:	4638      	mov	r0, r7
 8006bbc:	47c0      	blx	r8
 8006bbe:	4306      	orrs	r6, r0
 8006bc0:	3568      	adds	r5, #104	; 0x68
 8006bc2:	e7e9      	b.n	8006b98 <_fwalk_sglue+0x10>

08006bc4 <siprintf>:
 8006bc4:	b40e      	push	{r1, r2, r3}
 8006bc6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006bca:	b500      	push	{lr}
 8006bcc:	b09c      	sub	sp, #112	; 0x70
 8006bce:	ab1d      	add	r3, sp, #116	; 0x74
 8006bd0:	9002      	str	r0, [sp, #8]
 8006bd2:	9006      	str	r0, [sp, #24]
 8006bd4:	9107      	str	r1, [sp, #28]
 8006bd6:	9104      	str	r1, [sp, #16]
 8006bd8:	4808      	ldr	r0, [pc, #32]	; (8006bfc <siprintf+0x38>)
 8006bda:	4909      	ldr	r1, [pc, #36]	; (8006c00 <siprintf+0x3c>)
 8006bdc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006be0:	9105      	str	r1, [sp, #20]
 8006be2:	6800      	ldr	r0, [r0, #0]
 8006be4:	a902      	add	r1, sp, #8
 8006be6:	9301      	str	r3, [sp, #4]
 8006be8:	f002 fbde 	bl	80093a8 <_svfiprintf_r>
 8006bec:	2200      	movs	r2, #0
 8006bee:	9b02      	ldr	r3, [sp, #8]
 8006bf0:	701a      	strb	r2, [r3, #0]
 8006bf2:	b01c      	add	sp, #112	; 0x70
 8006bf4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006bf8:	b003      	add	sp, #12
 8006bfa:	4770      	bx	lr
 8006bfc:	2000007c 	.word	0x2000007c
 8006c00:	ffff0208 	.word	0xffff0208

08006c04 <__sread>:
 8006c04:	b510      	push	{r4, lr}
 8006c06:	460c      	mov	r4, r1
 8006c08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c0c:	f000 f86c 	bl	8006ce8 <_read_r>
 8006c10:	2800      	cmp	r0, #0
 8006c12:	bfab      	itete	ge
 8006c14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006c16:	89a3      	ldrhlt	r3, [r4, #12]
 8006c18:	181b      	addge	r3, r3, r0
 8006c1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006c1e:	bfac      	ite	ge
 8006c20:	6563      	strge	r3, [r4, #84]	; 0x54
 8006c22:	81a3      	strhlt	r3, [r4, #12]
 8006c24:	bd10      	pop	{r4, pc}

08006c26 <__swrite>:
 8006c26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c2a:	461f      	mov	r7, r3
 8006c2c:	898b      	ldrh	r3, [r1, #12]
 8006c2e:	4605      	mov	r5, r0
 8006c30:	05db      	lsls	r3, r3, #23
 8006c32:	460c      	mov	r4, r1
 8006c34:	4616      	mov	r6, r2
 8006c36:	d505      	bpl.n	8006c44 <__swrite+0x1e>
 8006c38:	2302      	movs	r3, #2
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c40:	f000 f840 	bl	8006cc4 <_lseek_r>
 8006c44:	89a3      	ldrh	r3, [r4, #12]
 8006c46:	4632      	mov	r2, r6
 8006c48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c4c:	81a3      	strh	r3, [r4, #12]
 8006c4e:	4628      	mov	r0, r5
 8006c50:	463b      	mov	r3, r7
 8006c52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c5a:	f000 b857 	b.w	8006d0c <_write_r>

08006c5e <__sseek>:
 8006c5e:	b510      	push	{r4, lr}
 8006c60:	460c      	mov	r4, r1
 8006c62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c66:	f000 f82d 	bl	8006cc4 <_lseek_r>
 8006c6a:	1c43      	adds	r3, r0, #1
 8006c6c:	89a3      	ldrh	r3, [r4, #12]
 8006c6e:	bf15      	itete	ne
 8006c70:	6560      	strne	r0, [r4, #84]	; 0x54
 8006c72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006c76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006c7a:	81a3      	strheq	r3, [r4, #12]
 8006c7c:	bf18      	it	ne
 8006c7e:	81a3      	strhne	r3, [r4, #12]
 8006c80:	bd10      	pop	{r4, pc}

08006c82 <__sclose>:
 8006c82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c86:	f000 b80d 	b.w	8006ca4 <_close_r>

08006c8a <memset>:
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	4402      	add	r2, r0
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d100      	bne.n	8006c94 <memset+0xa>
 8006c92:	4770      	bx	lr
 8006c94:	f803 1b01 	strb.w	r1, [r3], #1
 8006c98:	e7f9      	b.n	8006c8e <memset+0x4>
	...

08006c9c <_localeconv_r>:
 8006c9c:	4800      	ldr	r0, [pc, #0]	; (8006ca0 <_localeconv_r+0x4>)
 8006c9e:	4770      	bx	lr
 8006ca0:	20000170 	.word	0x20000170

08006ca4 <_close_r>:
 8006ca4:	b538      	push	{r3, r4, r5, lr}
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	4d05      	ldr	r5, [pc, #20]	; (8006cc0 <_close_r+0x1c>)
 8006caa:	4604      	mov	r4, r0
 8006cac:	4608      	mov	r0, r1
 8006cae:	602b      	str	r3, [r5, #0]
 8006cb0:	f7fb fee4 	bl	8002a7c <_close>
 8006cb4:	1c43      	adds	r3, r0, #1
 8006cb6:	d102      	bne.n	8006cbe <_close_r+0x1a>
 8006cb8:	682b      	ldr	r3, [r5, #0]
 8006cba:	b103      	cbz	r3, 8006cbe <_close_r+0x1a>
 8006cbc:	6023      	str	r3, [r4, #0]
 8006cbe:	bd38      	pop	{r3, r4, r5, pc}
 8006cc0:	200004d4 	.word	0x200004d4

08006cc4 <_lseek_r>:
 8006cc4:	b538      	push	{r3, r4, r5, lr}
 8006cc6:	4604      	mov	r4, r0
 8006cc8:	4608      	mov	r0, r1
 8006cca:	4611      	mov	r1, r2
 8006ccc:	2200      	movs	r2, #0
 8006cce:	4d05      	ldr	r5, [pc, #20]	; (8006ce4 <_lseek_r+0x20>)
 8006cd0:	602a      	str	r2, [r5, #0]
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	f7fb fef6 	bl	8002ac4 <_lseek>
 8006cd8:	1c43      	adds	r3, r0, #1
 8006cda:	d102      	bne.n	8006ce2 <_lseek_r+0x1e>
 8006cdc:	682b      	ldr	r3, [r5, #0]
 8006cde:	b103      	cbz	r3, 8006ce2 <_lseek_r+0x1e>
 8006ce0:	6023      	str	r3, [r4, #0]
 8006ce2:	bd38      	pop	{r3, r4, r5, pc}
 8006ce4:	200004d4 	.word	0x200004d4

08006ce8 <_read_r>:
 8006ce8:	b538      	push	{r3, r4, r5, lr}
 8006cea:	4604      	mov	r4, r0
 8006cec:	4608      	mov	r0, r1
 8006cee:	4611      	mov	r1, r2
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	4d05      	ldr	r5, [pc, #20]	; (8006d08 <_read_r+0x20>)
 8006cf4:	602a      	str	r2, [r5, #0]
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	f7fb fe87 	bl	8002a0a <_read>
 8006cfc:	1c43      	adds	r3, r0, #1
 8006cfe:	d102      	bne.n	8006d06 <_read_r+0x1e>
 8006d00:	682b      	ldr	r3, [r5, #0]
 8006d02:	b103      	cbz	r3, 8006d06 <_read_r+0x1e>
 8006d04:	6023      	str	r3, [r4, #0]
 8006d06:	bd38      	pop	{r3, r4, r5, pc}
 8006d08:	200004d4 	.word	0x200004d4

08006d0c <_write_r>:
 8006d0c:	b538      	push	{r3, r4, r5, lr}
 8006d0e:	4604      	mov	r4, r0
 8006d10:	4608      	mov	r0, r1
 8006d12:	4611      	mov	r1, r2
 8006d14:	2200      	movs	r2, #0
 8006d16:	4d05      	ldr	r5, [pc, #20]	; (8006d2c <_write_r+0x20>)
 8006d18:	602a      	str	r2, [r5, #0]
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	f7fb fe92 	bl	8002a44 <_write>
 8006d20:	1c43      	adds	r3, r0, #1
 8006d22:	d102      	bne.n	8006d2a <_write_r+0x1e>
 8006d24:	682b      	ldr	r3, [r5, #0]
 8006d26:	b103      	cbz	r3, 8006d2a <_write_r+0x1e>
 8006d28:	6023      	str	r3, [r4, #0]
 8006d2a:	bd38      	pop	{r3, r4, r5, pc}
 8006d2c:	200004d4 	.word	0x200004d4

08006d30 <__errno>:
 8006d30:	4b01      	ldr	r3, [pc, #4]	; (8006d38 <__errno+0x8>)
 8006d32:	6818      	ldr	r0, [r3, #0]
 8006d34:	4770      	bx	lr
 8006d36:	bf00      	nop
 8006d38:	2000007c 	.word	0x2000007c

08006d3c <__libc_init_array>:
 8006d3c:	b570      	push	{r4, r5, r6, lr}
 8006d3e:	2600      	movs	r6, #0
 8006d40:	4d0c      	ldr	r5, [pc, #48]	; (8006d74 <__libc_init_array+0x38>)
 8006d42:	4c0d      	ldr	r4, [pc, #52]	; (8006d78 <__libc_init_array+0x3c>)
 8006d44:	1b64      	subs	r4, r4, r5
 8006d46:	10a4      	asrs	r4, r4, #2
 8006d48:	42a6      	cmp	r6, r4
 8006d4a:	d109      	bne.n	8006d60 <__libc_init_array+0x24>
 8006d4c:	f003 fbbe 	bl	800a4cc <_init>
 8006d50:	2600      	movs	r6, #0
 8006d52:	4d0a      	ldr	r5, [pc, #40]	; (8006d7c <__libc_init_array+0x40>)
 8006d54:	4c0a      	ldr	r4, [pc, #40]	; (8006d80 <__libc_init_array+0x44>)
 8006d56:	1b64      	subs	r4, r4, r5
 8006d58:	10a4      	asrs	r4, r4, #2
 8006d5a:	42a6      	cmp	r6, r4
 8006d5c:	d105      	bne.n	8006d6a <__libc_init_array+0x2e>
 8006d5e:	bd70      	pop	{r4, r5, r6, pc}
 8006d60:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d64:	4798      	blx	r3
 8006d66:	3601      	adds	r6, #1
 8006d68:	e7ee      	b.n	8006d48 <__libc_init_array+0xc>
 8006d6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d6e:	4798      	blx	r3
 8006d70:	3601      	adds	r6, #1
 8006d72:	e7f2      	b.n	8006d5a <__libc_init_array+0x1e>
 8006d74:	0800aa88 	.word	0x0800aa88
 8006d78:	0800aa88 	.word	0x0800aa88
 8006d7c:	0800aa88 	.word	0x0800aa88
 8006d80:	0800aa8c 	.word	0x0800aa8c

08006d84 <__retarget_lock_acquire_recursive>:
 8006d84:	4770      	bx	lr

08006d86 <__retarget_lock_release_recursive>:
 8006d86:	4770      	bx	lr

08006d88 <memchr>:
 8006d88:	4603      	mov	r3, r0
 8006d8a:	b510      	push	{r4, lr}
 8006d8c:	b2c9      	uxtb	r1, r1
 8006d8e:	4402      	add	r2, r0
 8006d90:	4293      	cmp	r3, r2
 8006d92:	4618      	mov	r0, r3
 8006d94:	d101      	bne.n	8006d9a <memchr+0x12>
 8006d96:	2000      	movs	r0, #0
 8006d98:	e003      	b.n	8006da2 <memchr+0x1a>
 8006d9a:	7804      	ldrb	r4, [r0, #0]
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	428c      	cmp	r4, r1
 8006da0:	d1f6      	bne.n	8006d90 <memchr+0x8>
 8006da2:	bd10      	pop	{r4, pc}

08006da4 <nanf>:
 8006da4:	4800      	ldr	r0, [pc, #0]	; (8006da8 <nanf+0x4>)
 8006da6:	4770      	bx	lr
 8006da8:	7fc00000 	.word	0x7fc00000

08006dac <quorem>:
 8006dac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006db0:	6903      	ldr	r3, [r0, #16]
 8006db2:	690c      	ldr	r4, [r1, #16]
 8006db4:	4607      	mov	r7, r0
 8006db6:	42a3      	cmp	r3, r4
 8006db8:	db7f      	blt.n	8006eba <quorem+0x10e>
 8006dba:	3c01      	subs	r4, #1
 8006dbc:	f100 0514 	add.w	r5, r0, #20
 8006dc0:	f101 0814 	add.w	r8, r1, #20
 8006dc4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006dc8:	9301      	str	r3, [sp, #4]
 8006dca:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006dce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	fbb2 f6f3 	udiv	r6, r2, r3
 8006dda:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006dde:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006de2:	d331      	bcc.n	8006e48 <quorem+0x9c>
 8006de4:	f04f 0e00 	mov.w	lr, #0
 8006de8:	4640      	mov	r0, r8
 8006dea:	46ac      	mov	ip, r5
 8006dec:	46f2      	mov	sl, lr
 8006dee:	f850 2b04 	ldr.w	r2, [r0], #4
 8006df2:	b293      	uxth	r3, r2
 8006df4:	fb06 e303 	mla	r3, r6, r3, lr
 8006df8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006dfc:	0c1a      	lsrs	r2, r3, #16
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	fb06 220e 	mla	r2, r6, lr, r2
 8006e04:	ebaa 0303 	sub.w	r3, sl, r3
 8006e08:	f8dc a000 	ldr.w	sl, [ip]
 8006e0c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006e10:	fa1f fa8a 	uxth.w	sl, sl
 8006e14:	4453      	add	r3, sl
 8006e16:	f8dc a000 	ldr.w	sl, [ip]
 8006e1a:	b292      	uxth	r2, r2
 8006e1c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006e20:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e2a:	4581      	cmp	r9, r0
 8006e2c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006e30:	f84c 3b04 	str.w	r3, [ip], #4
 8006e34:	d2db      	bcs.n	8006dee <quorem+0x42>
 8006e36:	f855 300b 	ldr.w	r3, [r5, fp]
 8006e3a:	b92b      	cbnz	r3, 8006e48 <quorem+0x9c>
 8006e3c:	9b01      	ldr	r3, [sp, #4]
 8006e3e:	3b04      	subs	r3, #4
 8006e40:	429d      	cmp	r5, r3
 8006e42:	461a      	mov	r2, r3
 8006e44:	d32d      	bcc.n	8006ea2 <quorem+0xf6>
 8006e46:	613c      	str	r4, [r7, #16]
 8006e48:	4638      	mov	r0, r7
 8006e4a:	f001 f9dd 	bl	8008208 <__mcmp>
 8006e4e:	2800      	cmp	r0, #0
 8006e50:	db23      	blt.n	8006e9a <quorem+0xee>
 8006e52:	4629      	mov	r1, r5
 8006e54:	2000      	movs	r0, #0
 8006e56:	3601      	adds	r6, #1
 8006e58:	f858 2b04 	ldr.w	r2, [r8], #4
 8006e5c:	f8d1 c000 	ldr.w	ip, [r1]
 8006e60:	b293      	uxth	r3, r2
 8006e62:	1ac3      	subs	r3, r0, r3
 8006e64:	0c12      	lsrs	r2, r2, #16
 8006e66:	fa1f f08c 	uxth.w	r0, ip
 8006e6a:	4403      	add	r3, r0
 8006e6c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006e70:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e7a:	45c1      	cmp	r9, r8
 8006e7c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006e80:	f841 3b04 	str.w	r3, [r1], #4
 8006e84:	d2e8      	bcs.n	8006e58 <quorem+0xac>
 8006e86:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e8e:	b922      	cbnz	r2, 8006e9a <quorem+0xee>
 8006e90:	3b04      	subs	r3, #4
 8006e92:	429d      	cmp	r5, r3
 8006e94:	461a      	mov	r2, r3
 8006e96:	d30a      	bcc.n	8006eae <quorem+0x102>
 8006e98:	613c      	str	r4, [r7, #16]
 8006e9a:	4630      	mov	r0, r6
 8006e9c:	b003      	add	sp, #12
 8006e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ea2:	6812      	ldr	r2, [r2, #0]
 8006ea4:	3b04      	subs	r3, #4
 8006ea6:	2a00      	cmp	r2, #0
 8006ea8:	d1cd      	bne.n	8006e46 <quorem+0x9a>
 8006eaa:	3c01      	subs	r4, #1
 8006eac:	e7c8      	b.n	8006e40 <quorem+0x94>
 8006eae:	6812      	ldr	r2, [r2, #0]
 8006eb0:	3b04      	subs	r3, #4
 8006eb2:	2a00      	cmp	r2, #0
 8006eb4:	d1f0      	bne.n	8006e98 <quorem+0xec>
 8006eb6:	3c01      	subs	r4, #1
 8006eb8:	e7eb      	b.n	8006e92 <quorem+0xe6>
 8006eba:	2000      	movs	r0, #0
 8006ebc:	e7ee      	b.n	8006e9c <quorem+0xf0>
	...

08006ec0 <_dtoa_r>:
 8006ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ec4:	4616      	mov	r6, r2
 8006ec6:	461f      	mov	r7, r3
 8006ec8:	69c4      	ldr	r4, [r0, #28]
 8006eca:	b099      	sub	sp, #100	; 0x64
 8006ecc:	4605      	mov	r5, r0
 8006ece:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006ed2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006ed6:	b974      	cbnz	r4, 8006ef6 <_dtoa_r+0x36>
 8006ed8:	2010      	movs	r0, #16
 8006eda:	f000 fe1d 	bl	8007b18 <malloc>
 8006ede:	4602      	mov	r2, r0
 8006ee0:	61e8      	str	r0, [r5, #28]
 8006ee2:	b920      	cbnz	r0, 8006eee <_dtoa_r+0x2e>
 8006ee4:	21ef      	movs	r1, #239	; 0xef
 8006ee6:	4bac      	ldr	r3, [pc, #688]	; (8007198 <_dtoa_r+0x2d8>)
 8006ee8:	48ac      	ldr	r0, [pc, #688]	; (800719c <_dtoa_r+0x2dc>)
 8006eea:	f002 fc55 	bl	8009798 <__assert_func>
 8006eee:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006ef2:	6004      	str	r4, [r0, #0]
 8006ef4:	60c4      	str	r4, [r0, #12]
 8006ef6:	69eb      	ldr	r3, [r5, #28]
 8006ef8:	6819      	ldr	r1, [r3, #0]
 8006efa:	b151      	cbz	r1, 8006f12 <_dtoa_r+0x52>
 8006efc:	685a      	ldr	r2, [r3, #4]
 8006efe:	2301      	movs	r3, #1
 8006f00:	4093      	lsls	r3, r2
 8006f02:	604a      	str	r2, [r1, #4]
 8006f04:	608b      	str	r3, [r1, #8]
 8006f06:	4628      	mov	r0, r5
 8006f08:	f000 fefa 	bl	8007d00 <_Bfree>
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	69eb      	ldr	r3, [r5, #28]
 8006f10:	601a      	str	r2, [r3, #0]
 8006f12:	1e3b      	subs	r3, r7, #0
 8006f14:	bfaf      	iteee	ge
 8006f16:	2300      	movge	r3, #0
 8006f18:	2201      	movlt	r2, #1
 8006f1a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006f1e:	9305      	strlt	r3, [sp, #20]
 8006f20:	bfa8      	it	ge
 8006f22:	f8c8 3000 	strge.w	r3, [r8]
 8006f26:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006f2a:	4b9d      	ldr	r3, [pc, #628]	; (80071a0 <_dtoa_r+0x2e0>)
 8006f2c:	bfb8      	it	lt
 8006f2e:	f8c8 2000 	strlt.w	r2, [r8]
 8006f32:	ea33 0309 	bics.w	r3, r3, r9
 8006f36:	d119      	bne.n	8006f6c <_dtoa_r+0xac>
 8006f38:	f242 730f 	movw	r3, #9999	; 0x270f
 8006f3c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006f3e:	6013      	str	r3, [r2, #0]
 8006f40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006f44:	4333      	orrs	r3, r6
 8006f46:	f000 8589 	beq.w	8007a5c <_dtoa_r+0xb9c>
 8006f4a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006f4c:	b953      	cbnz	r3, 8006f64 <_dtoa_r+0xa4>
 8006f4e:	4b95      	ldr	r3, [pc, #596]	; (80071a4 <_dtoa_r+0x2e4>)
 8006f50:	e023      	b.n	8006f9a <_dtoa_r+0xda>
 8006f52:	4b95      	ldr	r3, [pc, #596]	; (80071a8 <_dtoa_r+0x2e8>)
 8006f54:	9303      	str	r3, [sp, #12]
 8006f56:	3308      	adds	r3, #8
 8006f58:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006f5a:	6013      	str	r3, [r2, #0]
 8006f5c:	9803      	ldr	r0, [sp, #12]
 8006f5e:	b019      	add	sp, #100	; 0x64
 8006f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f64:	4b8f      	ldr	r3, [pc, #572]	; (80071a4 <_dtoa_r+0x2e4>)
 8006f66:	9303      	str	r3, [sp, #12]
 8006f68:	3303      	adds	r3, #3
 8006f6a:	e7f5      	b.n	8006f58 <_dtoa_r+0x98>
 8006f6c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006f70:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006f74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006f78:	2200      	movs	r2, #0
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	f7f9 fd14 	bl	80009a8 <__aeabi_dcmpeq>
 8006f80:	4680      	mov	r8, r0
 8006f82:	b160      	cbz	r0, 8006f9e <_dtoa_r+0xde>
 8006f84:	2301      	movs	r3, #1
 8006f86:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006f88:	6013      	str	r3, [r2, #0]
 8006f8a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	f000 8562 	beq.w	8007a56 <_dtoa_r+0xb96>
 8006f92:	4b86      	ldr	r3, [pc, #536]	; (80071ac <_dtoa_r+0x2ec>)
 8006f94:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006f96:	6013      	str	r3, [r2, #0]
 8006f98:	3b01      	subs	r3, #1
 8006f9a:	9303      	str	r3, [sp, #12]
 8006f9c:	e7de      	b.n	8006f5c <_dtoa_r+0x9c>
 8006f9e:	ab16      	add	r3, sp, #88	; 0x58
 8006fa0:	9301      	str	r3, [sp, #4]
 8006fa2:	ab17      	add	r3, sp, #92	; 0x5c
 8006fa4:	9300      	str	r3, [sp, #0]
 8006fa6:	4628      	mov	r0, r5
 8006fa8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006fac:	f001 fa3c 	bl	8008428 <__d2b>
 8006fb0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006fb4:	4682      	mov	sl, r0
 8006fb6:	2c00      	cmp	r4, #0
 8006fb8:	d07e      	beq.n	80070b8 <_dtoa_r+0x1f8>
 8006fba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006fbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006fc0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006fc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006fc8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006fcc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006fd0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006fd4:	4619      	mov	r1, r3
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	4b75      	ldr	r3, [pc, #468]	; (80071b0 <_dtoa_r+0x2f0>)
 8006fda:	f7f9 f8c5 	bl	8000168 <__aeabi_dsub>
 8006fde:	a368      	add	r3, pc, #416	; (adr r3, 8007180 <_dtoa_r+0x2c0>)
 8006fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe4:	f7f9 fa78 	bl	80004d8 <__aeabi_dmul>
 8006fe8:	a367      	add	r3, pc, #412	; (adr r3, 8007188 <_dtoa_r+0x2c8>)
 8006fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fee:	f7f9 f8bd 	bl	800016c <__adddf3>
 8006ff2:	4606      	mov	r6, r0
 8006ff4:	4620      	mov	r0, r4
 8006ff6:	460f      	mov	r7, r1
 8006ff8:	f7f9 fa04 	bl	8000404 <__aeabi_i2d>
 8006ffc:	a364      	add	r3, pc, #400	; (adr r3, 8007190 <_dtoa_r+0x2d0>)
 8006ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007002:	f7f9 fa69 	bl	80004d8 <__aeabi_dmul>
 8007006:	4602      	mov	r2, r0
 8007008:	460b      	mov	r3, r1
 800700a:	4630      	mov	r0, r6
 800700c:	4639      	mov	r1, r7
 800700e:	f7f9 f8ad 	bl	800016c <__adddf3>
 8007012:	4606      	mov	r6, r0
 8007014:	460f      	mov	r7, r1
 8007016:	f7f9 fd0f 	bl	8000a38 <__aeabi_d2iz>
 800701a:	2200      	movs	r2, #0
 800701c:	4683      	mov	fp, r0
 800701e:	2300      	movs	r3, #0
 8007020:	4630      	mov	r0, r6
 8007022:	4639      	mov	r1, r7
 8007024:	f7f9 fcca 	bl	80009bc <__aeabi_dcmplt>
 8007028:	b148      	cbz	r0, 800703e <_dtoa_r+0x17e>
 800702a:	4658      	mov	r0, fp
 800702c:	f7f9 f9ea 	bl	8000404 <__aeabi_i2d>
 8007030:	4632      	mov	r2, r6
 8007032:	463b      	mov	r3, r7
 8007034:	f7f9 fcb8 	bl	80009a8 <__aeabi_dcmpeq>
 8007038:	b908      	cbnz	r0, 800703e <_dtoa_r+0x17e>
 800703a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800703e:	f1bb 0f16 	cmp.w	fp, #22
 8007042:	d857      	bhi.n	80070f4 <_dtoa_r+0x234>
 8007044:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007048:	4b5a      	ldr	r3, [pc, #360]	; (80071b4 <_dtoa_r+0x2f4>)
 800704a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800704e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007052:	f7f9 fcb3 	bl	80009bc <__aeabi_dcmplt>
 8007056:	2800      	cmp	r0, #0
 8007058:	d04e      	beq.n	80070f8 <_dtoa_r+0x238>
 800705a:	2300      	movs	r3, #0
 800705c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007060:	930f      	str	r3, [sp, #60]	; 0x3c
 8007062:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007064:	1b1b      	subs	r3, r3, r4
 8007066:	1e5a      	subs	r2, r3, #1
 8007068:	bf46      	itte	mi
 800706a:	f1c3 0901 	rsbmi	r9, r3, #1
 800706e:	2300      	movmi	r3, #0
 8007070:	f04f 0900 	movpl.w	r9, #0
 8007074:	9209      	str	r2, [sp, #36]	; 0x24
 8007076:	bf48      	it	mi
 8007078:	9309      	strmi	r3, [sp, #36]	; 0x24
 800707a:	f1bb 0f00 	cmp.w	fp, #0
 800707e:	db3d      	blt.n	80070fc <_dtoa_r+0x23c>
 8007080:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007082:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8007086:	445b      	add	r3, fp
 8007088:	9309      	str	r3, [sp, #36]	; 0x24
 800708a:	2300      	movs	r3, #0
 800708c:	930a      	str	r3, [sp, #40]	; 0x28
 800708e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007090:	2b09      	cmp	r3, #9
 8007092:	d867      	bhi.n	8007164 <_dtoa_r+0x2a4>
 8007094:	2b05      	cmp	r3, #5
 8007096:	bfc4      	itt	gt
 8007098:	3b04      	subgt	r3, #4
 800709a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800709c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800709e:	bfc8      	it	gt
 80070a0:	2400      	movgt	r4, #0
 80070a2:	f1a3 0302 	sub.w	r3, r3, #2
 80070a6:	bfd8      	it	le
 80070a8:	2401      	movle	r4, #1
 80070aa:	2b03      	cmp	r3, #3
 80070ac:	f200 8086 	bhi.w	80071bc <_dtoa_r+0x2fc>
 80070b0:	e8df f003 	tbb	[pc, r3]
 80070b4:	5637392c 	.word	0x5637392c
 80070b8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80070bc:	441c      	add	r4, r3
 80070be:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80070c2:	2b20      	cmp	r3, #32
 80070c4:	bfc1      	itttt	gt
 80070c6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80070ca:	fa09 f903 	lslgt.w	r9, r9, r3
 80070ce:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 80070d2:	fa26 f303 	lsrgt.w	r3, r6, r3
 80070d6:	bfd6      	itet	le
 80070d8:	f1c3 0320 	rsble	r3, r3, #32
 80070dc:	ea49 0003 	orrgt.w	r0, r9, r3
 80070e0:	fa06 f003 	lslle.w	r0, r6, r3
 80070e4:	f7f9 f97e 	bl	80003e4 <__aeabi_ui2d>
 80070e8:	2201      	movs	r2, #1
 80070ea:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80070ee:	3c01      	subs	r4, #1
 80070f0:	9213      	str	r2, [sp, #76]	; 0x4c
 80070f2:	e76f      	b.n	8006fd4 <_dtoa_r+0x114>
 80070f4:	2301      	movs	r3, #1
 80070f6:	e7b3      	b.n	8007060 <_dtoa_r+0x1a0>
 80070f8:	900f      	str	r0, [sp, #60]	; 0x3c
 80070fa:	e7b2      	b.n	8007062 <_dtoa_r+0x1a2>
 80070fc:	f1cb 0300 	rsb	r3, fp, #0
 8007100:	930a      	str	r3, [sp, #40]	; 0x28
 8007102:	2300      	movs	r3, #0
 8007104:	eba9 090b 	sub.w	r9, r9, fp
 8007108:	930e      	str	r3, [sp, #56]	; 0x38
 800710a:	e7c0      	b.n	800708e <_dtoa_r+0x1ce>
 800710c:	2300      	movs	r3, #0
 800710e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007110:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007112:	2b00      	cmp	r3, #0
 8007114:	dc55      	bgt.n	80071c2 <_dtoa_r+0x302>
 8007116:	2301      	movs	r3, #1
 8007118:	461a      	mov	r2, r3
 800711a:	9306      	str	r3, [sp, #24]
 800711c:	9308      	str	r3, [sp, #32]
 800711e:	9223      	str	r2, [sp, #140]	; 0x8c
 8007120:	e00b      	b.n	800713a <_dtoa_r+0x27a>
 8007122:	2301      	movs	r3, #1
 8007124:	e7f3      	b.n	800710e <_dtoa_r+0x24e>
 8007126:	2300      	movs	r3, #0
 8007128:	930b      	str	r3, [sp, #44]	; 0x2c
 800712a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800712c:	445b      	add	r3, fp
 800712e:	9306      	str	r3, [sp, #24]
 8007130:	3301      	adds	r3, #1
 8007132:	2b01      	cmp	r3, #1
 8007134:	9308      	str	r3, [sp, #32]
 8007136:	bfb8      	it	lt
 8007138:	2301      	movlt	r3, #1
 800713a:	2100      	movs	r1, #0
 800713c:	2204      	movs	r2, #4
 800713e:	69e8      	ldr	r0, [r5, #28]
 8007140:	f102 0614 	add.w	r6, r2, #20
 8007144:	429e      	cmp	r6, r3
 8007146:	d940      	bls.n	80071ca <_dtoa_r+0x30a>
 8007148:	6041      	str	r1, [r0, #4]
 800714a:	4628      	mov	r0, r5
 800714c:	f000 fd98 	bl	8007c80 <_Balloc>
 8007150:	9003      	str	r0, [sp, #12]
 8007152:	2800      	cmp	r0, #0
 8007154:	d13c      	bne.n	80071d0 <_dtoa_r+0x310>
 8007156:	4602      	mov	r2, r0
 8007158:	f240 11af 	movw	r1, #431	; 0x1af
 800715c:	4b16      	ldr	r3, [pc, #88]	; (80071b8 <_dtoa_r+0x2f8>)
 800715e:	e6c3      	b.n	8006ee8 <_dtoa_r+0x28>
 8007160:	2301      	movs	r3, #1
 8007162:	e7e1      	b.n	8007128 <_dtoa_r+0x268>
 8007164:	2401      	movs	r4, #1
 8007166:	2300      	movs	r3, #0
 8007168:	940b      	str	r4, [sp, #44]	; 0x2c
 800716a:	9322      	str	r3, [sp, #136]	; 0x88
 800716c:	f04f 33ff 	mov.w	r3, #4294967295
 8007170:	2200      	movs	r2, #0
 8007172:	9306      	str	r3, [sp, #24]
 8007174:	9308      	str	r3, [sp, #32]
 8007176:	2312      	movs	r3, #18
 8007178:	e7d1      	b.n	800711e <_dtoa_r+0x25e>
 800717a:	bf00      	nop
 800717c:	f3af 8000 	nop.w
 8007180:	636f4361 	.word	0x636f4361
 8007184:	3fd287a7 	.word	0x3fd287a7
 8007188:	8b60c8b3 	.word	0x8b60c8b3
 800718c:	3fc68a28 	.word	0x3fc68a28
 8007190:	509f79fb 	.word	0x509f79fb
 8007194:	3fd34413 	.word	0x3fd34413
 8007198:	0800a6a4 	.word	0x0800a6a4
 800719c:	0800a6bb 	.word	0x0800a6bb
 80071a0:	7ff00000 	.word	0x7ff00000
 80071a4:	0800a6a0 	.word	0x0800a6a0
 80071a8:	0800a697 	.word	0x0800a697
 80071ac:	0800a66f 	.word	0x0800a66f
 80071b0:	3ff80000 	.word	0x3ff80000
 80071b4:	0800a7a8 	.word	0x0800a7a8
 80071b8:	0800a713 	.word	0x0800a713
 80071bc:	2301      	movs	r3, #1
 80071be:	930b      	str	r3, [sp, #44]	; 0x2c
 80071c0:	e7d4      	b.n	800716c <_dtoa_r+0x2ac>
 80071c2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80071c4:	9306      	str	r3, [sp, #24]
 80071c6:	9308      	str	r3, [sp, #32]
 80071c8:	e7b7      	b.n	800713a <_dtoa_r+0x27a>
 80071ca:	3101      	adds	r1, #1
 80071cc:	0052      	lsls	r2, r2, #1
 80071ce:	e7b7      	b.n	8007140 <_dtoa_r+0x280>
 80071d0:	69eb      	ldr	r3, [r5, #28]
 80071d2:	9a03      	ldr	r2, [sp, #12]
 80071d4:	601a      	str	r2, [r3, #0]
 80071d6:	9b08      	ldr	r3, [sp, #32]
 80071d8:	2b0e      	cmp	r3, #14
 80071da:	f200 80a8 	bhi.w	800732e <_dtoa_r+0x46e>
 80071de:	2c00      	cmp	r4, #0
 80071e0:	f000 80a5 	beq.w	800732e <_dtoa_r+0x46e>
 80071e4:	f1bb 0f00 	cmp.w	fp, #0
 80071e8:	dd34      	ble.n	8007254 <_dtoa_r+0x394>
 80071ea:	4b9a      	ldr	r3, [pc, #616]	; (8007454 <_dtoa_r+0x594>)
 80071ec:	f00b 020f 	and.w	r2, fp, #15
 80071f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80071f4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80071f8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80071fc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007200:	ea4f 142b 	mov.w	r4, fp, asr #4
 8007204:	d016      	beq.n	8007234 <_dtoa_r+0x374>
 8007206:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800720a:	4b93      	ldr	r3, [pc, #588]	; (8007458 <_dtoa_r+0x598>)
 800720c:	2703      	movs	r7, #3
 800720e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007212:	f7f9 fa8b 	bl	800072c <__aeabi_ddiv>
 8007216:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800721a:	f004 040f 	and.w	r4, r4, #15
 800721e:	4e8e      	ldr	r6, [pc, #568]	; (8007458 <_dtoa_r+0x598>)
 8007220:	b954      	cbnz	r4, 8007238 <_dtoa_r+0x378>
 8007222:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007226:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800722a:	f7f9 fa7f 	bl	800072c <__aeabi_ddiv>
 800722e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007232:	e029      	b.n	8007288 <_dtoa_r+0x3c8>
 8007234:	2702      	movs	r7, #2
 8007236:	e7f2      	b.n	800721e <_dtoa_r+0x35e>
 8007238:	07e1      	lsls	r1, r4, #31
 800723a:	d508      	bpl.n	800724e <_dtoa_r+0x38e>
 800723c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007240:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007244:	f7f9 f948 	bl	80004d8 <__aeabi_dmul>
 8007248:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800724c:	3701      	adds	r7, #1
 800724e:	1064      	asrs	r4, r4, #1
 8007250:	3608      	adds	r6, #8
 8007252:	e7e5      	b.n	8007220 <_dtoa_r+0x360>
 8007254:	f000 80a5 	beq.w	80073a2 <_dtoa_r+0x4e2>
 8007258:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800725c:	f1cb 0400 	rsb	r4, fp, #0
 8007260:	4b7c      	ldr	r3, [pc, #496]	; (8007454 <_dtoa_r+0x594>)
 8007262:	f004 020f 	and.w	r2, r4, #15
 8007266:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800726a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800726e:	f7f9 f933 	bl	80004d8 <__aeabi_dmul>
 8007272:	2702      	movs	r7, #2
 8007274:	2300      	movs	r3, #0
 8007276:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800727a:	4e77      	ldr	r6, [pc, #476]	; (8007458 <_dtoa_r+0x598>)
 800727c:	1124      	asrs	r4, r4, #4
 800727e:	2c00      	cmp	r4, #0
 8007280:	f040 8084 	bne.w	800738c <_dtoa_r+0x4cc>
 8007284:	2b00      	cmp	r3, #0
 8007286:	d1d2      	bne.n	800722e <_dtoa_r+0x36e>
 8007288:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800728c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007290:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007292:	2b00      	cmp	r3, #0
 8007294:	f000 8087 	beq.w	80073a6 <_dtoa_r+0x4e6>
 8007298:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800729c:	2200      	movs	r2, #0
 800729e:	4b6f      	ldr	r3, [pc, #444]	; (800745c <_dtoa_r+0x59c>)
 80072a0:	f7f9 fb8c 	bl	80009bc <__aeabi_dcmplt>
 80072a4:	2800      	cmp	r0, #0
 80072a6:	d07e      	beq.n	80073a6 <_dtoa_r+0x4e6>
 80072a8:	9b08      	ldr	r3, [sp, #32]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d07b      	beq.n	80073a6 <_dtoa_r+0x4e6>
 80072ae:	9b06      	ldr	r3, [sp, #24]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	dd38      	ble.n	8007326 <_dtoa_r+0x466>
 80072b4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80072b8:	2200      	movs	r2, #0
 80072ba:	4b69      	ldr	r3, [pc, #420]	; (8007460 <_dtoa_r+0x5a0>)
 80072bc:	f7f9 f90c 	bl	80004d8 <__aeabi_dmul>
 80072c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80072c4:	9c06      	ldr	r4, [sp, #24]
 80072c6:	f10b 38ff 	add.w	r8, fp, #4294967295
 80072ca:	3701      	adds	r7, #1
 80072cc:	4638      	mov	r0, r7
 80072ce:	f7f9 f899 	bl	8000404 <__aeabi_i2d>
 80072d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80072d6:	f7f9 f8ff 	bl	80004d8 <__aeabi_dmul>
 80072da:	2200      	movs	r2, #0
 80072dc:	4b61      	ldr	r3, [pc, #388]	; (8007464 <_dtoa_r+0x5a4>)
 80072de:	f7f8 ff45 	bl	800016c <__adddf3>
 80072e2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80072e6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80072ea:	9611      	str	r6, [sp, #68]	; 0x44
 80072ec:	2c00      	cmp	r4, #0
 80072ee:	d15d      	bne.n	80073ac <_dtoa_r+0x4ec>
 80072f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80072f4:	2200      	movs	r2, #0
 80072f6:	4b5c      	ldr	r3, [pc, #368]	; (8007468 <_dtoa_r+0x5a8>)
 80072f8:	f7f8 ff36 	bl	8000168 <__aeabi_dsub>
 80072fc:	4602      	mov	r2, r0
 80072fe:	460b      	mov	r3, r1
 8007300:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007304:	4633      	mov	r3, r6
 8007306:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007308:	f7f9 fb76 	bl	80009f8 <__aeabi_dcmpgt>
 800730c:	2800      	cmp	r0, #0
 800730e:	f040 8295 	bne.w	800783c <_dtoa_r+0x97c>
 8007312:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007316:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007318:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800731c:	f7f9 fb4e 	bl	80009bc <__aeabi_dcmplt>
 8007320:	2800      	cmp	r0, #0
 8007322:	f040 8289 	bne.w	8007838 <_dtoa_r+0x978>
 8007326:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800732a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800732e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007330:	2b00      	cmp	r3, #0
 8007332:	f2c0 8151 	blt.w	80075d8 <_dtoa_r+0x718>
 8007336:	f1bb 0f0e 	cmp.w	fp, #14
 800733a:	f300 814d 	bgt.w	80075d8 <_dtoa_r+0x718>
 800733e:	4b45      	ldr	r3, [pc, #276]	; (8007454 <_dtoa_r+0x594>)
 8007340:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007344:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007348:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800734c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800734e:	2b00      	cmp	r3, #0
 8007350:	f280 80da 	bge.w	8007508 <_dtoa_r+0x648>
 8007354:	9b08      	ldr	r3, [sp, #32]
 8007356:	2b00      	cmp	r3, #0
 8007358:	f300 80d6 	bgt.w	8007508 <_dtoa_r+0x648>
 800735c:	f040 826b 	bne.w	8007836 <_dtoa_r+0x976>
 8007360:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007364:	2200      	movs	r2, #0
 8007366:	4b40      	ldr	r3, [pc, #256]	; (8007468 <_dtoa_r+0x5a8>)
 8007368:	f7f9 f8b6 	bl	80004d8 <__aeabi_dmul>
 800736c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007370:	f7f9 fb38 	bl	80009e4 <__aeabi_dcmpge>
 8007374:	9c08      	ldr	r4, [sp, #32]
 8007376:	4626      	mov	r6, r4
 8007378:	2800      	cmp	r0, #0
 800737a:	f040 8241 	bne.w	8007800 <_dtoa_r+0x940>
 800737e:	2331      	movs	r3, #49	; 0x31
 8007380:	9f03      	ldr	r7, [sp, #12]
 8007382:	f10b 0b01 	add.w	fp, fp, #1
 8007386:	f807 3b01 	strb.w	r3, [r7], #1
 800738a:	e23d      	b.n	8007808 <_dtoa_r+0x948>
 800738c:	07e2      	lsls	r2, r4, #31
 800738e:	d505      	bpl.n	800739c <_dtoa_r+0x4dc>
 8007390:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007394:	f7f9 f8a0 	bl	80004d8 <__aeabi_dmul>
 8007398:	2301      	movs	r3, #1
 800739a:	3701      	adds	r7, #1
 800739c:	1064      	asrs	r4, r4, #1
 800739e:	3608      	adds	r6, #8
 80073a0:	e76d      	b.n	800727e <_dtoa_r+0x3be>
 80073a2:	2702      	movs	r7, #2
 80073a4:	e770      	b.n	8007288 <_dtoa_r+0x3c8>
 80073a6:	46d8      	mov	r8, fp
 80073a8:	9c08      	ldr	r4, [sp, #32]
 80073aa:	e78f      	b.n	80072cc <_dtoa_r+0x40c>
 80073ac:	9903      	ldr	r1, [sp, #12]
 80073ae:	4b29      	ldr	r3, [pc, #164]	; (8007454 <_dtoa_r+0x594>)
 80073b0:	4421      	add	r1, r4
 80073b2:	9112      	str	r1, [sp, #72]	; 0x48
 80073b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80073b6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80073ba:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80073be:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80073c2:	2900      	cmp	r1, #0
 80073c4:	d054      	beq.n	8007470 <_dtoa_r+0x5b0>
 80073c6:	2000      	movs	r0, #0
 80073c8:	4928      	ldr	r1, [pc, #160]	; (800746c <_dtoa_r+0x5ac>)
 80073ca:	f7f9 f9af 	bl	800072c <__aeabi_ddiv>
 80073ce:	463b      	mov	r3, r7
 80073d0:	4632      	mov	r2, r6
 80073d2:	f7f8 fec9 	bl	8000168 <__aeabi_dsub>
 80073d6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80073da:	9f03      	ldr	r7, [sp, #12]
 80073dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80073e0:	f7f9 fb2a 	bl	8000a38 <__aeabi_d2iz>
 80073e4:	4604      	mov	r4, r0
 80073e6:	f7f9 f80d 	bl	8000404 <__aeabi_i2d>
 80073ea:	4602      	mov	r2, r0
 80073ec:	460b      	mov	r3, r1
 80073ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80073f2:	f7f8 feb9 	bl	8000168 <__aeabi_dsub>
 80073f6:	4602      	mov	r2, r0
 80073f8:	460b      	mov	r3, r1
 80073fa:	3430      	adds	r4, #48	; 0x30
 80073fc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007400:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007404:	f807 4b01 	strb.w	r4, [r7], #1
 8007408:	f7f9 fad8 	bl	80009bc <__aeabi_dcmplt>
 800740c:	2800      	cmp	r0, #0
 800740e:	d173      	bne.n	80074f8 <_dtoa_r+0x638>
 8007410:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007414:	2000      	movs	r0, #0
 8007416:	4911      	ldr	r1, [pc, #68]	; (800745c <_dtoa_r+0x59c>)
 8007418:	f7f8 fea6 	bl	8000168 <__aeabi_dsub>
 800741c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007420:	f7f9 facc 	bl	80009bc <__aeabi_dcmplt>
 8007424:	2800      	cmp	r0, #0
 8007426:	f040 80b6 	bne.w	8007596 <_dtoa_r+0x6d6>
 800742a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800742c:	429f      	cmp	r7, r3
 800742e:	f43f af7a 	beq.w	8007326 <_dtoa_r+0x466>
 8007432:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007436:	2200      	movs	r2, #0
 8007438:	4b09      	ldr	r3, [pc, #36]	; (8007460 <_dtoa_r+0x5a0>)
 800743a:	f7f9 f84d 	bl	80004d8 <__aeabi_dmul>
 800743e:	2200      	movs	r2, #0
 8007440:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007444:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007448:	4b05      	ldr	r3, [pc, #20]	; (8007460 <_dtoa_r+0x5a0>)
 800744a:	f7f9 f845 	bl	80004d8 <__aeabi_dmul>
 800744e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007452:	e7c3      	b.n	80073dc <_dtoa_r+0x51c>
 8007454:	0800a7a8 	.word	0x0800a7a8
 8007458:	0800a780 	.word	0x0800a780
 800745c:	3ff00000 	.word	0x3ff00000
 8007460:	40240000 	.word	0x40240000
 8007464:	401c0000 	.word	0x401c0000
 8007468:	40140000 	.word	0x40140000
 800746c:	3fe00000 	.word	0x3fe00000
 8007470:	4630      	mov	r0, r6
 8007472:	4639      	mov	r1, r7
 8007474:	f7f9 f830 	bl	80004d8 <__aeabi_dmul>
 8007478:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800747a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800747e:	9c03      	ldr	r4, [sp, #12]
 8007480:	9314      	str	r3, [sp, #80]	; 0x50
 8007482:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007486:	f7f9 fad7 	bl	8000a38 <__aeabi_d2iz>
 800748a:	9015      	str	r0, [sp, #84]	; 0x54
 800748c:	f7f8 ffba 	bl	8000404 <__aeabi_i2d>
 8007490:	4602      	mov	r2, r0
 8007492:	460b      	mov	r3, r1
 8007494:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007498:	f7f8 fe66 	bl	8000168 <__aeabi_dsub>
 800749c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800749e:	4606      	mov	r6, r0
 80074a0:	3330      	adds	r3, #48	; 0x30
 80074a2:	f804 3b01 	strb.w	r3, [r4], #1
 80074a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80074a8:	460f      	mov	r7, r1
 80074aa:	429c      	cmp	r4, r3
 80074ac:	f04f 0200 	mov.w	r2, #0
 80074b0:	d124      	bne.n	80074fc <_dtoa_r+0x63c>
 80074b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80074b6:	4baf      	ldr	r3, [pc, #700]	; (8007774 <_dtoa_r+0x8b4>)
 80074b8:	f7f8 fe58 	bl	800016c <__adddf3>
 80074bc:	4602      	mov	r2, r0
 80074be:	460b      	mov	r3, r1
 80074c0:	4630      	mov	r0, r6
 80074c2:	4639      	mov	r1, r7
 80074c4:	f7f9 fa98 	bl	80009f8 <__aeabi_dcmpgt>
 80074c8:	2800      	cmp	r0, #0
 80074ca:	d163      	bne.n	8007594 <_dtoa_r+0x6d4>
 80074cc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80074d0:	2000      	movs	r0, #0
 80074d2:	49a8      	ldr	r1, [pc, #672]	; (8007774 <_dtoa_r+0x8b4>)
 80074d4:	f7f8 fe48 	bl	8000168 <__aeabi_dsub>
 80074d8:	4602      	mov	r2, r0
 80074da:	460b      	mov	r3, r1
 80074dc:	4630      	mov	r0, r6
 80074de:	4639      	mov	r1, r7
 80074e0:	f7f9 fa6c 	bl	80009bc <__aeabi_dcmplt>
 80074e4:	2800      	cmp	r0, #0
 80074e6:	f43f af1e 	beq.w	8007326 <_dtoa_r+0x466>
 80074ea:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80074ec:	1e7b      	subs	r3, r7, #1
 80074ee:	9314      	str	r3, [sp, #80]	; 0x50
 80074f0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80074f4:	2b30      	cmp	r3, #48	; 0x30
 80074f6:	d0f8      	beq.n	80074ea <_dtoa_r+0x62a>
 80074f8:	46c3      	mov	fp, r8
 80074fa:	e03b      	b.n	8007574 <_dtoa_r+0x6b4>
 80074fc:	4b9e      	ldr	r3, [pc, #632]	; (8007778 <_dtoa_r+0x8b8>)
 80074fe:	f7f8 ffeb 	bl	80004d8 <__aeabi_dmul>
 8007502:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007506:	e7bc      	b.n	8007482 <_dtoa_r+0x5c2>
 8007508:	9f03      	ldr	r7, [sp, #12]
 800750a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800750e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007512:	4640      	mov	r0, r8
 8007514:	4649      	mov	r1, r9
 8007516:	f7f9 f909 	bl	800072c <__aeabi_ddiv>
 800751a:	f7f9 fa8d 	bl	8000a38 <__aeabi_d2iz>
 800751e:	4604      	mov	r4, r0
 8007520:	f7f8 ff70 	bl	8000404 <__aeabi_i2d>
 8007524:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007528:	f7f8 ffd6 	bl	80004d8 <__aeabi_dmul>
 800752c:	4602      	mov	r2, r0
 800752e:	460b      	mov	r3, r1
 8007530:	4640      	mov	r0, r8
 8007532:	4649      	mov	r1, r9
 8007534:	f7f8 fe18 	bl	8000168 <__aeabi_dsub>
 8007538:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800753c:	f807 6b01 	strb.w	r6, [r7], #1
 8007540:	9e03      	ldr	r6, [sp, #12]
 8007542:	f8dd c020 	ldr.w	ip, [sp, #32]
 8007546:	1bbe      	subs	r6, r7, r6
 8007548:	45b4      	cmp	ip, r6
 800754a:	4602      	mov	r2, r0
 800754c:	460b      	mov	r3, r1
 800754e:	d136      	bne.n	80075be <_dtoa_r+0x6fe>
 8007550:	f7f8 fe0c 	bl	800016c <__adddf3>
 8007554:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007558:	4680      	mov	r8, r0
 800755a:	4689      	mov	r9, r1
 800755c:	f7f9 fa4c 	bl	80009f8 <__aeabi_dcmpgt>
 8007560:	bb58      	cbnz	r0, 80075ba <_dtoa_r+0x6fa>
 8007562:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007566:	4640      	mov	r0, r8
 8007568:	4649      	mov	r1, r9
 800756a:	f7f9 fa1d 	bl	80009a8 <__aeabi_dcmpeq>
 800756e:	b108      	cbz	r0, 8007574 <_dtoa_r+0x6b4>
 8007570:	07e3      	lsls	r3, r4, #31
 8007572:	d422      	bmi.n	80075ba <_dtoa_r+0x6fa>
 8007574:	4651      	mov	r1, sl
 8007576:	4628      	mov	r0, r5
 8007578:	f000 fbc2 	bl	8007d00 <_Bfree>
 800757c:	2300      	movs	r3, #0
 800757e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007580:	703b      	strb	r3, [r7, #0]
 8007582:	f10b 0301 	add.w	r3, fp, #1
 8007586:	6013      	str	r3, [r2, #0]
 8007588:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800758a:	2b00      	cmp	r3, #0
 800758c:	f43f ace6 	beq.w	8006f5c <_dtoa_r+0x9c>
 8007590:	601f      	str	r7, [r3, #0]
 8007592:	e4e3      	b.n	8006f5c <_dtoa_r+0x9c>
 8007594:	4627      	mov	r7, r4
 8007596:	463b      	mov	r3, r7
 8007598:	461f      	mov	r7, r3
 800759a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800759e:	2a39      	cmp	r2, #57	; 0x39
 80075a0:	d107      	bne.n	80075b2 <_dtoa_r+0x6f2>
 80075a2:	9a03      	ldr	r2, [sp, #12]
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d1f7      	bne.n	8007598 <_dtoa_r+0x6d8>
 80075a8:	2230      	movs	r2, #48	; 0x30
 80075aa:	9903      	ldr	r1, [sp, #12]
 80075ac:	f108 0801 	add.w	r8, r8, #1
 80075b0:	700a      	strb	r2, [r1, #0]
 80075b2:	781a      	ldrb	r2, [r3, #0]
 80075b4:	3201      	adds	r2, #1
 80075b6:	701a      	strb	r2, [r3, #0]
 80075b8:	e79e      	b.n	80074f8 <_dtoa_r+0x638>
 80075ba:	46d8      	mov	r8, fp
 80075bc:	e7eb      	b.n	8007596 <_dtoa_r+0x6d6>
 80075be:	2200      	movs	r2, #0
 80075c0:	4b6d      	ldr	r3, [pc, #436]	; (8007778 <_dtoa_r+0x8b8>)
 80075c2:	f7f8 ff89 	bl	80004d8 <__aeabi_dmul>
 80075c6:	2200      	movs	r2, #0
 80075c8:	2300      	movs	r3, #0
 80075ca:	4680      	mov	r8, r0
 80075cc:	4689      	mov	r9, r1
 80075ce:	f7f9 f9eb 	bl	80009a8 <__aeabi_dcmpeq>
 80075d2:	2800      	cmp	r0, #0
 80075d4:	d09b      	beq.n	800750e <_dtoa_r+0x64e>
 80075d6:	e7cd      	b.n	8007574 <_dtoa_r+0x6b4>
 80075d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80075da:	2a00      	cmp	r2, #0
 80075dc:	f000 80c4 	beq.w	8007768 <_dtoa_r+0x8a8>
 80075e0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80075e2:	2a01      	cmp	r2, #1
 80075e4:	f300 80a8 	bgt.w	8007738 <_dtoa_r+0x878>
 80075e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80075ea:	2a00      	cmp	r2, #0
 80075ec:	f000 80a0 	beq.w	8007730 <_dtoa_r+0x870>
 80075f0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80075f4:	464f      	mov	r7, r9
 80075f6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80075f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075fa:	2101      	movs	r1, #1
 80075fc:	441a      	add	r2, r3
 80075fe:	4628      	mov	r0, r5
 8007600:	4499      	add	r9, r3
 8007602:	9209      	str	r2, [sp, #36]	; 0x24
 8007604:	f000 fc7c 	bl	8007f00 <__i2b>
 8007608:	4606      	mov	r6, r0
 800760a:	b15f      	cbz	r7, 8007624 <_dtoa_r+0x764>
 800760c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800760e:	2b00      	cmp	r3, #0
 8007610:	dd08      	ble.n	8007624 <_dtoa_r+0x764>
 8007612:	42bb      	cmp	r3, r7
 8007614:	bfa8      	it	ge
 8007616:	463b      	movge	r3, r7
 8007618:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800761a:	eba9 0903 	sub.w	r9, r9, r3
 800761e:	1aff      	subs	r7, r7, r3
 8007620:	1ad3      	subs	r3, r2, r3
 8007622:	9309      	str	r3, [sp, #36]	; 0x24
 8007624:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007626:	b1f3      	cbz	r3, 8007666 <_dtoa_r+0x7a6>
 8007628:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800762a:	2b00      	cmp	r3, #0
 800762c:	f000 80a0 	beq.w	8007770 <_dtoa_r+0x8b0>
 8007630:	2c00      	cmp	r4, #0
 8007632:	dd10      	ble.n	8007656 <_dtoa_r+0x796>
 8007634:	4631      	mov	r1, r6
 8007636:	4622      	mov	r2, r4
 8007638:	4628      	mov	r0, r5
 800763a:	f000 fd1f 	bl	800807c <__pow5mult>
 800763e:	4652      	mov	r2, sl
 8007640:	4601      	mov	r1, r0
 8007642:	4606      	mov	r6, r0
 8007644:	4628      	mov	r0, r5
 8007646:	f000 fc71 	bl	8007f2c <__multiply>
 800764a:	4680      	mov	r8, r0
 800764c:	4651      	mov	r1, sl
 800764e:	4628      	mov	r0, r5
 8007650:	f000 fb56 	bl	8007d00 <_Bfree>
 8007654:	46c2      	mov	sl, r8
 8007656:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007658:	1b1a      	subs	r2, r3, r4
 800765a:	d004      	beq.n	8007666 <_dtoa_r+0x7a6>
 800765c:	4651      	mov	r1, sl
 800765e:	4628      	mov	r0, r5
 8007660:	f000 fd0c 	bl	800807c <__pow5mult>
 8007664:	4682      	mov	sl, r0
 8007666:	2101      	movs	r1, #1
 8007668:	4628      	mov	r0, r5
 800766a:	f000 fc49 	bl	8007f00 <__i2b>
 800766e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007670:	4604      	mov	r4, r0
 8007672:	2b00      	cmp	r3, #0
 8007674:	f340 8082 	ble.w	800777c <_dtoa_r+0x8bc>
 8007678:	461a      	mov	r2, r3
 800767a:	4601      	mov	r1, r0
 800767c:	4628      	mov	r0, r5
 800767e:	f000 fcfd 	bl	800807c <__pow5mult>
 8007682:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007684:	4604      	mov	r4, r0
 8007686:	2b01      	cmp	r3, #1
 8007688:	dd7b      	ble.n	8007782 <_dtoa_r+0x8c2>
 800768a:	f04f 0800 	mov.w	r8, #0
 800768e:	6923      	ldr	r3, [r4, #16]
 8007690:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007694:	6918      	ldr	r0, [r3, #16]
 8007696:	f000 fbe5 	bl	8007e64 <__hi0bits>
 800769a:	f1c0 0020 	rsb	r0, r0, #32
 800769e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076a0:	4418      	add	r0, r3
 80076a2:	f010 001f 	ands.w	r0, r0, #31
 80076a6:	f000 8092 	beq.w	80077ce <_dtoa_r+0x90e>
 80076aa:	f1c0 0320 	rsb	r3, r0, #32
 80076ae:	2b04      	cmp	r3, #4
 80076b0:	f340 8085 	ble.w	80077be <_dtoa_r+0x8fe>
 80076b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076b6:	f1c0 001c 	rsb	r0, r0, #28
 80076ba:	4403      	add	r3, r0
 80076bc:	4481      	add	r9, r0
 80076be:	4407      	add	r7, r0
 80076c0:	9309      	str	r3, [sp, #36]	; 0x24
 80076c2:	f1b9 0f00 	cmp.w	r9, #0
 80076c6:	dd05      	ble.n	80076d4 <_dtoa_r+0x814>
 80076c8:	4651      	mov	r1, sl
 80076ca:	464a      	mov	r2, r9
 80076cc:	4628      	mov	r0, r5
 80076ce:	f000 fd2f 	bl	8008130 <__lshift>
 80076d2:	4682      	mov	sl, r0
 80076d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	dd05      	ble.n	80076e6 <_dtoa_r+0x826>
 80076da:	4621      	mov	r1, r4
 80076dc:	461a      	mov	r2, r3
 80076de:	4628      	mov	r0, r5
 80076e0:	f000 fd26 	bl	8008130 <__lshift>
 80076e4:	4604      	mov	r4, r0
 80076e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d072      	beq.n	80077d2 <_dtoa_r+0x912>
 80076ec:	4621      	mov	r1, r4
 80076ee:	4650      	mov	r0, sl
 80076f0:	f000 fd8a 	bl	8008208 <__mcmp>
 80076f4:	2800      	cmp	r0, #0
 80076f6:	da6c      	bge.n	80077d2 <_dtoa_r+0x912>
 80076f8:	2300      	movs	r3, #0
 80076fa:	4651      	mov	r1, sl
 80076fc:	220a      	movs	r2, #10
 80076fe:	4628      	mov	r0, r5
 8007700:	f000 fb20 	bl	8007d44 <__multadd>
 8007704:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007706:	4682      	mov	sl, r0
 8007708:	f10b 3bff 	add.w	fp, fp, #4294967295
 800770c:	2b00      	cmp	r3, #0
 800770e:	f000 81ac 	beq.w	8007a6a <_dtoa_r+0xbaa>
 8007712:	2300      	movs	r3, #0
 8007714:	4631      	mov	r1, r6
 8007716:	220a      	movs	r2, #10
 8007718:	4628      	mov	r0, r5
 800771a:	f000 fb13 	bl	8007d44 <__multadd>
 800771e:	9b06      	ldr	r3, [sp, #24]
 8007720:	4606      	mov	r6, r0
 8007722:	2b00      	cmp	r3, #0
 8007724:	f300 8093 	bgt.w	800784e <_dtoa_r+0x98e>
 8007728:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800772a:	2b02      	cmp	r3, #2
 800772c:	dc59      	bgt.n	80077e2 <_dtoa_r+0x922>
 800772e:	e08e      	b.n	800784e <_dtoa_r+0x98e>
 8007730:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007732:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007736:	e75d      	b.n	80075f4 <_dtoa_r+0x734>
 8007738:	9b08      	ldr	r3, [sp, #32]
 800773a:	1e5c      	subs	r4, r3, #1
 800773c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800773e:	42a3      	cmp	r3, r4
 8007740:	bfbf      	itttt	lt
 8007742:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007744:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8007746:	1ae3      	sublt	r3, r4, r3
 8007748:	18d2      	addlt	r2, r2, r3
 800774a:	bfa8      	it	ge
 800774c:	1b1c      	subge	r4, r3, r4
 800774e:	9b08      	ldr	r3, [sp, #32]
 8007750:	bfbe      	ittt	lt
 8007752:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007754:	920e      	strlt	r2, [sp, #56]	; 0x38
 8007756:	2400      	movlt	r4, #0
 8007758:	2b00      	cmp	r3, #0
 800775a:	bfb5      	itete	lt
 800775c:	eba9 0703 	sublt.w	r7, r9, r3
 8007760:	464f      	movge	r7, r9
 8007762:	2300      	movlt	r3, #0
 8007764:	9b08      	ldrge	r3, [sp, #32]
 8007766:	e747      	b.n	80075f8 <_dtoa_r+0x738>
 8007768:	464f      	mov	r7, r9
 800776a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800776c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800776e:	e74c      	b.n	800760a <_dtoa_r+0x74a>
 8007770:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007772:	e773      	b.n	800765c <_dtoa_r+0x79c>
 8007774:	3fe00000 	.word	0x3fe00000
 8007778:	40240000 	.word	0x40240000
 800777c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800777e:	2b01      	cmp	r3, #1
 8007780:	dc18      	bgt.n	80077b4 <_dtoa_r+0x8f4>
 8007782:	9b04      	ldr	r3, [sp, #16]
 8007784:	b9b3      	cbnz	r3, 80077b4 <_dtoa_r+0x8f4>
 8007786:	9b05      	ldr	r3, [sp, #20]
 8007788:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800778c:	b993      	cbnz	r3, 80077b4 <_dtoa_r+0x8f4>
 800778e:	9b05      	ldr	r3, [sp, #20]
 8007790:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007794:	0d1b      	lsrs	r3, r3, #20
 8007796:	051b      	lsls	r3, r3, #20
 8007798:	b17b      	cbz	r3, 80077ba <_dtoa_r+0x8fa>
 800779a:	f04f 0801 	mov.w	r8, #1
 800779e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077a0:	f109 0901 	add.w	r9, r9, #1
 80077a4:	3301      	adds	r3, #1
 80077a6:	9309      	str	r3, [sp, #36]	; 0x24
 80077a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	f47f af6f 	bne.w	800768e <_dtoa_r+0x7ce>
 80077b0:	2001      	movs	r0, #1
 80077b2:	e774      	b.n	800769e <_dtoa_r+0x7de>
 80077b4:	f04f 0800 	mov.w	r8, #0
 80077b8:	e7f6      	b.n	80077a8 <_dtoa_r+0x8e8>
 80077ba:	4698      	mov	r8, r3
 80077bc:	e7f4      	b.n	80077a8 <_dtoa_r+0x8e8>
 80077be:	d080      	beq.n	80076c2 <_dtoa_r+0x802>
 80077c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077c2:	331c      	adds	r3, #28
 80077c4:	441a      	add	r2, r3
 80077c6:	4499      	add	r9, r3
 80077c8:	441f      	add	r7, r3
 80077ca:	9209      	str	r2, [sp, #36]	; 0x24
 80077cc:	e779      	b.n	80076c2 <_dtoa_r+0x802>
 80077ce:	4603      	mov	r3, r0
 80077d0:	e7f6      	b.n	80077c0 <_dtoa_r+0x900>
 80077d2:	9b08      	ldr	r3, [sp, #32]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	dc34      	bgt.n	8007842 <_dtoa_r+0x982>
 80077d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80077da:	2b02      	cmp	r3, #2
 80077dc:	dd31      	ble.n	8007842 <_dtoa_r+0x982>
 80077de:	9b08      	ldr	r3, [sp, #32]
 80077e0:	9306      	str	r3, [sp, #24]
 80077e2:	9b06      	ldr	r3, [sp, #24]
 80077e4:	b963      	cbnz	r3, 8007800 <_dtoa_r+0x940>
 80077e6:	4621      	mov	r1, r4
 80077e8:	2205      	movs	r2, #5
 80077ea:	4628      	mov	r0, r5
 80077ec:	f000 faaa 	bl	8007d44 <__multadd>
 80077f0:	4601      	mov	r1, r0
 80077f2:	4604      	mov	r4, r0
 80077f4:	4650      	mov	r0, sl
 80077f6:	f000 fd07 	bl	8008208 <__mcmp>
 80077fa:	2800      	cmp	r0, #0
 80077fc:	f73f adbf 	bgt.w	800737e <_dtoa_r+0x4be>
 8007800:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007802:	9f03      	ldr	r7, [sp, #12]
 8007804:	ea6f 0b03 	mvn.w	fp, r3
 8007808:	f04f 0800 	mov.w	r8, #0
 800780c:	4621      	mov	r1, r4
 800780e:	4628      	mov	r0, r5
 8007810:	f000 fa76 	bl	8007d00 <_Bfree>
 8007814:	2e00      	cmp	r6, #0
 8007816:	f43f aead 	beq.w	8007574 <_dtoa_r+0x6b4>
 800781a:	f1b8 0f00 	cmp.w	r8, #0
 800781e:	d005      	beq.n	800782c <_dtoa_r+0x96c>
 8007820:	45b0      	cmp	r8, r6
 8007822:	d003      	beq.n	800782c <_dtoa_r+0x96c>
 8007824:	4641      	mov	r1, r8
 8007826:	4628      	mov	r0, r5
 8007828:	f000 fa6a 	bl	8007d00 <_Bfree>
 800782c:	4631      	mov	r1, r6
 800782e:	4628      	mov	r0, r5
 8007830:	f000 fa66 	bl	8007d00 <_Bfree>
 8007834:	e69e      	b.n	8007574 <_dtoa_r+0x6b4>
 8007836:	2400      	movs	r4, #0
 8007838:	4626      	mov	r6, r4
 800783a:	e7e1      	b.n	8007800 <_dtoa_r+0x940>
 800783c:	46c3      	mov	fp, r8
 800783e:	4626      	mov	r6, r4
 8007840:	e59d      	b.n	800737e <_dtoa_r+0x4be>
 8007842:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007844:	2b00      	cmp	r3, #0
 8007846:	f000 80c8 	beq.w	80079da <_dtoa_r+0xb1a>
 800784a:	9b08      	ldr	r3, [sp, #32]
 800784c:	9306      	str	r3, [sp, #24]
 800784e:	2f00      	cmp	r7, #0
 8007850:	dd05      	ble.n	800785e <_dtoa_r+0x99e>
 8007852:	4631      	mov	r1, r6
 8007854:	463a      	mov	r2, r7
 8007856:	4628      	mov	r0, r5
 8007858:	f000 fc6a 	bl	8008130 <__lshift>
 800785c:	4606      	mov	r6, r0
 800785e:	f1b8 0f00 	cmp.w	r8, #0
 8007862:	d05b      	beq.n	800791c <_dtoa_r+0xa5c>
 8007864:	4628      	mov	r0, r5
 8007866:	6871      	ldr	r1, [r6, #4]
 8007868:	f000 fa0a 	bl	8007c80 <_Balloc>
 800786c:	4607      	mov	r7, r0
 800786e:	b928      	cbnz	r0, 800787c <_dtoa_r+0x9bc>
 8007870:	4602      	mov	r2, r0
 8007872:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007876:	4b81      	ldr	r3, [pc, #516]	; (8007a7c <_dtoa_r+0xbbc>)
 8007878:	f7ff bb36 	b.w	8006ee8 <_dtoa_r+0x28>
 800787c:	6932      	ldr	r2, [r6, #16]
 800787e:	f106 010c 	add.w	r1, r6, #12
 8007882:	3202      	adds	r2, #2
 8007884:	0092      	lsls	r2, r2, #2
 8007886:	300c      	adds	r0, #12
 8007888:	f001 ff72 	bl	8009770 <memcpy>
 800788c:	2201      	movs	r2, #1
 800788e:	4639      	mov	r1, r7
 8007890:	4628      	mov	r0, r5
 8007892:	f000 fc4d 	bl	8008130 <__lshift>
 8007896:	46b0      	mov	r8, r6
 8007898:	4606      	mov	r6, r0
 800789a:	9b03      	ldr	r3, [sp, #12]
 800789c:	9a03      	ldr	r2, [sp, #12]
 800789e:	3301      	adds	r3, #1
 80078a0:	9308      	str	r3, [sp, #32]
 80078a2:	9b06      	ldr	r3, [sp, #24]
 80078a4:	4413      	add	r3, r2
 80078a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80078a8:	9b04      	ldr	r3, [sp, #16]
 80078aa:	f003 0301 	and.w	r3, r3, #1
 80078ae:	930a      	str	r3, [sp, #40]	; 0x28
 80078b0:	9b08      	ldr	r3, [sp, #32]
 80078b2:	4621      	mov	r1, r4
 80078b4:	3b01      	subs	r3, #1
 80078b6:	4650      	mov	r0, sl
 80078b8:	9304      	str	r3, [sp, #16]
 80078ba:	f7ff fa77 	bl	8006dac <quorem>
 80078be:	4641      	mov	r1, r8
 80078c0:	9006      	str	r0, [sp, #24]
 80078c2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80078c6:	4650      	mov	r0, sl
 80078c8:	f000 fc9e 	bl	8008208 <__mcmp>
 80078cc:	4632      	mov	r2, r6
 80078ce:	9009      	str	r0, [sp, #36]	; 0x24
 80078d0:	4621      	mov	r1, r4
 80078d2:	4628      	mov	r0, r5
 80078d4:	f000 fcb4 	bl	8008240 <__mdiff>
 80078d8:	68c2      	ldr	r2, [r0, #12]
 80078da:	4607      	mov	r7, r0
 80078dc:	bb02      	cbnz	r2, 8007920 <_dtoa_r+0xa60>
 80078de:	4601      	mov	r1, r0
 80078e0:	4650      	mov	r0, sl
 80078e2:	f000 fc91 	bl	8008208 <__mcmp>
 80078e6:	4602      	mov	r2, r0
 80078e8:	4639      	mov	r1, r7
 80078ea:	4628      	mov	r0, r5
 80078ec:	920c      	str	r2, [sp, #48]	; 0x30
 80078ee:	f000 fa07 	bl	8007d00 <_Bfree>
 80078f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80078f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80078f6:	9f08      	ldr	r7, [sp, #32]
 80078f8:	ea43 0102 	orr.w	r1, r3, r2
 80078fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078fe:	4319      	orrs	r1, r3
 8007900:	d110      	bne.n	8007924 <_dtoa_r+0xa64>
 8007902:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007906:	d029      	beq.n	800795c <_dtoa_r+0xa9c>
 8007908:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800790a:	2b00      	cmp	r3, #0
 800790c:	dd02      	ble.n	8007914 <_dtoa_r+0xa54>
 800790e:	9b06      	ldr	r3, [sp, #24]
 8007910:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007914:	9b04      	ldr	r3, [sp, #16]
 8007916:	f883 9000 	strb.w	r9, [r3]
 800791a:	e777      	b.n	800780c <_dtoa_r+0x94c>
 800791c:	4630      	mov	r0, r6
 800791e:	e7ba      	b.n	8007896 <_dtoa_r+0x9d6>
 8007920:	2201      	movs	r2, #1
 8007922:	e7e1      	b.n	80078e8 <_dtoa_r+0xa28>
 8007924:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007926:	2b00      	cmp	r3, #0
 8007928:	db04      	blt.n	8007934 <_dtoa_r+0xa74>
 800792a:	9922      	ldr	r1, [sp, #136]	; 0x88
 800792c:	430b      	orrs	r3, r1
 800792e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007930:	430b      	orrs	r3, r1
 8007932:	d120      	bne.n	8007976 <_dtoa_r+0xab6>
 8007934:	2a00      	cmp	r2, #0
 8007936:	dded      	ble.n	8007914 <_dtoa_r+0xa54>
 8007938:	4651      	mov	r1, sl
 800793a:	2201      	movs	r2, #1
 800793c:	4628      	mov	r0, r5
 800793e:	f000 fbf7 	bl	8008130 <__lshift>
 8007942:	4621      	mov	r1, r4
 8007944:	4682      	mov	sl, r0
 8007946:	f000 fc5f 	bl	8008208 <__mcmp>
 800794a:	2800      	cmp	r0, #0
 800794c:	dc03      	bgt.n	8007956 <_dtoa_r+0xa96>
 800794e:	d1e1      	bne.n	8007914 <_dtoa_r+0xa54>
 8007950:	f019 0f01 	tst.w	r9, #1
 8007954:	d0de      	beq.n	8007914 <_dtoa_r+0xa54>
 8007956:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800795a:	d1d8      	bne.n	800790e <_dtoa_r+0xa4e>
 800795c:	2339      	movs	r3, #57	; 0x39
 800795e:	9a04      	ldr	r2, [sp, #16]
 8007960:	7013      	strb	r3, [r2, #0]
 8007962:	463b      	mov	r3, r7
 8007964:	461f      	mov	r7, r3
 8007966:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800796a:	3b01      	subs	r3, #1
 800796c:	2a39      	cmp	r2, #57	; 0x39
 800796e:	d06b      	beq.n	8007a48 <_dtoa_r+0xb88>
 8007970:	3201      	adds	r2, #1
 8007972:	701a      	strb	r2, [r3, #0]
 8007974:	e74a      	b.n	800780c <_dtoa_r+0x94c>
 8007976:	2a00      	cmp	r2, #0
 8007978:	dd07      	ble.n	800798a <_dtoa_r+0xaca>
 800797a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800797e:	d0ed      	beq.n	800795c <_dtoa_r+0xa9c>
 8007980:	9a04      	ldr	r2, [sp, #16]
 8007982:	f109 0301 	add.w	r3, r9, #1
 8007986:	7013      	strb	r3, [r2, #0]
 8007988:	e740      	b.n	800780c <_dtoa_r+0x94c>
 800798a:	9b08      	ldr	r3, [sp, #32]
 800798c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800798e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007992:	4293      	cmp	r3, r2
 8007994:	d042      	beq.n	8007a1c <_dtoa_r+0xb5c>
 8007996:	4651      	mov	r1, sl
 8007998:	2300      	movs	r3, #0
 800799a:	220a      	movs	r2, #10
 800799c:	4628      	mov	r0, r5
 800799e:	f000 f9d1 	bl	8007d44 <__multadd>
 80079a2:	45b0      	cmp	r8, r6
 80079a4:	4682      	mov	sl, r0
 80079a6:	f04f 0300 	mov.w	r3, #0
 80079aa:	f04f 020a 	mov.w	r2, #10
 80079ae:	4641      	mov	r1, r8
 80079b0:	4628      	mov	r0, r5
 80079b2:	d107      	bne.n	80079c4 <_dtoa_r+0xb04>
 80079b4:	f000 f9c6 	bl	8007d44 <__multadd>
 80079b8:	4680      	mov	r8, r0
 80079ba:	4606      	mov	r6, r0
 80079bc:	9b08      	ldr	r3, [sp, #32]
 80079be:	3301      	adds	r3, #1
 80079c0:	9308      	str	r3, [sp, #32]
 80079c2:	e775      	b.n	80078b0 <_dtoa_r+0x9f0>
 80079c4:	f000 f9be 	bl	8007d44 <__multadd>
 80079c8:	4631      	mov	r1, r6
 80079ca:	4680      	mov	r8, r0
 80079cc:	2300      	movs	r3, #0
 80079ce:	220a      	movs	r2, #10
 80079d0:	4628      	mov	r0, r5
 80079d2:	f000 f9b7 	bl	8007d44 <__multadd>
 80079d6:	4606      	mov	r6, r0
 80079d8:	e7f0      	b.n	80079bc <_dtoa_r+0xafc>
 80079da:	9b08      	ldr	r3, [sp, #32]
 80079dc:	9306      	str	r3, [sp, #24]
 80079de:	9f03      	ldr	r7, [sp, #12]
 80079e0:	4621      	mov	r1, r4
 80079e2:	4650      	mov	r0, sl
 80079e4:	f7ff f9e2 	bl	8006dac <quorem>
 80079e8:	9b03      	ldr	r3, [sp, #12]
 80079ea:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80079ee:	f807 9b01 	strb.w	r9, [r7], #1
 80079f2:	1afa      	subs	r2, r7, r3
 80079f4:	9b06      	ldr	r3, [sp, #24]
 80079f6:	4293      	cmp	r3, r2
 80079f8:	dd07      	ble.n	8007a0a <_dtoa_r+0xb4a>
 80079fa:	4651      	mov	r1, sl
 80079fc:	2300      	movs	r3, #0
 80079fe:	220a      	movs	r2, #10
 8007a00:	4628      	mov	r0, r5
 8007a02:	f000 f99f 	bl	8007d44 <__multadd>
 8007a06:	4682      	mov	sl, r0
 8007a08:	e7ea      	b.n	80079e0 <_dtoa_r+0xb20>
 8007a0a:	9b06      	ldr	r3, [sp, #24]
 8007a0c:	f04f 0800 	mov.w	r8, #0
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	bfcc      	ite	gt
 8007a14:	461f      	movgt	r7, r3
 8007a16:	2701      	movle	r7, #1
 8007a18:	9b03      	ldr	r3, [sp, #12]
 8007a1a:	441f      	add	r7, r3
 8007a1c:	4651      	mov	r1, sl
 8007a1e:	2201      	movs	r2, #1
 8007a20:	4628      	mov	r0, r5
 8007a22:	f000 fb85 	bl	8008130 <__lshift>
 8007a26:	4621      	mov	r1, r4
 8007a28:	4682      	mov	sl, r0
 8007a2a:	f000 fbed 	bl	8008208 <__mcmp>
 8007a2e:	2800      	cmp	r0, #0
 8007a30:	dc97      	bgt.n	8007962 <_dtoa_r+0xaa2>
 8007a32:	d102      	bne.n	8007a3a <_dtoa_r+0xb7a>
 8007a34:	f019 0f01 	tst.w	r9, #1
 8007a38:	d193      	bne.n	8007962 <_dtoa_r+0xaa2>
 8007a3a:	463b      	mov	r3, r7
 8007a3c:	461f      	mov	r7, r3
 8007a3e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007a42:	2a30      	cmp	r2, #48	; 0x30
 8007a44:	d0fa      	beq.n	8007a3c <_dtoa_r+0xb7c>
 8007a46:	e6e1      	b.n	800780c <_dtoa_r+0x94c>
 8007a48:	9a03      	ldr	r2, [sp, #12]
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	d18a      	bne.n	8007964 <_dtoa_r+0xaa4>
 8007a4e:	2331      	movs	r3, #49	; 0x31
 8007a50:	f10b 0b01 	add.w	fp, fp, #1
 8007a54:	e797      	b.n	8007986 <_dtoa_r+0xac6>
 8007a56:	4b0a      	ldr	r3, [pc, #40]	; (8007a80 <_dtoa_r+0xbc0>)
 8007a58:	f7ff ba9f 	b.w	8006f9a <_dtoa_r+0xda>
 8007a5c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	f47f aa77 	bne.w	8006f52 <_dtoa_r+0x92>
 8007a64:	4b07      	ldr	r3, [pc, #28]	; (8007a84 <_dtoa_r+0xbc4>)
 8007a66:	f7ff ba98 	b.w	8006f9a <_dtoa_r+0xda>
 8007a6a:	9b06      	ldr	r3, [sp, #24]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	dcb6      	bgt.n	80079de <_dtoa_r+0xb1e>
 8007a70:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a72:	2b02      	cmp	r3, #2
 8007a74:	f73f aeb5 	bgt.w	80077e2 <_dtoa_r+0x922>
 8007a78:	e7b1      	b.n	80079de <_dtoa_r+0xb1e>
 8007a7a:	bf00      	nop
 8007a7c:	0800a713 	.word	0x0800a713
 8007a80:	0800a66e 	.word	0x0800a66e
 8007a84:	0800a697 	.word	0x0800a697

08007a88 <_free_r>:
 8007a88:	b538      	push	{r3, r4, r5, lr}
 8007a8a:	4605      	mov	r5, r0
 8007a8c:	2900      	cmp	r1, #0
 8007a8e:	d040      	beq.n	8007b12 <_free_r+0x8a>
 8007a90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a94:	1f0c      	subs	r4, r1, #4
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	bfb8      	it	lt
 8007a9a:	18e4      	addlt	r4, r4, r3
 8007a9c:	f000 f8e4 	bl	8007c68 <__malloc_lock>
 8007aa0:	4a1c      	ldr	r2, [pc, #112]	; (8007b14 <_free_r+0x8c>)
 8007aa2:	6813      	ldr	r3, [r2, #0]
 8007aa4:	b933      	cbnz	r3, 8007ab4 <_free_r+0x2c>
 8007aa6:	6063      	str	r3, [r4, #4]
 8007aa8:	6014      	str	r4, [r2, #0]
 8007aaa:	4628      	mov	r0, r5
 8007aac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ab0:	f000 b8e0 	b.w	8007c74 <__malloc_unlock>
 8007ab4:	42a3      	cmp	r3, r4
 8007ab6:	d908      	bls.n	8007aca <_free_r+0x42>
 8007ab8:	6820      	ldr	r0, [r4, #0]
 8007aba:	1821      	adds	r1, r4, r0
 8007abc:	428b      	cmp	r3, r1
 8007abe:	bf01      	itttt	eq
 8007ac0:	6819      	ldreq	r1, [r3, #0]
 8007ac2:	685b      	ldreq	r3, [r3, #4]
 8007ac4:	1809      	addeq	r1, r1, r0
 8007ac6:	6021      	streq	r1, [r4, #0]
 8007ac8:	e7ed      	b.n	8007aa6 <_free_r+0x1e>
 8007aca:	461a      	mov	r2, r3
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	b10b      	cbz	r3, 8007ad4 <_free_r+0x4c>
 8007ad0:	42a3      	cmp	r3, r4
 8007ad2:	d9fa      	bls.n	8007aca <_free_r+0x42>
 8007ad4:	6811      	ldr	r1, [r2, #0]
 8007ad6:	1850      	adds	r0, r2, r1
 8007ad8:	42a0      	cmp	r0, r4
 8007ada:	d10b      	bne.n	8007af4 <_free_r+0x6c>
 8007adc:	6820      	ldr	r0, [r4, #0]
 8007ade:	4401      	add	r1, r0
 8007ae0:	1850      	adds	r0, r2, r1
 8007ae2:	4283      	cmp	r3, r0
 8007ae4:	6011      	str	r1, [r2, #0]
 8007ae6:	d1e0      	bne.n	8007aaa <_free_r+0x22>
 8007ae8:	6818      	ldr	r0, [r3, #0]
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	4408      	add	r0, r1
 8007aee:	6010      	str	r0, [r2, #0]
 8007af0:	6053      	str	r3, [r2, #4]
 8007af2:	e7da      	b.n	8007aaa <_free_r+0x22>
 8007af4:	d902      	bls.n	8007afc <_free_r+0x74>
 8007af6:	230c      	movs	r3, #12
 8007af8:	602b      	str	r3, [r5, #0]
 8007afa:	e7d6      	b.n	8007aaa <_free_r+0x22>
 8007afc:	6820      	ldr	r0, [r4, #0]
 8007afe:	1821      	adds	r1, r4, r0
 8007b00:	428b      	cmp	r3, r1
 8007b02:	bf01      	itttt	eq
 8007b04:	6819      	ldreq	r1, [r3, #0]
 8007b06:	685b      	ldreq	r3, [r3, #4]
 8007b08:	1809      	addeq	r1, r1, r0
 8007b0a:	6021      	streq	r1, [r4, #0]
 8007b0c:	6063      	str	r3, [r4, #4]
 8007b0e:	6054      	str	r4, [r2, #4]
 8007b10:	e7cb      	b.n	8007aaa <_free_r+0x22>
 8007b12:	bd38      	pop	{r3, r4, r5, pc}
 8007b14:	200004dc 	.word	0x200004dc

08007b18 <malloc>:
 8007b18:	4b02      	ldr	r3, [pc, #8]	; (8007b24 <malloc+0xc>)
 8007b1a:	4601      	mov	r1, r0
 8007b1c:	6818      	ldr	r0, [r3, #0]
 8007b1e:	f000 b823 	b.w	8007b68 <_malloc_r>
 8007b22:	bf00      	nop
 8007b24:	2000007c 	.word	0x2000007c

08007b28 <sbrk_aligned>:
 8007b28:	b570      	push	{r4, r5, r6, lr}
 8007b2a:	4e0e      	ldr	r6, [pc, #56]	; (8007b64 <sbrk_aligned+0x3c>)
 8007b2c:	460c      	mov	r4, r1
 8007b2e:	6831      	ldr	r1, [r6, #0]
 8007b30:	4605      	mov	r5, r0
 8007b32:	b911      	cbnz	r1, 8007b3a <sbrk_aligned+0x12>
 8007b34:	f001 fe0c 	bl	8009750 <_sbrk_r>
 8007b38:	6030      	str	r0, [r6, #0]
 8007b3a:	4621      	mov	r1, r4
 8007b3c:	4628      	mov	r0, r5
 8007b3e:	f001 fe07 	bl	8009750 <_sbrk_r>
 8007b42:	1c43      	adds	r3, r0, #1
 8007b44:	d00a      	beq.n	8007b5c <sbrk_aligned+0x34>
 8007b46:	1cc4      	adds	r4, r0, #3
 8007b48:	f024 0403 	bic.w	r4, r4, #3
 8007b4c:	42a0      	cmp	r0, r4
 8007b4e:	d007      	beq.n	8007b60 <sbrk_aligned+0x38>
 8007b50:	1a21      	subs	r1, r4, r0
 8007b52:	4628      	mov	r0, r5
 8007b54:	f001 fdfc 	bl	8009750 <_sbrk_r>
 8007b58:	3001      	adds	r0, #1
 8007b5a:	d101      	bne.n	8007b60 <sbrk_aligned+0x38>
 8007b5c:	f04f 34ff 	mov.w	r4, #4294967295
 8007b60:	4620      	mov	r0, r4
 8007b62:	bd70      	pop	{r4, r5, r6, pc}
 8007b64:	200004e0 	.word	0x200004e0

08007b68 <_malloc_r>:
 8007b68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b6c:	1ccd      	adds	r5, r1, #3
 8007b6e:	f025 0503 	bic.w	r5, r5, #3
 8007b72:	3508      	adds	r5, #8
 8007b74:	2d0c      	cmp	r5, #12
 8007b76:	bf38      	it	cc
 8007b78:	250c      	movcc	r5, #12
 8007b7a:	2d00      	cmp	r5, #0
 8007b7c:	4607      	mov	r7, r0
 8007b7e:	db01      	blt.n	8007b84 <_malloc_r+0x1c>
 8007b80:	42a9      	cmp	r1, r5
 8007b82:	d905      	bls.n	8007b90 <_malloc_r+0x28>
 8007b84:	230c      	movs	r3, #12
 8007b86:	2600      	movs	r6, #0
 8007b88:	603b      	str	r3, [r7, #0]
 8007b8a:	4630      	mov	r0, r6
 8007b8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b90:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007c64 <_malloc_r+0xfc>
 8007b94:	f000 f868 	bl	8007c68 <__malloc_lock>
 8007b98:	f8d8 3000 	ldr.w	r3, [r8]
 8007b9c:	461c      	mov	r4, r3
 8007b9e:	bb5c      	cbnz	r4, 8007bf8 <_malloc_r+0x90>
 8007ba0:	4629      	mov	r1, r5
 8007ba2:	4638      	mov	r0, r7
 8007ba4:	f7ff ffc0 	bl	8007b28 <sbrk_aligned>
 8007ba8:	1c43      	adds	r3, r0, #1
 8007baa:	4604      	mov	r4, r0
 8007bac:	d155      	bne.n	8007c5a <_malloc_r+0xf2>
 8007bae:	f8d8 4000 	ldr.w	r4, [r8]
 8007bb2:	4626      	mov	r6, r4
 8007bb4:	2e00      	cmp	r6, #0
 8007bb6:	d145      	bne.n	8007c44 <_malloc_r+0xdc>
 8007bb8:	2c00      	cmp	r4, #0
 8007bba:	d048      	beq.n	8007c4e <_malloc_r+0xe6>
 8007bbc:	6823      	ldr	r3, [r4, #0]
 8007bbe:	4631      	mov	r1, r6
 8007bc0:	4638      	mov	r0, r7
 8007bc2:	eb04 0903 	add.w	r9, r4, r3
 8007bc6:	f001 fdc3 	bl	8009750 <_sbrk_r>
 8007bca:	4581      	cmp	r9, r0
 8007bcc:	d13f      	bne.n	8007c4e <_malloc_r+0xe6>
 8007bce:	6821      	ldr	r1, [r4, #0]
 8007bd0:	4638      	mov	r0, r7
 8007bd2:	1a6d      	subs	r5, r5, r1
 8007bd4:	4629      	mov	r1, r5
 8007bd6:	f7ff ffa7 	bl	8007b28 <sbrk_aligned>
 8007bda:	3001      	adds	r0, #1
 8007bdc:	d037      	beq.n	8007c4e <_malloc_r+0xe6>
 8007bde:	6823      	ldr	r3, [r4, #0]
 8007be0:	442b      	add	r3, r5
 8007be2:	6023      	str	r3, [r4, #0]
 8007be4:	f8d8 3000 	ldr.w	r3, [r8]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d038      	beq.n	8007c5e <_malloc_r+0xf6>
 8007bec:	685a      	ldr	r2, [r3, #4]
 8007bee:	42a2      	cmp	r2, r4
 8007bf0:	d12b      	bne.n	8007c4a <_malloc_r+0xe2>
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	605a      	str	r2, [r3, #4]
 8007bf6:	e00f      	b.n	8007c18 <_malloc_r+0xb0>
 8007bf8:	6822      	ldr	r2, [r4, #0]
 8007bfa:	1b52      	subs	r2, r2, r5
 8007bfc:	d41f      	bmi.n	8007c3e <_malloc_r+0xd6>
 8007bfe:	2a0b      	cmp	r2, #11
 8007c00:	d917      	bls.n	8007c32 <_malloc_r+0xca>
 8007c02:	1961      	adds	r1, r4, r5
 8007c04:	42a3      	cmp	r3, r4
 8007c06:	6025      	str	r5, [r4, #0]
 8007c08:	bf18      	it	ne
 8007c0a:	6059      	strne	r1, [r3, #4]
 8007c0c:	6863      	ldr	r3, [r4, #4]
 8007c0e:	bf08      	it	eq
 8007c10:	f8c8 1000 	streq.w	r1, [r8]
 8007c14:	5162      	str	r2, [r4, r5]
 8007c16:	604b      	str	r3, [r1, #4]
 8007c18:	4638      	mov	r0, r7
 8007c1a:	f104 060b 	add.w	r6, r4, #11
 8007c1e:	f000 f829 	bl	8007c74 <__malloc_unlock>
 8007c22:	f026 0607 	bic.w	r6, r6, #7
 8007c26:	1d23      	adds	r3, r4, #4
 8007c28:	1af2      	subs	r2, r6, r3
 8007c2a:	d0ae      	beq.n	8007b8a <_malloc_r+0x22>
 8007c2c:	1b9b      	subs	r3, r3, r6
 8007c2e:	50a3      	str	r3, [r4, r2]
 8007c30:	e7ab      	b.n	8007b8a <_malloc_r+0x22>
 8007c32:	42a3      	cmp	r3, r4
 8007c34:	6862      	ldr	r2, [r4, #4]
 8007c36:	d1dd      	bne.n	8007bf4 <_malloc_r+0x8c>
 8007c38:	f8c8 2000 	str.w	r2, [r8]
 8007c3c:	e7ec      	b.n	8007c18 <_malloc_r+0xb0>
 8007c3e:	4623      	mov	r3, r4
 8007c40:	6864      	ldr	r4, [r4, #4]
 8007c42:	e7ac      	b.n	8007b9e <_malloc_r+0x36>
 8007c44:	4634      	mov	r4, r6
 8007c46:	6876      	ldr	r6, [r6, #4]
 8007c48:	e7b4      	b.n	8007bb4 <_malloc_r+0x4c>
 8007c4a:	4613      	mov	r3, r2
 8007c4c:	e7cc      	b.n	8007be8 <_malloc_r+0x80>
 8007c4e:	230c      	movs	r3, #12
 8007c50:	4638      	mov	r0, r7
 8007c52:	603b      	str	r3, [r7, #0]
 8007c54:	f000 f80e 	bl	8007c74 <__malloc_unlock>
 8007c58:	e797      	b.n	8007b8a <_malloc_r+0x22>
 8007c5a:	6025      	str	r5, [r4, #0]
 8007c5c:	e7dc      	b.n	8007c18 <_malloc_r+0xb0>
 8007c5e:	605b      	str	r3, [r3, #4]
 8007c60:	deff      	udf	#255	; 0xff
 8007c62:	bf00      	nop
 8007c64:	200004dc 	.word	0x200004dc

08007c68 <__malloc_lock>:
 8007c68:	4801      	ldr	r0, [pc, #4]	; (8007c70 <__malloc_lock+0x8>)
 8007c6a:	f7ff b88b 	b.w	8006d84 <__retarget_lock_acquire_recursive>
 8007c6e:	bf00      	nop
 8007c70:	200004d8 	.word	0x200004d8

08007c74 <__malloc_unlock>:
 8007c74:	4801      	ldr	r0, [pc, #4]	; (8007c7c <__malloc_unlock+0x8>)
 8007c76:	f7ff b886 	b.w	8006d86 <__retarget_lock_release_recursive>
 8007c7a:	bf00      	nop
 8007c7c:	200004d8 	.word	0x200004d8

08007c80 <_Balloc>:
 8007c80:	b570      	push	{r4, r5, r6, lr}
 8007c82:	69c6      	ldr	r6, [r0, #28]
 8007c84:	4604      	mov	r4, r0
 8007c86:	460d      	mov	r5, r1
 8007c88:	b976      	cbnz	r6, 8007ca8 <_Balloc+0x28>
 8007c8a:	2010      	movs	r0, #16
 8007c8c:	f7ff ff44 	bl	8007b18 <malloc>
 8007c90:	4602      	mov	r2, r0
 8007c92:	61e0      	str	r0, [r4, #28]
 8007c94:	b920      	cbnz	r0, 8007ca0 <_Balloc+0x20>
 8007c96:	216b      	movs	r1, #107	; 0x6b
 8007c98:	4b17      	ldr	r3, [pc, #92]	; (8007cf8 <_Balloc+0x78>)
 8007c9a:	4818      	ldr	r0, [pc, #96]	; (8007cfc <_Balloc+0x7c>)
 8007c9c:	f001 fd7c 	bl	8009798 <__assert_func>
 8007ca0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ca4:	6006      	str	r6, [r0, #0]
 8007ca6:	60c6      	str	r6, [r0, #12]
 8007ca8:	69e6      	ldr	r6, [r4, #28]
 8007caa:	68f3      	ldr	r3, [r6, #12]
 8007cac:	b183      	cbz	r3, 8007cd0 <_Balloc+0x50>
 8007cae:	69e3      	ldr	r3, [r4, #28]
 8007cb0:	68db      	ldr	r3, [r3, #12]
 8007cb2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007cb6:	b9b8      	cbnz	r0, 8007ce8 <_Balloc+0x68>
 8007cb8:	2101      	movs	r1, #1
 8007cba:	fa01 f605 	lsl.w	r6, r1, r5
 8007cbe:	1d72      	adds	r2, r6, #5
 8007cc0:	4620      	mov	r0, r4
 8007cc2:	0092      	lsls	r2, r2, #2
 8007cc4:	f001 fd86 	bl	80097d4 <_calloc_r>
 8007cc8:	b160      	cbz	r0, 8007ce4 <_Balloc+0x64>
 8007cca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007cce:	e00e      	b.n	8007cee <_Balloc+0x6e>
 8007cd0:	2221      	movs	r2, #33	; 0x21
 8007cd2:	2104      	movs	r1, #4
 8007cd4:	4620      	mov	r0, r4
 8007cd6:	f001 fd7d 	bl	80097d4 <_calloc_r>
 8007cda:	69e3      	ldr	r3, [r4, #28]
 8007cdc:	60f0      	str	r0, [r6, #12]
 8007cde:	68db      	ldr	r3, [r3, #12]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d1e4      	bne.n	8007cae <_Balloc+0x2e>
 8007ce4:	2000      	movs	r0, #0
 8007ce6:	bd70      	pop	{r4, r5, r6, pc}
 8007ce8:	6802      	ldr	r2, [r0, #0]
 8007cea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007cee:	2300      	movs	r3, #0
 8007cf0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007cf4:	e7f7      	b.n	8007ce6 <_Balloc+0x66>
 8007cf6:	bf00      	nop
 8007cf8:	0800a6a4 	.word	0x0800a6a4
 8007cfc:	0800a724 	.word	0x0800a724

08007d00 <_Bfree>:
 8007d00:	b570      	push	{r4, r5, r6, lr}
 8007d02:	69c6      	ldr	r6, [r0, #28]
 8007d04:	4605      	mov	r5, r0
 8007d06:	460c      	mov	r4, r1
 8007d08:	b976      	cbnz	r6, 8007d28 <_Bfree+0x28>
 8007d0a:	2010      	movs	r0, #16
 8007d0c:	f7ff ff04 	bl	8007b18 <malloc>
 8007d10:	4602      	mov	r2, r0
 8007d12:	61e8      	str	r0, [r5, #28]
 8007d14:	b920      	cbnz	r0, 8007d20 <_Bfree+0x20>
 8007d16:	218f      	movs	r1, #143	; 0x8f
 8007d18:	4b08      	ldr	r3, [pc, #32]	; (8007d3c <_Bfree+0x3c>)
 8007d1a:	4809      	ldr	r0, [pc, #36]	; (8007d40 <_Bfree+0x40>)
 8007d1c:	f001 fd3c 	bl	8009798 <__assert_func>
 8007d20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007d24:	6006      	str	r6, [r0, #0]
 8007d26:	60c6      	str	r6, [r0, #12]
 8007d28:	b13c      	cbz	r4, 8007d3a <_Bfree+0x3a>
 8007d2a:	69eb      	ldr	r3, [r5, #28]
 8007d2c:	6862      	ldr	r2, [r4, #4]
 8007d2e:	68db      	ldr	r3, [r3, #12]
 8007d30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007d34:	6021      	str	r1, [r4, #0]
 8007d36:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007d3a:	bd70      	pop	{r4, r5, r6, pc}
 8007d3c:	0800a6a4 	.word	0x0800a6a4
 8007d40:	0800a724 	.word	0x0800a724

08007d44 <__multadd>:
 8007d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d48:	4607      	mov	r7, r0
 8007d4a:	460c      	mov	r4, r1
 8007d4c:	461e      	mov	r6, r3
 8007d4e:	2000      	movs	r0, #0
 8007d50:	690d      	ldr	r5, [r1, #16]
 8007d52:	f101 0c14 	add.w	ip, r1, #20
 8007d56:	f8dc 3000 	ldr.w	r3, [ip]
 8007d5a:	3001      	adds	r0, #1
 8007d5c:	b299      	uxth	r1, r3
 8007d5e:	fb02 6101 	mla	r1, r2, r1, r6
 8007d62:	0c1e      	lsrs	r6, r3, #16
 8007d64:	0c0b      	lsrs	r3, r1, #16
 8007d66:	fb02 3306 	mla	r3, r2, r6, r3
 8007d6a:	b289      	uxth	r1, r1
 8007d6c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007d70:	4285      	cmp	r5, r0
 8007d72:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007d76:	f84c 1b04 	str.w	r1, [ip], #4
 8007d7a:	dcec      	bgt.n	8007d56 <__multadd+0x12>
 8007d7c:	b30e      	cbz	r6, 8007dc2 <__multadd+0x7e>
 8007d7e:	68a3      	ldr	r3, [r4, #8]
 8007d80:	42ab      	cmp	r3, r5
 8007d82:	dc19      	bgt.n	8007db8 <__multadd+0x74>
 8007d84:	6861      	ldr	r1, [r4, #4]
 8007d86:	4638      	mov	r0, r7
 8007d88:	3101      	adds	r1, #1
 8007d8a:	f7ff ff79 	bl	8007c80 <_Balloc>
 8007d8e:	4680      	mov	r8, r0
 8007d90:	b928      	cbnz	r0, 8007d9e <__multadd+0x5a>
 8007d92:	4602      	mov	r2, r0
 8007d94:	21ba      	movs	r1, #186	; 0xba
 8007d96:	4b0c      	ldr	r3, [pc, #48]	; (8007dc8 <__multadd+0x84>)
 8007d98:	480c      	ldr	r0, [pc, #48]	; (8007dcc <__multadd+0x88>)
 8007d9a:	f001 fcfd 	bl	8009798 <__assert_func>
 8007d9e:	6922      	ldr	r2, [r4, #16]
 8007da0:	f104 010c 	add.w	r1, r4, #12
 8007da4:	3202      	adds	r2, #2
 8007da6:	0092      	lsls	r2, r2, #2
 8007da8:	300c      	adds	r0, #12
 8007daa:	f001 fce1 	bl	8009770 <memcpy>
 8007dae:	4621      	mov	r1, r4
 8007db0:	4638      	mov	r0, r7
 8007db2:	f7ff ffa5 	bl	8007d00 <_Bfree>
 8007db6:	4644      	mov	r4, r8
 8007db8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007dbc:	3501      	adds	r5, #1
 8007dbe:	615e      	str	r6, [r3, #20]
 8007dc0:	6125      	str	r5, [r4, #16]
 8007dc2:	4620      	mov	r0, r4
 8007dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dc8:	0800a713 	.word	0x0800a713
 8007dcc:	0800a724 	.word	0x0800a724

08007dd0 <__s2b>:
 8007dd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007dd4:	4615      	mov	r5, r2
 8007dd6:	2209      	movs	r2, #9
 8007dd8:	461f      	mov	r7, r3
 8007dda:	3308      	adds	r3, #8
 8007ddc:	460c      	mov	r4, r1
 8007dde:	fb93 f3f2 	sdiv	r3, r3, r2
 8007de2:	4606      	mov	r6, r0
 8007de4:	2201      	movs	r2, #1
 8007de6:	2100      	movs	r1, #0
 8007de8:	429a      	cmp	r2, r3
 8007dea:	db09      	blt.n	8007e00 <__s2b+0x30>
 8007dec:	4630      	mov	r0, r6
 8007dee:	f7ff ff47 	bl	8007c80 <_Balloc>
 8007df2:	b940      	cbnz	r0, 8007e06 <__s2b+0x36>
 8007df4:	4602      	mov	r2, r0
 8007df6:	21d3      	movs	r1, #211	; 0xd3
 8007df8:	4b18      	ldr	r3, [pc, #96]	; (8007e5c <__s2b+0x8c>)
 8007dfa:	4819      	ldr	r0, [pc, #100]	; (8007e60 <__s2b+0x90>)
 8007dfc:	f001 fccc 	bl	8009798 <__assert_func>
 8007e00:	0052      	lsls	r2, r2, #1
 8007e02:	3101      	adds	r1, #1
 8007e04:	e7f0      	b.n	8007de8 <__s2b+0x18>
 8007e06:	9b08      	ldr	r3, [sp, #32]
 8007e08:	2d09      	cmp	r5, #9
 8007e0a:	6143      	str	r3, [r0, #20]
 8007e0c:	f04f 0301 	mov.w	r3, #1
 8007e10:	6103      	str	r3, [r0, #16]
 8007e12:	dd16      	ble.n	8007e42 <__s2b+0x72>
 8007e14:	f104 0909 	add.w	r9, r4, #9
 8007e18:	46c8      	mov	r8, r9
 8007e1a:	442c      	add	r4, r5
 8007e1c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007e20:	4601      	mov	r1, r0
 8007e22:	220a      	movs	r2, #10
 8007e24:	4630      	mov	r0, r6
 8007e26:	3b30      	subs	r3, #48	; 0x30
 8007e28:	f7ff ff8c 	bl	8007d44 <__multadd>
 8007e2c:	45a0      	cmp	r8, r4
 8007e2e:	d1f5      	bne.n	8007e1c <__s2b+0x4c>
 8007e30:	f1a5 0408 	sub.w	r4, r5, #8
 8007e34:	444c      	add	r4, r9
 8007e36:	1b2d      	subs	r5, r5, r4
 8007e38:	1963      	adds	r3, r4, r5
 8007e3a:	42bb      	cmp	r3, r7
 8007e3c:	db04      	blt.n	8007e48 <__s2b+0x78>
 8007e3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e42:	2509      	movs	r5, #9
 8007e44:	340a      	adds	r4, #10
 8007e46:	e7f6      	b.n	8007e36 <__s2b+0x66>
 8007e48:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007e4c:	4601      	mov	r1, r0
 8007e4e:	220a      	movs	r2, #10
 8007e50:	4630      	mov	r0, r6
 8007e52:	3b30      	subs	r3, #48	; 0x30
 8007e54:	f7ff ff76 	bl	8007d44 <__multadd>
 8007e58:	e7ee      	b.n	8007e38 <__s2b+0x68>
 8007e5a:	bf00      	nop
 8007e5c:	0800a713 	.word	0x0800a713
 8007e60:	0800a724 	.word	0x0800a724

08007e64 <__hi0bits>:
 8007e64:	0c02      	lsrs	r2, r0, #16
 8007e66:	0412      	lsls	r2, r2, #16
 8007e68:	4603      	mov	r3, r0
 8007e6a:	b9ca      	cbnz	r2, 8007ea0 <__hi0bits+0x3c>
 8007e6c:	0403      	lsls	r3, r0, #16
 8007e6e:	2010      	movs	r0, #16
 8007e70:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007e74:	bf04      	itt	eq
 8007e76:	021b      	lsleq	r3, r3, #8
 8007e78:	3008      	addeq	r0, #8
 8007e7a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007e7e:	bf04      	itt	eq
 8007e80:	011b      	lsleq	r3, r3, #4
 8007e82:	3004      	addeq	r0, #4
 8007e84:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007e88:	bf04      	itt	eq
 8007e8a:	009b      	lsleq	r3, r3, #2
 8007e8c:	3002      	addeq	r0, #2
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	db05      	blt.n	8007e9e <__hi0bits+0x3a>
 8007e92:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007e96:	f100 0001 	add.w	r0, r0, #1
 8007e9a:	bf08      	it	eq
 8007e9c:	2020      	moveq	r0, #32
 8007e9e:	4770      	bx	lr
 8007ea0:	2000      	movs	r0, #0
 8007ea2:	e7e5      	b.n	8007e70 <__hi0bits+0xc>

08007ea4 <__lo0bits>:
 8007ea4:	6803      	ldr	r3, [r0, #0]
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	f013 0007 	ands.w	r0, r3, #7
 8007eac:	d00b      	beq.n	8007ec6 <__lo0bits+0x22>
 8007eae:	07d9      	lsls	r1, r3, #31
 8007eb0:	d421      	bmi.n	8007ef6 <__lo0bits+0x52>
 8007eb2:	0798      	lsls	r0, r3, #30
 8007eb4:	bf49      	itett	mi
 8007eb6:	085b      	lsrmi	r3, r3, #1
 8007eb8:	089b      	lsrpl	r3, r3, #2
 8007eba:	2001      	movmi	r0, #1
 8007ebc:	6013      	strmi	r3, [r2, #0]
 8007ebe:	bf5c      	itt	pl
 8007ec0:	2002      	movpl	r0, #2
 8007ec2:	6013      	strpl	r3, [r2, #0]
 8007ec4:	4770      	bx	lr
 8007ec6:	b299      	uxth	r1, r3
 8007ec8:	b909      	cbnz	r1, 8007ece <__lo0bits+0x2a>
 8007eca:	2010      	movs	r0, #16
 8007ecc:	0c1b      	lsrs	r3, r3, #16
 8007ece:	b2d9      	uxtb	r1, r3
 8007ed0:	b909      	cbnz	r1, 8007ed6 <__lo0bits+0x32>
 8007ed2:	3008      	adds	r0, #8
 8007ed4:	0a1b      	lsrs	r3, r3, #8
 8007ed6:	0719      	lsls	r1, r3, #28
 8007ed8:	bf04      	itt	eq
 8007eda:	091b      	lsreq	r3, r3, #4
 8007edc:	3004      	addeq	r0, #4
 8007ede:	0799      	lsls	r1, r3, #30
 8007ee0:	bf04      	itt	eq
 8007ee2:	089b      	lsreq	r3, r3, #2
 8007ee4:	3002      	addeq	r0, #2
 8007ee6:	07d9      	lsls	r1, r3, #31
 8007ee8:	d403      	bmi.n	8007ef2 <__lo0bits+0x4e>
 8007eea:	085b      	lsrs	r3, r3, #1
 8007eec:	f100 0001 	add.w	r0, r0, #1
 8007ef0:	d003      	beq.n	8007efa <__lo0bits+0x56>
 8007ef2:	6013      	str	r3, [r2, #0]
 8007ef4:	4770      	bx	lr
 8007ef6:	2000      	movs	r0, #0
 8007ef8:	4770      	bx	lr
 8007efa:	2020      	movs	r0, #32
 8007efc:	4770      	bx	lr
	...

08007f00 <__i2b>:
 8007f00:	b510      	push	{r4, lr}
 8007f02:	460c      	mov	r4, r1
 8007f04:	2101      	movs	r1, #1
 8007f06:	f7ff febb 	bl	8007c80 <_Balloc>
 8007f0a:	4602      	mov	r2, r0
 8007f0c:	b928      	cbnz	r0, 8007f1a <__i2b+0x1a>
 8007f0e:	f240 1145 	movw	r1, #325	; 0x145
 8007f12:	4b04      	ldr	r3, [pc, #16]	; (8007f24 <__i2b+0x24>)
 8007f14:	4804      	ldr	r0, [pc, #16]	; (8007f28 <__i2b+0x28>)
 8007f16:	f001 fc3f 	bl	8009798 <__assert_func>
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	6144      	str	r4, [r0, #20]
 8007f1e:	6103      	str	r3, [r0, #16]
 8007f20:	bd10      	pop	{r4, pc}
 8007f22:	bf00      	nop
 8007f24:	0800a713 	.word	0x0800a713
 8007f28:	0800a724 	.word	0x0800a724

08007f2c <__multiply>:
 8007f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f30:	4691      	mov	r9, r2
 8007f32:	690a      	ldr	r2, [r1, #16]
 8007f34:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007f38:	460c      	mov	r4, r1
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	bfbe      	ittt	lt
 8007f3e:	460b      	movlt	r3, r1
 8007f40:	464c      	movlt	r4, r9
 8007f42:	4699      	movlt	r9, r3
 8007f44:	6927      	ldr	r7, [r4, #16]
 8007f46:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007f4a:	68a3      	ldr	r3, [r4, #8]
 8007f4c:	6861      	ldr	r1, [r4, #4]
 8007f4e:	eb07 060a 	add.w	r6, r7, sl
 8007f52:	42b3      	cmp	r3, r6
 8007f54:	b085      	sub	sp, #20
 8007f56:	bfb8      	it	lt
 8007f58:	3101      	addlt	r1, #1
 8007f5a:	f7ff fe91 	bl	8007c80 <_Balloc>
 8007f5e:	b930      	cbnz	r0, 8007f6e <__multiply+0x42>
 8007f60:	4602      	mov	r2, r0
 8007f62:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007f66:	4b43      	ldr	r3, [pc, #268]	; (8008074 <__multiply+0x148>)
 8007f68:	4843      	ldr	r0, [pc, #268]	; (8008078 <__multiply+0x14c>)
 8007f6a:	f001 fc15 	bl	8009798 <__assert_func>
 8007f6e:	f100 0514 	add.w	r5, r0, #20
 8007f72:	462b      	mov	r3, r5
 8007f74:	2200      	movs	r2, #0
 8007f76:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007f7a:	4543      	cmp	r3, r8
 8007f7c:	d321      	bcc.n	8007fc2 <__multiply+0x96>
 8007f7e:	f104 0314 	add.w	r3, r4, #20
 8007f82:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007f86:	f109 0314 	add.w	r3, r9, #20
 8007f8a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007f8e:	9202      	str	r2, [sp, #8]
 8007f90:	1b3a      	subs	r2, r7, r4
 8007f92:	3a15      	subs	r2, #21
 8007f94:	f022 0203 	bic.w	r2, r2, #3
 8007f98:	3204      	adds	r2, #4
 8007f9a:	f104 0115 	add.w	r1, r4, #21
 8007f9e:	428f      	cmp	r7, r1
 8007fa0:	bf38      	it	cc
 8007fa2:	2204      	movcc	r2, #4
 8007fa4:	9201      	str	r2, [sp, #4]
 8007fa6:	9a02      	ldr	r2, [sp, #8]
 8007fa8:	9303      	str	r3, [sp, #12]
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d80c      	bhi.n	8007fc8 <__multiply+0x9c>
 8007fae:	2e00      	cmp	r6, #0
 8007fb0:	dd03      	ble.n	8007fba <__multiply+0x8e>
 8007fb2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d05a      	beq.n	8008070 <__multiply+0x144>
 8007fba:	6106      	str	r6, [r0, #16]
 8007fbc:	b005      	add	sp, #20
 8007fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fc2:	f843 2b04 	str.w	r2, [r3], #4
 8007fc6:	e7d8      	b.n	8007f7a <__multiply+0x4e>
 8007fc8:	f8b3 a000 	ldrh.w	sl, [r3]
 8007fcc:	f1ba 0f00 	cmp.w	sl, #0
 8007fd0:	d023      	beq.n	800801a <__multiply+0xee>
 8007fd2:	46a9      	mov	r9, r5
 8007fd4:	f04f 0c00 	mov.w	ip, #0
 8007fd8:	f104 0e14 	add.w	lr, r4, #20
 8007fdc:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007fe0:	f8d9 1000 	ldr.w	r1, [r9]
 8007fe4:	fa1f fb82 	uxth.w	fp, r2
 8007fe8:	b289      	uxth	r1, r1
 8007fea:	fb0a 110b 	mla	r1, sl, fp, r1
 8007fee:	4461      	add	r1, ip
 8007ff0:	f8d9 c000 	ldr.w	ip, [r9]
 8007ff4:	0c12      	lsrs	r2, r2, #16
 8007ff6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007ffa:	fb0a c202 	mla	r2, sl, r2, ip
 8007ffe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008002:	b289      	uxth	r1, r1
 8008004:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008008:	4577      	cmp	r7, lr
 800800a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800800e:	f849 1b04 	str.w	r1, [r9], #4
 8008012:	d8e3      	bhi.n	8007fdc <__multiply+0xb0>
 8008014:	9a01      	ldr	r2, [sp, #4]
 8008016:	f845 c002 	str.w	ip, [r5, r2]
 800801a:	9a03      	ldr	r2, [sp, #12]
 800801c:	3304      	adds	r3, #4
 800801e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008022:	f1b9 0f00 	cmp.w	r9, #0
 8008026:	d021      	beq.n	800806c <__multiply+0x140>
 8008028:	46ae      	mov	lr, r5
 800802a:	f04f 0a00 	mov.w	sl, #0
 800802e:	6829      	ldr	r1, [r5, #0]
 8008030:	f104 0c14 	add.w	ip, r4, #20
 8008034:	f8bc b000 	ldrh.w	fp, [ip]
 8008038:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800803c:	b289      	uxth	r1, r1
 800803e:	fb09 220b 	mla	r2, r9, fp, r2
 8008042:	4452      	add	r2, sl
 8008044:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008048:	f84e 1b04 	str.w	r1, [lr], #4
 800804c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008050:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008054:	f8be 1000 	ldrh.w	r1, [lr]
 8008058:	4567      	cmp	r7, ip
 800805a:	fb09 110a 	mla	r1, r9, sl, r1
 800805e:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008062:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008066:	d8e5      	bhi.n	8008034 <__multiply+0x108>
 8008068:	9a01      	ldr	r2, [sp, #4]
 800806a:	50a9      	str	r1, [r5, r2]
 800806c:	3504      	adds	r5, #4
 800806e:	e79a      	b.n	8007fa6 <__multiply+0x7a>
 8008070:	3e01      	subs	r6, #1
 8008072:	e79c      	b.n	8007fae <__multiply+0x82>
 8008074:	0800a713 	.word	0x0800a713
 8008078:	0800a724 	.word	0x0800a724

0800807c <__pow5mult>:
 800807c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008080:	4615      	mov	r5, r2
 8008082:	f012 0203 	ands.w	r2, r2, #3
 8008086:	4606      	mov	r6, r0
 8008088:	460f      	mov	r7, r1
 800808a:	d007      	beq.n	800809c <__pow5mult+0x20>
 800808c:	4c25      	ldr	r4, [pc, #148]	; (8008124 <__pow5mult+0xa8>)
 800808e:	3a01      	subs	r2, #1
 8008090:	2300      	movs	r3, #0
 8008092:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008096:	f7ff fe55 	bl	8007d44 <__multadd>
 800809a:	4607      	mov	r7, r0
 800809c:	10ad      	asrs	r5, r5, #2
 800809e:	d03d      	beq.n	800811c <__pow5mult+0xa0>
 80080a0:	69f4      	ldr	r4, [r6, #28]
 80080a2:	b97c      	cbnz	r4, 80080c4 <__pow5mult+0x48>
 80080a4:	2010      	movs	r0, #16
 80080a6:	f7ff fd37 	bl	8007b18 <malloc>
 80080aa:	4602      	mov	r2, r0
 80080ac:	61f0      	str	r0, [r6, #28]
 80080ae:	b928      	cbnz	r0, 80080bc <__pow5mult+0x40>
 80080b0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80080b4:	4b1c      	ldr	r3, [pc, #112]	; (8008128 <__pow5mult+0xac>)
 80080b6:	481d      	ldr	r0, [pc, #116]	; (800812c <__pow5mult+0xb0>)
 80080b8:	f001 fb6e 	bl	8009798 <__assert_func>
 80080bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80080c0:	6004      	str	r4, [r0, #0]
 80080c2:	60c4      	str	r4, [r0, #12]
 80080c4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80080c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80080cc:	b94c      	cbnz	r4, 80080e2 <__pow5mult+0x66>
 80080ce:	f240 2171 	movw	r1, #625	; 0x271
 80080d2:	4630      	mov	r0, r6
 80080d4:	f7ff ff14 	bl	8007f00 <__i2b>
 80080d8:	2300      	movs	r3, #0
 80080da:	4604      	mov	r4, r0
 80080dc:	f8c8 0008 	str.w	r0, [r8, #8]
 80080e0:	6003      	str	r3, [r0, #0]
 80080e2:	f04f 0900 	mov.w	r9, #0
 80080e6:	07eb      	lsls	r3, r5, #31
 80080e8:	d50a      	bpl.n	8008100 <__pow5mult+0x84>
 80080ea:	4639      	mov	r1, r7
 80080ec:	4622      	mov	r2, r4
 80080ee:	4630      	mov	r0, r6
 80080f0:	f7ff ff1c 	bl	8007f2c <__multiply>
 80080f4:	4680      	mov	r8, r0
 80080f6:	4639      	mov	r1, r7
 80080f8:	4630      	mov	r0, r6
 80080fa:	f7ff fe01 	bl	8007d00 <_Bfree>
 80080fe:	4647      	mov	r7, r8
 8008100:	106d      	asrs	r5, r5, #1
 8008102:	d00b      	beq.n	800811c <__pow5mult+0xa0>
 8008104:	6820      	ldr	r0, [r4, #0]
 8008106:	b938      	cbnz	r0, 8008118 <__pow5mult+0x9c>
 8008108:	4622      	mov	r2, r4
 800810a:	4621      	mov	r1, r4
 800810c:	4630      	mov	r0, r6
 800810e:	f7ff ff0d 	bl	8007f2c <__multiply>
 8008112:	6020      	str	r0, [r4, #0]
 8008114:	f8c0 9000 	str.w	r9, [r0]
 8008118:	4604      	mov	r4, r0
 800811a:	e7e4      	b.n	80080e6 <__pow5mult+0x6a>
 800811c:	4638      	mov	r0, r7
 800811e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008122:	bf00      	nop
 8008124:	0800a870 	.word	0x0800a870
 8008128:	0800a6a4 	.word	0x0800a6a4
 800812c:	0800a724 	.word	0x0800a724

08008130 <__lshift>:
 8008130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008134:	460c      	mov	r4, r1
 8008136:	4607      	mov	r7, r0
 8008138:	4691      	mov	r9, r2
 800813a:	6923      	ldr	r3, [r4, #16]
 800813c:	6849      	ldr	r1, [r1, #4]
 800813e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008142:	68a3      	ldr	r3, [r4, #8]
 8008144:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008148:	f108 0601 	add.w	r6, r8, #1
 800814c:	42b3      	cmp	r3, r6
 800814e:	db0b      	blt.n	8008168 <__lshift+0x38>
 8008150:	4638      	mov	r0, r7
 8008152:	f7ff fd95 	bl	8007c80 <_Balloc>
 8008156:	4605      	mov	r5, r0
 8008158:	b948      	cbnz	r0, 800816e <__lshift+0x3e>
 800815a:	4602      	mov	r2, r0
 800815c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008160:	4b27      	ldr	r3, [pc, #156]	; (8008200 <__lshift+0xd0>)
 8008162:	4828      	ldr	r0, [pc, #160]	; (8008204 <__lshift+0xd4>)
 8008164:	f001 fb18 	bl	8009798 <__assert_func>
 8008168:	3101      	adds	r1, #1
 800816a:	005b      	lsls	r3, r3, #1
 800816c:	e7ee      	b.n	800814c <__lshift+0x1c>
 800816e:	2300      	movs	r3, #0
 8008170:	f100 0114 	add.w	r1, r0, #20
 8008174:	f100 0210 	add.w	r2, r0, #16
 8008178:	4618      	mov	r0, r3
 800817a:	4553      	cmp	r3, sl
 800817c:	db33      	blt.n	80081e6 <__lshift+0xb6>
 800817e:	6920      	ldr	r0, [r4, #16]
 8008180:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008184:	f104 0314 	add.w	r3, r4, #20
 8008188:	f019 091f 	ands.w	r9, r9, #31
 800818c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008190:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008194:	d02b      	beq.n	80081ee <__lshift+0xbe>
 8008196:	468a      	mov	sl, r1
 8008198:	2200      	movs	r2, #0
 800819a:	f1c9 0e20 	rsb	lr, r9, #32
 800819e:	6818      	ldr	r0, [r3, #0]
 80081a0:	fa00 f009 	lsl.w	r0, r0, r9
 80081a4:	4310      	orrs	r0, r2
 80081a6:	f84a 0b04 	str.w	r0, [sl], #4
 80081aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80081ae:	459c      	cmp	ip, r3
 80081b0:	fa22 f20e 	lsr.w	r2, r2, lr
 80081b4:	d8f3      	bhi.n	800819e <__lshift+0x6e>
 80081b6:	ebac 0304 	sub.w	r3, ip, r4
 80081ba:	3b15      	subs	r3, #21
 80081bc:	f023 0303 	bic.w	r3, r3, #3
 80081c0:	3304      	adds	r3, #4
 80081c2:	f104 0015 	add.w	r0, r4, #21
 80081c6:	4584      	cmp	ip, r0
 80081c8:	bf38      	it	cc
 80081ca:	2304      	movcc	r3, #4
 80081cc:	50ca      	str	r2, [r1, r3]
 80081ce:	b10a      	cbz	r2, 80081d4 <__lshift+0xa4>
 80081d0:	f108 0602 	add.w	r6, r8, #2
 80081d4:	3e01      	subs	r6, #1
 80081d6:	4638      	mov	r0, r7
 80081d8:	4621      	mov	r1, r4
 80081da:	612e      	str	r6, [r5, #16]
 80081dc:	f7ff fd90 	bl	8007d00 <_Bfree>
 80081e0:	4628      	mov	r0, r5
 80081e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081e6:	f842 0f04 	str.w	r0, [r2, #4]!
 80081ea:	3301      	adds	r3, #1
 80081ec:	e7c5      	b.n	800817a <__lshift+0x4a>
 80081ee:	3904      	subs	r1, #4
 80081f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80081f4:	459c      	cmp	ip, r3
 80081f6:	f841 2f04 	str.w	r2, [r1, #4]!
 80081fa:	d8f9      	bhi.n	80081f0 <__lshift+0xc0>
 80081fc:	e7ea      	b.n	80081d4 <__lshift+0xa4>
 80081fe:	bf00      	nop
 8008200:	0800a713 	.word	0x0800a713
 8008204:	0800a724 	.word	0x0800a724

08008208 <__mcmp>:
 8008208:	4603      	mov	r3, r0
 800820a:	690a      	ldr	r2, [r1, #16]
 800820c:	6900      	ldr	r0, [r0, #16]
 800820e:	b530      	push	{r4, r5, lr}
 8008210:	1a80      	subs	r0, r0, r2
 8008212:	d10d      	bne.n	8008230 <__mcmp+0x28>
 8008214:	3314      	adds	r3, #20
 8008216:	3114      	adds	r1, #20
 8008218:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800821c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008220:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008224:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008228:	4295      	cmp	r5, r2
 800822a:	d002      	beq.n	8008232 <__mcmp+0x2a>
 800822c:	d304      	bcc.n	8008238 <__mcmp+0x30>
 800822e:	2001      	movs	r0, #1
 8008230:	bd30      	pop	{r4, r5, pc}
 8008232:	42a3      	cmp	r3, r4
 8008234:	d3f4      	bcc.n	8008220 <__mcmp+0x18>
 8008236:	e7fb      	b.n	8008230 <__mcmp+0x28>
 8008238:	f04f 30ff 	mov.w	r0, #4294967295
 800823c:	e7f8      	b.n	8008230 <__mcmp+0x28>
	...

08008240 <__mdiff>:
 8008240:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008244:	460d      	mov	r5, r1
 8008246:	4607      	mov	r7, r0
 8008248:	4611      	mov	r1, r2
 800824a:	4628      	mov	r0, r5
 800824c:	4614      	mov	r4, r2
 800824e:	f7ff ffdb 	bl	8008208 <__mcmp>
 8008252:	1e06      	subs	r6, r0, #0
 8008254:	d111      	bne.n	800827a <__mdiff+0x3a>
 8008256:	4631      	mov	r1, r6
 8008258:	4638      	mov	r0, r7
 800825a:	f7ff fd11 	bl	8007c80 <_Balloc>
 800825e:	4602      	mov	r2, r0
 8008260:	b928      	cbnz	r0, 800826e <__mdiff+0x2e>
 8008262:	f240 2137 	movw	r1, #567	; 0x237
 8008266:	4b3a      	ldr	r3, [pc, #232]	; (8008350 <__mdiff+0x110>)
 8008268:	483a      	ldr	r0, [pc, #232]	; (8008354 <__mdiff+0x114>)
 800826a:	f001 fa95 	bl	8009798 <__assert_func>
 800826e:	2301      	movs	r3, #1
 8008270:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008274:	4610      	mov	r0, r2
 8008276:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800827a:	bfa4      	itt	ge
 800827c:	4623      	movge	r3, r4
 800827e:	462c      	movge	r4, r5
 8008280:	4638      	mov	r0, r7
 8008282:	6861      	ldr	r1, [r4, #4]
 8008284:	bfa6      	itte	ge
 8008286:	461d      	movge	r5, r3
 8008288:	2600      	movge	r6, #0
 800828a:	2601      	movlt	r6, #1
 800828c:	f7ff fcf8 	bl	8007c80 <_Balloc>
 8008290:	4602      	mov	r2, r0
 8008292:	b918      	cbnz	r0, 800829c <__mdiff+0x5c>
 8008294:	f240 2145 	movw	r1, #581	; 0x245
 8008298:	4b2d      	ldr	r3, [pc, #180]	; (8008350 <__mdiff+0x110>)
 800829a:	e7e5      	b.n	8008268 <__mdiff+0x28>
 800829c:	f102 0814 	add.w	r8, r2, #20
 80082a0:	46c2      	mov	sl, r8
 80082a2:	f04f 0c00 	mov.w	ip, #0
 80082a6:	6927      	ldr	r7, [r4, #16]
 80082a8:	60c6      	str	r6, [r0, #12]
 80082aa:	692e      	ldr	r6, [r5, #16]
 80082ac:	f104 0014 	add.w	r0, r4, #20
 80082b0:	f105 0914 	add.w	r9, r5, #20
 80082b4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80082b8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80082bc:	3410      	adds	r4, #16
 80082be:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80082c2:	f859 3b04 	ldr.w	r3, [r9], #4
 80082c6:	fa1f f18b 	uxth.w	r1, fp
 80082ca:	4461      	add	r1, ip
 80082cc:	fa1f fc83 	uxth.w	ip, r3
 80082d0:	0c1b      	lsrs	r3, r3, #16
 80082d2:	eba1 010c 	sub.w	r1, r1, ip
 80082d6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80082da:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80082de:	b289      	uxth	r1, r1
 80082e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80082e4:	454e      	cmp	r6, r9
 80082e6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80082ea:	f84a 1b04 	str.w	r1, [sl], #4
 80082ee:	d8e6      	bhi.n	80082be <__mdiff+0x7e>
 80082f0:	1b73      	subs	r3, r6, r5
 80082f2:	3b15      	subs	r3, #21
 80082f4:	f023 0303 	bic.w	r3, r3, #3
 80082f8:	3515      	adds	r5, #21
 80082fa:	3304      	adds	r3, #4
 80082fc:	42ae      	cmp	r6, r5
 80082fe:	bf38      	it	cc
 8008300:	2304      	movcc	r3, #4
 8008302:	4418      	add	r0, r3
 8008304:	4443      	add	r3, r8
 8008306:	461e      	mov	r6, r3
 8008308:	4605      	mov	r5, r0
 800830a:	4575      	cmp	r5, lr
 800830c:	d30e      	bcc.n	800832c <__mdiff+0xec>
 800830e:	f10e 0103 	add.w	r1, lr, #3
 8008312:	1a09      	subs	r1, r1, r0
 8008314:	f021 0103 	bic.w	r1, r1, #3
 8008318:	3803      	subs	r0, #3
 800831a:	4586      	cmp	lr, r0
 800831c:	bf38      	it	cc
 800831e:	2100      	movcc	r1, #0
 8008320:	440b      	add	r3, r1
 8008322:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008326:	b189      	cbz	r1, 800834c <__mdiff+0x10c>
 8008328:	6117      	str	r7, [r2, #16]
 800832a:	e7a3      	b.n	8008274 <__mdiff+0x34>
 800832c:	f855 8b04 	ldr.w	r8, [r5], #4
 8008330:	fa1f f188 	uxth.w	r1, r8
 8008334:	4461      	add	r1, ip
 8008336:	140c      	asrs	r4, r1, #16
 8008338:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800833c:	b289      	uxth	r1, r1
 800833e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008342:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8008346:	f846 1b04 	str.w	r1, [r6], #4
 800834a:	e7de      	b.n	800830a <__mdiff+0xca>
 800834c:	3f01      	subs	r7, #1
 800834e:	e7e8      	b.n	8008322 <__mdiff+0xe2>
 8008350:	0800a713 	.word	0x0800a713
 8008354:	0800a724 	.word	0x0800a724

08008358 <__ulp>:
 8008358:	4b0e      	ldr	r3, [pc, #56]	; (8008394 <__ulp+0x3c>)
 800835a:	400b      	ands	r3, r1
 800835c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008360:	2b00      	cmp	r3, #0
 8008362:	dc08      	bgt.n	8008376 <__ulp+0x1e>
 8008364:	425b      	negs	r3, r3
 8008366:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800836a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800836e:	da04      	bge.n	800837a <__ulp+0x22>
 8008370:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008374:	4113      	asrs	r3, r2
 8008376:	2200      	movs	r2, #0
 8008378:	e008      	b.n	800838c <__ulp+0x34>
 800837a:	f1a2 0314 	sub.w	r3, r2, #20
 800837e:	2b1e      	cmp	r3, #30
 8008380:	bfd6      	itet	le
 8008382:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8008386:	2201      	movgt	r2, #1
 8008388:	40da      	lsrle	r2, r3
 800838a:	2300      	movs	r3, #0
 800838c:	4619      	mov	r1, r3
 800838e:	4610      	mov	r0, r2
 8008390:	4770      	bx	lr
 8008392:	bf00      	nop
 8008394:	7ff00000 	.word	0x7ff00000

08008398 <__b2d>:
 8008398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800839a:	6905      	ldr	r5, [r0, #16]
 800839c:	f100 0714 	add.w	r7, r0, #20
 80083a0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80083a4:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80083a8:	1f2e      	subs	r6, r5, #4
 80083aa:	4620      	mov	r0, r4
 80083ac:	f7ff fd5a 	bl	8007e64 <__hi0bits>
 80083b0:	f1c0 0220 	rsb	r2, r0, #32
 80083b4:	280a      	cmp	r0, #10
 80083b6:	4603      	mov	r3, r0
 80083b8:	f8df c068 	ldr.w	ip, [pc, #104]	; 8008424 <__b2d+0x8c>
 80083bc:	600a      	str	r2, [r1, #0]
 80083be:	dc12      	bgt.n	80083e6 <__b2d+0x4e>
 80083c0:	f1c0 0e0b 	rsb	lr, r0, #11
 80083c4:	fa24 f20e 	lsr.w	r2, r4, lr
 80083c8:	42b7      	cmp	r7, r6
 80083ca:	ea42 010c 	orr.w	r1, r2, ip
 80083ce:	bf2c      	ite	cs
 80083d0:	2200      	movcs	r2, #0
 80083d2:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 80083d6:	3315      	adds	r3, #21
 80083d8:	fa04 f303 	lsl.w	r3, r4, r3
 80083dc:	fa22 f20e 	lsr.w	r2, r2, lr
 80083e0:	431a      	orrs	r2, r3
 80083e2:	4610      	mov	r0, r2
 80083e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083e6:	42b7      	cmp	r7, r6
 80083e8:	bf2e      	itee	cs
 80083ea:	2200      	movcs	r2, #0
 80083ec:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 80083f0:	f1a5 0608 	subcc.w	r6, r5, #8
 80083f4:	3b0b      	subs	r3, #11
 80083f6:	d012      	beq.n	800841e <__b2d+0x86>
 80083f8:	f1c3 0520 	rsb	r5, r3, #32
 80083fc:	fa22 f105 	lsr.w	r1, r2, r5
 8008400:	409c      	lsls	r4, r3
 8008402:	430c      	orrs	r4, r1
 8008404:	42be      	cmp	r6, r7
 8008406:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 800840a:	bf94      	ite	ls
 800840c:	2400      	movls	r4, #0
 800840e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008412:	409a      	lsls	r2, r3
 8008414:	40ec      	lsrs	r4, r5
 8008416:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800841a:	4322      	orrs	r2, r4
 800841c:	e7e1      	b.n	80083e2 <__b2d+0x4a>
 800841e:	ea44 010c 	orr.w	r1, r4, ip
 8008422:	e7de      	b.n	80083e2 <__b2d+0x4a>
 8008424:	3ff00000 	.word	0x3ff00000

08008428 <__d2b>:
 8008428:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800842a:	2101      	movs	r1, #1
 800842c:	4617      	mov	r7, r2
 800842e:	461c      	mov	r4, r3
 8008430:	9e08      	ldr	r6, [sp, #32]
 8008432:	f7ff fc25 	bl	8007c80 <_Balloc>
 8008436:	4605      	mov	r5, r0
 8008438:	b930      	cbnz	r0, 8008448 <__d2b+0x20>
 800843a:	4602      	mov	r2, r0
 800843c:	f240 310f 	movw	r1, #783	; 0x30f
 8008440:	4b22      	ldr	r3, [pc, #136]	; (80084cc <__d2b+0xa4>)
 8008442:	4823      	ldr	r0, [pc, #140]	; (80084d0 <__d2b+0xa8>)
 8008444:	f001 f9a8 	bl	8009798 <__assert_func>
 8008448:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800844c:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8008450:	bb24      	cbnz	r4, 800849c <__d2b+0x74>
 8008452:	2f00      	cmp	r7, #0
 8008454:	9301      	str	r3, [sp, #4]
 8008456:	d026      	beq.n	80084a6 <__d2b+0x7e>
 8008458:	4668      	mov	r0, sp
 800845a:	9700      	str	r7, [sp, #0]
 800845c:	f7ff fd22 	bl	8007ea4 <__lo0bits>
 8008460:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008464:	b1e8      	cbz	r0, 80084a2 <__d2b+0x7a>
 8008466:	f1c0 0320 	rsb	r3, r0, #32
 800846a:	fa02 f303 	lsl.w	r3, r2, r3
 800846e:	430b      	orrs	r3, r1
 8008470:	40c2      	lsrs	r2, r0
 8008472:	616b      	str	r3, [r5, #20]
 8008474:	9201      	str	r2, [sp, #4]
 8008476:	9b01      	ldr	r3, [sp, #4]
 8008478:	2b00      	cmp	r3, #0
 800847a:	bf14      	ite	ne
 800847c:	2102      	movne	r1, #2
 800847e:	2101      	moveq	r1, #1
 8008480:	61ab      	str	r3, [r5, #24]
 8008482:	6129      	str	r1, [r5, #16]
 8008484:	b1bc      	cbz	r4, 80084b6 <__d2b+0x8e>
 8008486:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800848a:	4404      	add	r4, r0
 800848c:	6034      	str	r4, [r6, #0]
 800848e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008492:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008494:	6018      	str	r0, [r3, #0]
 8008496:	4628      	mov	r0, r5
 8008498:	b003      	add	sp, #12
 800849a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800849c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084a0:	e7d7      	b.n	8008452 <__d2b+0x2a>
 80084a2:	6169      	str	r1, [r5, #20]
 80084a4:	e7e7      	b.n	8008476 <__d2b+0x4e>
 80084a6:	a801      	add	r0, sp, #4
 80084a8:	f7ff fcfc 	bl	8007ea4 <__lo0bits>
 80084ac:	9b01      	ldr	r3, [sp, #4]
 80084ae:	2101      	movs	r1, #1
 80084b0:	616b      	str	r3, [r5, #20]
 80084b2:	3020      	adds	r0, #32
 80084b4:	e7e5      	b.n	8008482 <__d2b+0x5a>
 80084b6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80084ba:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 80084be:	6030      	str	r0, [r6, #0]
 80084c0:	6918      	ldr	r0, [r3, #16]
 80084c2:	f7ff fccf 	bl	8007e64 <__hi0bits>
 80084c6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80084ca:	e7e2      	b.n	8008492 <__d2b+0x6a>
 80084cc:	0800a713 	.word	0x0800a713
 80084d0:	0800a724 	.word	0x0800a724

080084d4 <__ratio>:
 80084d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084d8:	4688      	mov	r8, r1
 80084da:	4669      	mov	r1, sp
 80084dc:	4681      	mov	r9, r0
 80084de:	f7ff ff5b 	bl	8008398 <__b2d>
 80084e2:	460f      	mov	r7, r1
 80084e4:	4604      	mov	r4, r0
 80084e6:	460d      	mov	r5, r1
 80084e8:	4640      	mov	r0, r8
 80084ea:	a901      	add	r1, sp, #4
 80084ec:	f7ff ff54 	bl	8008398 <__b2d>
 80084f0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80084f4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80084f8:	468b      	mov	fp, r1
 80084fa:	eba3 0c02 	sub.w	ip, r3, r2
 80084fe:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008502:	1a9b      	subs	r3, r3, r2
 8008504:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008508:	2b00      	cmp	r3, #0
 800850a:	bfd5      	itete	le
 800850c:	460a      	movle	r2, r1
 800850e:	462a      	movgt	r2, r5
 8008510:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008514:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008518:	bfd8      	it	le
 800851a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800851e:	465b      	mov	r3, fp
 8008520:	4602      	mov	r2, r0
 8008522:	4639      	mov	r1, r7
 8008524:	4620      	mov	r0, r4
 8008526:	f7f8 f901 	bl	800072c <__aeabi_ddiv>
 800852a:	b003      	add	sp, #12
 800852c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008530 <__copybits>:
 8008530:	3901      	subs	r1, #1
 8008532:	b570      	push	{r4, r5, r6, lr}
 8008534:	1149      	asrs	r1, r1, #5
 8008536:	6914      	ldr	r4, [r2, #16]
 8008538:	3101      	adds	r1, #1
 800853a:	f102 0314 	add.w	r3, r2, #20
 800853e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008542:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008546:	1f05      	subs	r5, r0, #4
 8008548:	42a3      	cmp	r3, r4
 800854a:	d30c      	bcc.n	8008566 <__copybits+0x36>
 800854c:	1aa3      	subs	r3, r4, r2
 800854e:	3b11      	subs	r3, #17
 8008550:	f023 0303 	bic.w	r3, r3, #3
 8008554:	3211      	adds	r2, #17
 8008556:	42a2      	cmp	r2, r4
 8008558:	bf88      	it	hi
 800855a:	2300      	movhi	r3, #0
 800855c:	4418      	add	r0, r3
 800855e:	2300      	movs	r3, #0
 8008560:	4288      	cmp	r0, r1
 8008562:	d305      	bcc.n	8008570 <__copybits+0x40>
 8008564:	bd70      	pop	{r4, r5, r6, pc}
 8008566:	f853 6b04 	ldr.w	r6, [r3], #4
 800856a:	f845 6f04 	str.w	r6, [r5, #4]!
 800856e:	e7eb      	b.n	8008548 <__copybits+0x18>
 8008570:	f840 3b04 	str.w	r3, [r0], #4
 8008574:	e7f4      	b.n	8008560 <__copybits+0x30>

08008576 <__any_on>:
 8008576:	f100 0214 	add.w	r2, r0, #20
 800857a:	6900      	ldr	r0, [r0, #16]
 800857c:	114b      	asrs	r3, r1, #5
 800857e:	4298      	cmp	r0, r3
 8008580:	b510      	push	{r4, lr}
 8008582:	db11      	blt.n	80085a8 <__any_on+0x32>
 8008584:	dd0a      	ble.n	800859c <__any_on+0x26>
 8008586:	f011 011f 	ands.w	r1, r1, #31
 800858a:	d007      	beq.n	800859c <__any_on+0x26>
 800858c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008590:	fa24 f001 	lsr.w	r0, r4, r1
 8008594:	fa00 f101 	lsl.w	r1, r0, r1
 8008598:	428c      	cmp	r4, r1
 800859a:	d10b      	bne.n	80085b4 <__any_on+0x3e>
 800859c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d803      	bhi.n	80085ac <__any_on+0x36>
 80085a4:	2000      	movs	r0, #0
 80085a6:	bd10      	pop	{r4, pc}
 80085a8:	4603      	mov	r3, r0
 80085aa:	e7f7      	b.n	800859c <__any_on+0x26>
 80085ac:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80085b0:	2900      	cmp	r1, #0
 80085b2:	d0f5      	beq.n	80085a0 <__any_on+0x2a>
 80085b4:	2001      	movs	r0, #1
 80085b6:	e7f6      	b.n	80085a6 <__any_on+0x30>

080085b8 <sulp>:
 80085b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085bc:	460f      	mov	r7, r1
 80085be:	4690      	mov	r8, r2
 80085c0:	f7ff feca 	bl	8008358 <__ulp>
 80085c4:	4604      	mov	r4, r0
 80085c6:	460d      	mov	r5, r1
 80085c8:	f1b8 0f00 	cmp.w	r8, #0
 80085cc:	d011      	beq.n	80085f2 <sulp+0x3a>
 80085ce:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80085d2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	dd0b      	ble.n	80085f2 <sulp+0x3a>
 80085da:	2400      	movs	r4, #0
 80085dc:	051b      	lsls	r3, r3, #20
 80085de:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80085e2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80085e6:	4622      	mov	r2, r4
 80085e8:	462b      	mov	r3, r5
 80085ea:	f7f7 ff75 	bl	80004d8 <__aeabi_dmul>
 80085ee:	4604      	mov	r4, r0
 80085f0:	460d      	mov	r5, r1
 80085f2:	4620      	mov	r0, r4
 80085f4:	4629      	mov	r1, r5
 80085f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085fa:	0000      	movs	r0, r0
 80085fc:	0000      	movs	r0, r0
	...

08008600 <_strtod_l>:
 8008600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008604:	b09f      	sub	sp, #124	; 0x7c
 8008606:	9217      	str	r2, [sp, #92]	; 0x5c
 8008608:	2200      	movs	r2, #0
 800860a:	4604      	mov	r4, r0
 800860c:	921a      	str	r2, [sp, #104]	; 0x68
 800860e:	460d      	mov	r5, r1
 8008610:	f04f 0800 	mov.w	r8, #0
 8008614:	f04f 0900 	mov.w	r9, #0
 8008618:	460a      	mov	r2, r1
 800861a:	9219      	str	r2, [sp, #100]	; 0x64
 800861c:	7811      	ldrb	r1, [r2, #0]
 800861e:	292b      	cmp	r1, #43	; 0x2b
 8008620:	d04a      	beq.n	80086b8 <_strtod_l+0xb8>
 8008622:	d838      	bhi.n	8008696 <_strtod_l+0x96>
 8008624:	290d      	cmp	r1, #13
 8008626:	d832      	bhi.n	800868e <_strtod_l+0x8e>
 8008628:	2908      	cmp	r1, #8
 800862a:	d832      	bhi.n	8008692 <_strtod_l+0x92>
 800862c:	2900      	cmp	r1, #0
 800862e:	d03b      	beq.n	80086a8 <_strtod_l+0xa8>
 8008630:	2200      	movs	r2, #0
 8008632:	920e      	str	r2, [sp, #56]	; 0x38
 8008634:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8008636:	7832      	ldrb	r2, [r6, #0]
 8008638:	2a30      	cmp	r2, #48	; 0x30
 800863a:	f040 80b2 	bne.w	80087a2 <_strtod_l+0x1a2>
 800863e:	7872      	ldrb	r2, [r6, #1]
 8008640:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008644:	2a58      	cmp	r2, #88	; 0x58
 8008646:	d16e      	bne.n	8008726 <_strtod_l+0x126>
 8008648:	9302      	str	r3, [sp, #8]
 800864a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800864c:	4620      	mov	r0, r4
 800864e:	9301      	str	r3, [sp, #4]
 8008650:	ab1a      	add	r3, sp, #104	; 0x68
 8008652:	9300      	str	r3, [sp, #0]
 8008654:	4a8c      	ldr	r2, [pc, #560]	; (8008888 <_strtod_l+0x288>)
 8008656:	ab1b      	add	r3, sp, #108	; 0x6c
 8008658:	a919      	add	r1, sp, #100	; 0x64
 800865a:	f001 f937 	bl	80098cc <__gethex>
 800865e:	f010 070f 	ands.w	r7, r0, #15
 8008662:	4605      	mov	r5, r0
 8008664:	d005      	beq.n	8008672 <_strtod_l+0x72>
 8008666:	2f06      	cmp	r7, #6
 8008668:	d128      	bne.n	80086bc <_strtod_l+0xbc>
 800866a:	2300      	movs	r3, #0
 800866c:	3601      	adds	r6, #1
 800866e:	9619      	str	r6, [sp, #100]	; 0x64
 8008670:	930e      	str	r3, [sp, #56]	; 0x38
 8008672:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008674:	2b00      	cmp	r3, #0
 8008676:	f040 85a0 	bne.w	80091ba <_strtod_l+0xbba>
 800867a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800867c:	b1cb      	cbz	r3, 80086b2 <_strtod_l+0xb2>
 800867e:	4642      	mov	r2, r8
 8008680:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008684:	4610      	mov	r0, r2
 8008686:	4619      	mov	r1, r3
 8008688:	b01f      	add	sp, #124	; 0x7c
 800868a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800868e:	2920      	cmp	r1, #32
 8008690:	d1ce      	bne.n	8008630 <_strtod_l+0x30>
 8008692:	3201      	adds	r2, #1
 8008694:	e7c1      	b.n	800861a <_strtod_l+0x1a>
 8008696:	292d      	cmp	r1, #45	; 0x2d
 8008698:	d1ca      	bne.n	8008630 <_strtod_l+0x30>
 800869a:	2101      	movs	r1, #1
 800869c:	910e      	str	r1, [sp, #56]	; 0x38
 800869e:	1c51      	adds	r1, r2, #1
 80086a0:	9119      	str	r1, [sp, #100]	; 0x64
 80086a2:	7852      	ldrb	r2, [r2, #1]
 80086a4:	2a00      	cmp	r2, #0
 80086a6:	d1c5      	bne.n	8008634 <_strtod_l+0x34>
 80086a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80086aa:	9519      	str	r5, [sp, #100]	; 0x64
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	f040 8582 	bne.w	80091b6 <_strtod_l+0xbb6>
 80086b2:	4642      	mov	r2, r8
 80086b4:	464b      	mov	r3, r9
 80086b6:	e7e5      	b.n	8008684 <_strtod_l+0x84>
 80086b8:	2100      	movs	r1, #0
 80086ba:	e7ef      	b.n	800869c <_strtod_l+0x9c>
 80086bc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80086be:	b13a      	cbz	r2, 80086d0 <_strtod_l+0xd0>
 80086c0:	2135      	movs	r1, #53	; 0x35
 80086c2:	a81c      	add	r0, sp, #112	; 0x70
 80086c4:	f7ff ff34 	bl	8008530 <__copybits>
 80086c8:	4620      	mov	r0, r4
 80086ca:	991a      	ldr	r1, [sp, #104]	; 0x68
 80086cc:	f7ff fb18 	bl	8007d00 <_Bfree>
 80086d0:	3f01      	subs	r7, #1
 80086d2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80086d4:	2f04      	cmp	r7, #4
 80086d6:	d806      	bhi.n	80086e6 <_strtod_l+0xe6>
 80086d8:	e8df f007 	tbb	[pc, r7]
 80086dc:	201d0314 	.word	0x201d0314
 80086e0:	14          	.byte	0x14
 80086e1:	00          	.byte	0x00
 80086e2:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80086e6:	05e9      	lsls	r1, r5, #23
 80086e8:	bf48      	it	mi
 80086ea:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80086ee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80086f2:	0d1b      	lsrs	r3, r3, #20
 80086f4:	051b      	lsls	r3, r3, #20
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d1bb      	bne.n	8008672 <_strtod_l+0x72>
 80086fa:	f7fe fb19 	bl	8006d30 <__errno>
 80086fe:	2322      	movs	r3, #34	; 0x22
 8008700:	6003      	str	r3, [r0, #0]
 8008702:	e7b6      	b.n	8008672 <_strtod_l+0x72>
 8008704:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008708:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800870c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008710:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008714:	e7e7      	b.n	80086e6 <_strtod_l+0xe6>
 8008716:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800888c <_strtod_l+0x28c>
 800871a:	e7e4      	b.n	80086e6 <_strtod_l+0xe6>
 800871c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008720:	f04f 38ff 	mov.w	r8, #4294967295
 8008724:	e7df      	b.n	80086e6 <_strtod_l+0xe6>
 8008726:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008728:	1c5a      	adds	r2, r3, #1
 800872a:	9219      	str	r2, [sp, #100]	; 0x64
 800872c:	785b      	ldrb	r3, [r3, #1]
 800872e:	2b30      	cmp	r3, #48	; 0x30
 8008730:	d0f9      	beq.n	8008726 <_strtod_l+0x126>
 8008732:	2b00      	cmp	r3, #0
 8008734:	d09d      	beq.n	8008672 <_strtod_l+0x72>
 8008736:	2301      	movs	r3, #1
 8008738:	f04f 0a00 	mov.w	sl, #0
 800873c:	220a      	movs	r2, #10
 800873e:	46d3      	mov	fp, sl
 8008740:	9305      	str	r3, [sp, #20]
 8008742:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008744:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8008748:	930b      	str	r3, [sp, #44]	; 0x2c
 800874a:	9819      	ldr	r0, [sp, #100]	; 0x64
 800874c:	7806      	ldrb	r6, [r0, #0]
 800874e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008752:	b2d9      	uxtb	r1, r3
 8008754:	2909      	cmp	r1, #9
 8008756:	d926      	bls.n	80087a6 <_strtod_l+0x1a6>
 8008758:	2201      	movs	r2, #1
 800875a:	494d      	ldr	r1, [pc, #308]	; (8008890 <_strtod_l+0x290>)
 800875c:	f000 ffe6 	bl	800972c <strncmp>
 8008760:	2800      	cmp	r0, #0
 8008762:	d030      	beq.n	80087c6 <_strtod_l+0x1c6>
 8008764:	2000      	movs	r0, #0
 8008766:	4632      	mov	r2, r6
 8008768:	4603      	mov	r3, r0
 800876a:	465e      	mov	r6, fp
 800876c:	9008      	str	r0, [sp, #32]
 800876e:	2a65      	cmp	r2, #101	; 0x65
 8008770:	d001      	beq.n	8008776 <_strtod_l+0x176>
 8008772:	2a45      	cmp	r2, #69	; 0x45
 8008774:	d113      	bne.n	800879e <_strtod_l+0x19e>
 8008776:	b91e      	cbnz	r6, 8008780 <_strtod_l+0x180>
 8008778:	9a05      	ldr	r2, [sp, #20]
 800877a:	4302      	orrs	r2, r0
 800877c:	d094      	beq.n	80086a8 <_strtod_l+0xa8>
 800877e:	2600      	movs	r6, #0
 8008780:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8008782:	1c6a      	adds	r2, r5, #1
 8008784:	9219      	str	r2, [sp, #100]	; 0x64
 8008786:	786a      	ldrb	r2, [r5, #1]
 8008788:	2a2b      	cmp	r2, #43	; 0x2b
 800878a:	d074      	beq.n	8008876 <_strtod_l+0x276>
 800878c:	2a2d      	cmp	r2, #45	; 0x2d
 800878e:	d078      	beq.n	8008882 <_strtod_l+0x282>
 8008790:	f04f 0c00 	mov.w	ip, #0
 8008794:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008798:	2909      	cmp	r1, #9
 800879a:	d97f      	bls.n	800889c <_strtod_l+0x29c>
 800879c:	9519      	str	r5, [sp, #100]	; 0x64
 800879e:	2700      	movs	r7, #0
 80087a0:	e09e      	b.n	80088e0 <_strtod_l+0x2e0>
 80087a2:	2300      	movs	r3, #0
 80087a4:	e7c8      	b.n	8008738 <_strtod_l+0x138>
 80087a6:	f1bb 0f08 	cmp.w	fp, #8
 80087aa:	bfd8      	it	le
 80087ac:	990a      	ldrle	r1, [sp, #40]	; 0x28
 80087ae:	f100 0001 	add.w	r0, r0, #1
 80087b2:	bfd6      	itet	le
 80087b4:	fb02 3301 	mlale	r3, r2, r1, r3
 80087b8:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80087bc:	930a      	strle	r3, [sp, #40]	; 0x28
 80087be:	f10b 0b01 	add.w	fp, fp, #1
 80087c2:	9019      	str	r0, [sp, #100]	; 0x64
 80087c4:	e7c1      	b.n	800874a <_strtod_l+0x14a>
 80087c6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80087c8:	1c5a      	adds	r2, r3, #1
 80087ca:	9219      	str	r2, [sp, #100]	; 0x64
 80087cc:	785a      	ldrb	r2, [r3, #1]
 80087ce:	f1bb 0f00 	cmp.w	fp, #0
 80087d2:	d037      	beq.n	8008844 <_strtod_l+0x244>
 80087d4:	465e      	mov	r6, fp
 80087d6:	9008      	str	r0, [sp, #32]
 80087d8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80087dc:	2b09      	cmp	r3, #9
 80087de:	d912      	bls.n	8008806 <_strtod_l+0x206>
 80087e0:	2301      	movs	r3, #1
 80087e2:	e7c4      	b.n	800876e <_strtod_l+0x16e>
 80087e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80087e6:	3001      	adds	r0, #1
 80087e8:	1c5a      	adds	r2, r3, #1
 80087ea:	9219      	str	r2, [sp, #100]	; 0x64
 80087ec:	785a      	ldrb	r2, [r3, #1]
 80087ee:	2a30      	cmp	r2, #48	; 0x30
 80087f0:	d0f8      	beq.n	80087e4 <_strtod_l+0x1e4>
 80087f2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80087f6:	2b08      	cmp	r3, #8
 80087f8:	f200 84e4 	bhi.w	80091c4 <_strtod_l+0xbc4>
 80087fc:	9008      	str	r0, [sp, #32]
 80087fe:	2000      	movs	r0, #0
 8008800:	4606      	mov	r6, r0
 8008802:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008804:	930b      	str	r3, [sp, #44]	; 0x2c
 8008806:	3a30      	subs	r2, #48	; 0x30
 8008808:	f100 0301 	add.w	r3, r0, #1
 800880c:	d014      	beq.n	8008838 <_strtod_l+0x238>
 800880e:	9908      	ldr	r1, [sp, #32]
 8008810:	eb00 0c06 	add.w	ip, r0, r6
 8008814:	4419      	add	r1, r3
 8008816:	9108      	str	r1, [sp, #32]
 8008818:	4633      	mov	r3, r6
 800881a:	210a      	movs	r1, #10
 800881c:	4563      	cmp	r3, ip
 800881e:	d113      	bne.n	8008848 <_strtod_l+0x248>
 8008820:	1833      	adds	r3, r6, r0
 8008822:	2b08      	cmp	r3, #8
 8008824:	f106 0601 	add.w	r6, r6, #1
 8008828:	4406      	add	r6, r0
 800882a:	dc1a      	bgt.n	8008862 <_strtod_l+0x262>
 800882c:	230a      	movs	r3, #10
 800882e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008830:	fb03 2301 	mla	r3, r3, r1, r2
 8008834:	930a      	str	r3, [sp, #40]	; 0x28
 8008836:	2300      	movs	r3, #0
 8008838:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800883a:	4618      	mov	r0, r3
 800883c:	1c51      	adds	r1, r2, #1
 800883e:	9119      	str	r1, [sp, #100]	; 0x64
 8008840:	7852      	ldrb	r2, [r2, #1]
 8008842:	e7c9      	b.n	80087d8 <_strtod_l+0x1d8>
 8008844:	4658      	mov	r0, fp
 8008846:	e7d2      	b.n	80087ee <_strtod_l+0x1ee>
 8008848:	2b08      	cmp	r3, #8
 800884a:	f103 0301 	add.w	r3, r3, #1
 800884e:	dc03      	bgt.n	8008858 <_strtod_l+0x258>
 8008850:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8008852:	434f      	muls	r7, r1
 8008854:	970a      	str	r7, [sp, #40]	; 0x28
 8008856:	e7e1      	b.n	800881c <_strtod_l+0x21c>
 8008858:	2b10      	cmp	r3, #16
 800885a:	bfd8      	it	le
 800885c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8008860:	e7dc      	b.n	800881c <_strtod_l+0x21c>
 8008862:	2e10      	cmp	r6, #16
 8008864:	bfdc      	itt	le
 8008866:	230a      	movle	r3, #10
 8008868:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800886c:	e7e3      	b.n	8008836 <_strtod_l+0x236>
 800886e:	2300      	movs	r3, #0
 8008870:	9308      	str	r3, [sp, #32]
 8008872:	2301      	movs	r3, #1
 8008874:	e780      	b.n	8008778 <_strtod_l+0x178>
 8008876:	f04f 0c00 	mov.w	ip, #0
 800887a:	1caa      	adds	r2, r5, #2
 800887c:	9219      	str	r2, [sp, #100]	; 0x64
 800887e:	78aa      	ldrb	r2, [r5, #2]
 8008880:	e788      	b.n	8008794 <_strtod_l+0x194>
 8008882:	f04f 0c01 	mov.w	ip, #1
 8008886:	e7f8      	b.n	800887a <_strtod_l+0x27a>
 8008888:	0800a880 	.word	0x0800a880
 800888c:	7ff00000 	.word	0x7ff00000
 8008890:	0800a87c 	.word	0x0800a87c
 8008894:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008896:	1c51      	adds	r1, r2, #1
 8008898:	9119      	str	r1, [sp, #100]	; 0x64
 800889a:	7852      	ldrb	r2, [r2, #1]
 800889c:	2a30      	cmp	r2, #48	; 0x30
 800889e:	d0f9      	beq.n	8008894 <_strtod_l+0x294>
 80088a0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80088a4:	2908      	cmp	r1, #8
 80088a6:	f63f af7a 	bhi.w	800879e <_strtod_l+0x19e>
 80088aa:	3a30      	subs	r2, #48	; 0x30
 80088ac:	9209      	str	r2, [sp, #36]	; 0x24
 80088ae:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80088b0:	920c      	str	r2, [sp, #48]	; 0x30
 80088b2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80088b4:	1c57      	adds	r7, r2, #1
 80088b6:	9719      	str	r7, [sp, #100]	; 0x64
 80088b8:	7852      	ldrb	r2, [r2, #1]
 80088ba:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80088be:	f1be 0f09 	cmp.w	lr, #9
 80088c2:	d938      	bls.n	8008936 <_strtod_l+0x336>
 80088c4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80088c6:	1a7f      	subs	r7, r7, r1
 80088c8:	2f08      	cmp	r7, #8
 80088ca:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80088ce:	dc03      	bgt.n	80088d8 <_strtod_l+0x2d8>
 80088d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80088d2:	428f      	cmp	r7, r1
 80088d4:	bfa8      	it	ge
 80088d6:	460f      	movge	r7, r1
 80088d8:	f1bc 0f00 	cmp.w	ip, #0
 80088dc:	d000      	beq.n	80088e0 <_strtod_l+0x2e0>
 80088de:	427f      	negs	r7, r7
 80088e0:	2e00      	cmp	r6, #0
 80088e2:	d14f      	bne.n	8008984 <_strtod_l+0x384>
 80088e4:	9905      	ldr	r1, [sp, #20]
 80088e6:	4301      	orrs	r1, r0
 80088e8:	f47f aec3 	bne.w	8008672 <_strtod_l+0x72>
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	f47f aedb 	bne.w	80086a8 <_strtod_l+0xa8>
 80088f2:	2a69      	cmp	r2, #105	; 0x69
 80088f4:	d029      	beq.n	800894a <_strtod_l+0x34a>
 80088f6:	dc26      	bgt.n	8008946 <_strtod_l+0x346>
 80088f8:	2a49      	cmp	r2, #73	; 0x49
 80088fa:	d026      	beq.n	800894a <_strtod_l+0x34a>
 80088fc:	2a4e      	cmp	r2, #78	; 0x4e
 80088fe:	f47f aed3 	bne.w	80086a8 <_strtod_l+0xa8>
 8008902:	499a      	ldr	r1, [pc, #616]	; (8008b6c <_strtod_l+0x56c>)
 8008904:	a819      	add	r0, sp, #100	; 0x64
 8008906:	f001 fa23 	bl	8009d50 <__match>
 800890a:	2800      	cmp	r0, #0
 800890c:	f43f aecc 	beq.w	80086a8 <_strtod_l+0xa8>
 8008910:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008912:	781b      	ldrb	r3, [r3, #0]
 8008914:	2b28      	cmp	r3, #40	; 0x28
 8008916:	d12f      	bne.n	8008978 <_strtod_l+0x378>
 8008918:	4995      	ldr	r1, [pc, #596]	; (8008b70 <_strtod_l+0x570>)
 800891a:	aa1c      	add	r2, sp, #112	; 0x70
 800891c:	a819      	add	r0, sp, #100	; 0x64
 800891e:	f001 fa2b 	bl	8009d78 <__hexnan>
 8008922:	2805      	cmp	r0, #5
 8008924:	d128      	bne.n	8008978 <_strtod_l+0x378>
 8008926:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008928:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800892c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008930:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008934:	e69d      	b.n	8008672 <_strtod_l+0x72>
 8008936:	210a      	movs	r1, #10
 8008938:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800893a:	fb01 2107 	mla	r1, r1, r7, r2
 800893e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8008942:	9209      	str	r2, [sp, #36]	; 0x24
 8008944:	e7b5      	b.n	80088b2 <_strtod_l+0x2b2>
 8008946:	2a6e      	cmp	r2, #110	; 0x6e
 8008948:	e7d9      	b.n	80088fe <_strtod_l+0x2fe>
 800894a:	498a      	ldr	r1, [pc, #552]	; (8008b74 <_strtod_l+0x574>)
 800894c:	a819      	add	r0, sp, #100	; 0x64
 800894e:	f001 f9ff 	bl	8009d50 <__match>
 8008952:	2800      	cmp	r0, #0
 8008954:	f43f aea8 	beq.w	80086a8 <_strtod_l+0xa8>
 8008958:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800895a:	4987      	ldr	r1, [pc, #540]	; (8008b78 <_strtod_l+0x578>)
 800895c:	3b01      	subs	r3, #1
 800895e:	a819      	add	r0, sp, #100	; 0x64
 8008960:	9319      	str	r3, [sp, #100]	; 0x64
 8008962:	f001 f9f5 	bl	8009d50 <__match>
 8008966:	b910      	cbnz	r0, 800896e <_strtod_l+0x36e>
 8008968:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800896a:	3301      	adds	r3, #1
 800896c:	9319      	str	r3, [sp, #100]	; 0x64
 800896e:	f04f 0800 	mov.w	r8, #0
 8008972:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8008b7c <_strtod_l+0x57c>
 8008976:	e67c      	b.n	8008672 <_strtod_l+0x72>
 8008978:	4881      	ldr	r0, [pc, #516]	; (8008b80 <_strtod_l+0x580>)
 800897a:	f000 ff07 	bl	800978c <nan>
 800897e:	4680      	mov	r8, r0
 8008980:	4689      	mov	r9, r1
 8008982:	e676      	b.n	8008672 <_strtod_l+0x72>
 8008984:	9b08      	ldr	r3, [sp, #32]
 8008986:	f1bb 0f00 	cmp.w	fp, #0
 800898a:	bf08      	it	eq
 800898c:	46b3      	moveq	fp, r6
 800898e:	1afb      	subs	r3, r7, r3
 8008990:	2e10      	cmp	r6, #16
 8008992:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008994:	4635      	mov	r5, r6
 8008996:	9309      	str	r3, [sp, #36]	; 0x24
 8008998:	bfa8      	it	ge
 800899a:	2510      	movge	r5, #16
 800899c:	f7f7 fd22 	bl	80003e4 <__aeabi_ui2d>
 80089a0:	2e09      	cmp	r6, #9
 80089a2:	4680      	mov	r8, r0
 80089a4:	4689      	mov	r9, r1
 80089a6:	dd13      	ble.n	80089d0 <_strtod_l+0x3d0>
 80089a8:	4b76      	ldr	r3, [pc, #472]	; (8008b84 <_strtod_l+0x584>)
 80089aa:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80089ae:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80089b2:	f7f7 fd91 	bl	80004d8 <__aeabi_dmul>
 80089b6:	4680      	mov	r8, r0
 80089b8:	4650      	mov	r0, sl
 80089ba:	4689      	mov	r9, r1
 80089bc:	f7f7 fd12 	bl	80003e4 <__aeabi_ui2d>
 80089c0:	4602      	mov	r2, r0
 80089c2:	460b      	mov	r3, r1
 80089c4:	4640      	mov	r0, r8
 80089c6:	4649      	mov	r1, r9
 80089c8:	f7f7 fbd0 	bl	800016c <__adddf3>
 80089cc:	4680      	mov	r8, r0
 80089ce:	4689      	mov	r9, r1
 80089d0:	2e0f      	cmp	r6, #15
 80089d2:	dc36      	bgt.n	8008a42 <_strtod_l+0x442>
 80089d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	f43f ae4b 	beq.w	8008672 <_strtod_l+0x72>
 80089dc:	dd22      	ble.n	8008a24 <_strtod_l+0x424>
 80089de:	2b16      	cmp	r3, #22
 80089e0:	dc09      	bgt.n	80089f6 <_strtod_l+0x3f6>
 80089e2:	4968      	ldr	r1, [pc, #416]	; (8008b84 <_strtod_l+0x584>)
 80089e4:	4642      	mov	r2, r8
 80089e6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80089ea:	464b      	mov	r3, r9
 80089ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089f0:	f7f7 fd72 	bl	80004d8 <__aeabi_dmul>
 80089f4:	e7c3      	b.n	800897e <_strtod_l+0x37e>
 80089f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089f8:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80089fc:	4293      	cmp	r3, r2
 80089fe:	db20      	blt.n	8008a42 <_strtod_l+0x442>
 8008a00:	4c60      	ldr	r4, [pc, #384]	; (8008b84 <_strtod_l+0x584>)
 8008a02:	f1c6 060f 	rsb	r6, r6, #15
 8008a06:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8008a0a:	4642      	mov	r2, r8
 8008a0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a10:	464b      	mov	r3, r9
 8008a12:	f7f7 fd61 	bl	80004d8 <__aeabi_dmul>
 8008a16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a18:	1b9e      	subs	r6, r3, r6
 8008a1a:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8008a1e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008a22:	e7e5      	b.n	80089f0 <_strtod_l+0x3f0>
 8008a24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a26:	3316      	adds	r3, #22
 8008a28:	db0b      	blt.n	8008a42 <_strtod_l+0x442>
 8008a2a:	9b08      	ldr	r3, [sp, #32]
 8008a2c:	4640      	mov	r0, r8
 8008a2e:	1bdf      	subs	r7, r3, r7
 8008a30:	4b54      	ldr	r3, [pc, #336]	; (8008b84 <_strtod_l+0x584>)
 8008a32:	4649      	mov	r1, r9
 8008a34:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008a38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a3c:	f7f7 fe76 	bl	800072c <__aeabi_ddiv>
 8008a40:	e79d      	b.n	800897e <_strtod_l+0x37e>
 8008a42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a44:	1b75      	subs	r5, r6, r5
 8008a46:	441d      	add	r5, r3
 8008a48:	2d00      	cmp	r5, #0
 8008a4a:	dd70      	ble.n	8008b2e <_strtod_l+0x52e>
 8008a4c:	f015 030f 	ands.w	r3, r5, #15
 8008a50:	d00a      	beq.n	8008a68 <_strtod_l+0x468>
 8008a52:	494c      	ldr	r1, [pc, #304]	; (8008b84 <_strtod_l+0x584>)
 8008a54:	4642      	mov	r2, r8
 8008a56:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008a5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a5e:	464b      	mov	r3, r9
 8008a60:	f7f7 fd3a 	bl	80004d8 <__aeabi_dmul>
 8008a64:	4680      	mov	r8, r0
 8008a66:	4689      	mov	r9, r1
 8008a68:	f035 050f 	bics.w	r5, r5, #15
 8008a6c:	d04d      	beq.n	8008b0a <_strtod_l+0x50a>
 8008a6e:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8008a72:	dd22      	ble.n	8008aba <_strtod_l+0x4ba>
 8008a74:	2600      	movs	r6, #0
 8008a76:	46b3      	mov	fp, r6
 8008a78:	960b      	str	r6, [sp, #44]	; 0x2c
 8008a7a:	9608      	str	r6, [sp, #32]
 8008a7c:	2322      	movs	r3, #34	; 0x22
 8008a7e:	f04f 0800 	mov.w	r8, #0
 8008a82:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8008b7c <_strtod_l+0x57c>
 8008a86:	6023      	str	r3, [r4, #0]
 8008a88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	f43f adf1 	beq.w	8008672 <_strtod_l+0x72>
 8008a90:	4620      	mov	r0, r4
 8008a92:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008a94:	f7ff f934 	bl	8007d00 <_Bfree>
 8008a98:	4620      	mov	r0, r4
 8008a9a:	9908      	ldr	r1, [sp, #32]
 8008a9c:	f7ff f930 	bl	8007d00 <_Bfree>
 8008aa0:	4659      	mov	r1, fp
 8008aa2:	4620      	mov	r0, r4
 8008aa4:	f7ff f92c 	bl	8007d00 <_Bfree>
 8008aa8:	4620      	mov	r0, r4
 8008aaa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008aac:	f7ff f928 	bl	8007d00 <_Bfree>
 8008ab0:	4631      	mov	r1, r6
 8008ab2:	4620      	mov	r0, r4
 8008ab4:	f7ff f924 	bl	8007d00 <_Bfree>
 8008ab8:	e5db      	b.n	8008672 <_strtod_l+0x72>
 8008aba:	4b33      	ldr	r3, [pc, #204]	; (8008b88 <_strtod_l+0x588>)
 8008abc:	4640      	mov	r0, r8
 8008abe:	9305      	str	r3, [sp, #20]
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	4649      	mov	r1, r9
 8008ac4:	469a      	mov	sl, r3
 8008ac6:	112d      	asrs	r5, r5, #4
 8008ac8:	2d01      	cmp	r5, #1
 8008aca:	dc21      	bgt.n	8008b10 <_strtod_l+0x510>
 8008acc:	b10b      	cbz	r3, 8008ad2 <_strtod_l+0x4d2>
 8008ace:	4680      	mov	r8, r0
 8008ad0:	4689      	mov	r9, r1
 8008ad2:	492d      	ldr	r1, [pc, #180]	; (8008b88 <_strtod_l+0x588>)
 8008ad4:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008ad8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008adc:	4642      	mov	r2, r8
 8008ade:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ae2:	464b      	mov	r3, r9
 8008ae4:	f7f7 fcf8 	bl	80004d8 <__aeabi_dmul>
 8008ae8:	4b24      	ldr	r3, [pc, #144]	; (8008b7c <_strtod_l+0x57c>)
 8008aea:	460a      	mov	r2, r1
 8008aec:	400b      	ands	r3, r1
 8008aee:	4927      	ldr	r1, [pc, #156]	; (8008b8c <_strtod_l+0x58c>)
 8008af0:	4680      	mov	r8, r0
 8008af2:	428b      	cmp	r3, r1
 8008af4:	d8be      	bhi.n	8008a74 <_strtod_l+0x474>
 8008af6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008afa:	428b      	cmp	r3, r1
 8008afc:	bf86      	itte	hi
 8008afe:	f04f 38ff 	movhi.w	r8, #4294967295
 8008b02:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8008b90 <_strtod_l+0x590>
 8008b06:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	9305      	str	r3, [sp, #20]
 8008b0e:	e07b      	b.n	8008c08 <_strtod_l+0x608>
 8008b10:	07ea      	lsls	r2, r5, #31
 8008b12:	d505      	bpl.n	8008b20 <_strtod_l+0x520>
 8008b14:	9b05      	ldr	r3, [sp, #20]
 8008b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b1a:	f7f7 fcdd 	bl	80004d8 <__aeabi_dmul>
 8008b1e:	2301      	movs	r3, #1
 8008b20:	9a05      	ldr	r2, [sp, #20]
 8008b22:	f10a 0a01 	add.w	sl, sl, #1
 8008b26:	3208      	adds	r2, #8
 8008b28:	106d      	asrs	r5, r5, #1
 8008b2a:	9205      	str	r2, [sp, #20]
 8008b2c:	e7cc      	b.n	8008ac8 <_strtod_l+0x4c8>
 8008b2e:	d0ec      	beq.n	8008b0a <_strtod_l+0x50a>
 8008b30:	426d      	negs	r5, r5
 8008b32:	f015 020f 	ands.w	r2, r5, #15
 8008b36:	d00a      	beq.n	8008b4e <_strtod_l+0x54e>
 8008b38:	4b12      	ldr	r3, [pc, #72]	; (8008b84 <_strtod_l+0x584>)
 8008b3a:	4640      	mov	r0, r8
 8008b3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b40:	4649      	mov	r1, r9
 8008b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b46:	f7f7 fdf1 	bl	800072c <__aeabi_ddiv>
 8008b4a:	4680      	mov	r8, r0
 8008b4c:	4689      	mov	r9, r1
 8008b4e:	112d      	asrs	r5, r5, #4
 8008b50:	d0db      	beq.n	8008b0a <_strtod_l+0x50a>
 8008b52:	2d1f      	cmp	r5, #31
 8008b54:	dd1e      	ble.n	8008b94 <_strtod_l+0x594>
 8008b56:	2600      	movs	r6, #0
 8008b58:	46b3      	mov	fp, r6
 8008b5a:	960b      	str	r6, [sp, #44]	; 0x2c
 8008b5c:	9608      	str	r6, [sp, #32]
 8008b5e:	2322      	movs	r3, #34	; 0x22
 8008b60:	f04f 0800 	mov.w	r8, #0
 8008b64:	f04f 0900 	mov.w	r9, #0
 8008b68:	6023      	str	r3, [r4, #0]
 8008b6a:	e78d      	b.n	8008a88 <_strtod_l+0x488>
 8008b6c:	0800a66b 	.word	0x0800a66b
 8008b70:	0800a894 	.word	0x0800a894
 8008b74:	0800a663 	.word	0x0800a663
 8008b78:	0800a69a 	.word	0x0800a69a
 8008b7c:	7ff00000 	.word	0x7ff00000
 8008b80:	0800aa25 	.word	0x0800aa25
 8008b84:	0800a7a8 	.word	0x0800a7a8
 8008b88:	0800a780 	.word	0x0800a780
 8008b8c:	7ca00000 	.word	0x7ca00000
 8008b90:	7fefffff 	.word	0x7fefffff
 8008b94:	f015 0310 	ands.w	r3, r5, #16
 8008b98:	bf18      	it	ne
 8008b9a:	236a      	movne	r3, #106	; 0x6a
 8008b9c:	4640      	mov	r0, r8
 8008b9e:	9305      	str	r3, [sp, #20]
 8008ba0:	4649      	mov	r1, r9
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8008e70 <_strtod_l+0x870>
 8008ba8:	07ea      	lsls	r2, r5, #31
 8008baa:	d504      	bpl.n	8008bb6 <_strtod_l+0x5b6>
 8008bac:	e9da 2300 	ldrd	r2, r3, [sl]
 8008bb0:	f7f7 fc92 	bl	80004d8 <__aeabi_dmul>
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	106d      	asrs	r5, r5, #1
 8008bb8:	f10a 0a08 	add.w	sl, sl, #8
 8008bbc:	d1f4      	bne.n	8008ba8 <_strtod_l+0x5a8>
 8008bbe:	b10b      	cbz	r3, 8008bc4 <_strtod_l+0x5c4>
 8008bc0:	4680      	mov	r8, r0
 8008bc2:	4689      	mov	r9, r1
 8008bc4:	9b05      	ldr	r3, [sp, #20]
 8008bc6:	b1bb      	cbz	r3, 8008bf8 <_strtod_l+0x5f8>
 8008bc8:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008bcc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	4649      	mov	r1, r9
 8008bd4:	dd10      	ble.n	8008bf8 <_strtod_l+0x5f8>
 8008bd6:	2b1f      	cmp	r3, #31
 8008bd8:	f340 8128 	ble.w	8008e2c <_strtod_l+0x82c>
 8008bdc:	2b34      	cmp	r3, #52	; 0x34
 8008bde:	bfd8      	it	le
 8008be0:	f04f 33ff 	movle.w	r3, #4294967295
 8008be4:	f04f 0800 	mov.w	r8, #0
 8008be8:	bfcf      	iteee	gt
 8008bea:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008bee:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008bf2:	4093      	lslle	r3, r2
 8008bf4:	ea03 0901 	andle.w	r9, r3, r1
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	4640      	mov	r0, r8
 8008bfe:	4649      	mov	r1, r9
 8008c00:	f7f7 fed2 	bl	80009a8 <__aeabi_dcmpeq>
 8008c04:	2800      	cmp	r0, #0
 8008c06:	d1a6      	bne.n	8008b56 <_strtod_l+0x556>
 8008c08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c0a:	465a      	mov	r2, fp
 8008c0c:	9300      	str	r3, [sp, #0]
 8008c0e:	4620      	mov	r0, r4
 8008c10:	4633      	mov	r3, r6
 8008c12:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008c14:	f7ff f8dc 	bl	8007dd0 <__s2b>
 8008c18:	900b      	str	r0, [sp, #44]	; 0x2c
 8008c1a:	2800      	cmp	r0, #0
 8008c1c:	f43f af2a 	beq.w	8008a74 <_strtod_l+0x474>
 8008c20:	2600      	movs	r6, #0
 8008c22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c24:	9b08      	ldr	r3, [sp, #32]
 8008c26:	2a00      	cmp	r2, #0
 8008c28:	eba3 0307 	sub.w	r3, r3, r7
 8008c2c:	bfa8      	it	ge
 8008c2e:	2300      	movge	r3, #0
 8008c30:	46b3      	mov	fp, r6
 8008c32:	9312      	str	r3, [sp, #72]	; 0x48
 8008c34:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008c38:	9316      	str	r3, [sp, #88]	; 0x58
 8008c3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c3c:	4620      	mov	r0, r4
 8008c3e:	6859      	ldr	r1, [r3, #4]
 8008c40:	f7ff f81e 	bl	8007c80 <_Balloc>
 8008c44:	9008      	str	r0, [sp, #32]
 8008c46:	2800      	cmp	r0, #0
 8008c48:	f43f af18 	beq.w	8008a7c <_strtod_l+0x47c>
 8008c4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c4e:	300c      	adds	r0, #12
 8008c50:	691a      	ldr	r2, [r3, #16]
 8008c52:	f103 010c 	add.w	r1, r3, #12
 8008c56:	3202      	adds	r2, #2
 8008c58:	0092      	lsls	r2, r2, #2
 8008c5a:	f000 fd89 	bl	8009770 <memcpy>
 8008c5e:	ab1c      	add	r3, sp, #112	; 0x70
 8008c60:	9301      	str	r3, [sp, #4]
 8008c62:	ab1b      	add	r3, sp, #108	; 0x6c
 8008c64:	9300      	str	r3, [sp, #0]
 8008c66:	4642      	mov	r2, r8
 8008c68:	464b      	mov	r3, r9
 8008c6a:	4620      	mov	r0, r4
 8008c6c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8008c70:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8008c74:	f7ff fbd8 	bl	8008428 <__d2b>
 8008c78:	901a      	str	r0, [sp, #104]	; 0x68
 8008c7a:	2800      	cmp	r0, #0
 8008c7c:	f43f aefe 	beq.w	8008a7c <_strtod_l+0x47c>
 8008c80:	2101      	movs	r1, #1
 8008c82:	4620      	mov	r0, r4
 8008c84:	f7ff f93c 	bl	8007f00 <__i2b>
 8008c88:	4683      	mov	fp, r0
 8008c8a:	2800      	cmp	r0, #0
 8008c8c:	f43f aef6 	beq.w	8008a7c <_strtod_l+0x47c>
 8008c90:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8008c92:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008c94:	2f00      	cmp	r7, #0
 8008c96:	bfab      	itete	ge
 8008c98:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 8008c9a:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8008c9c:	eb07 0a03 	addge.w	sl, r7, r3
 8008ca0:	1bdd      	sublt	r5, r3, r7
 8008ca2:	9b05      	ldr	r3, [sp, #20]
 8008ca4:	bfa8      	it	ge
 8008ca6:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8008ca8:	eba7 0703 	sub.w	r7, r7, r3
 8008cac:	4417      	add	r7, r2
 8008cae:	4b71      	ldr	r3, [pc, #452]	; (8008e74 <_strtod_l+0x874>)
 8008cb0:	f107 37ff 	add.w	r7, r7, #4294967295
 8008cb4:	bfb8      	it	lt
 8008cb6:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 8008cba:	429f      	cmp	r7, r3
 8008cbc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008cc0:	f280 80c7 	bge.w	8008e52 <_strtod_l+0x852>
 8008cc4:	1bdb      	subs	r3, r3, r7
 8008cc6:	2b1f      	cmp	r3, #31
 8008cc8:	f04f 0101 	mov.w	r1, #1
 8008ccc:	eba2 0203 	sub.w	r2, r2, r3
 8008cd0:	f300 80b3 	bgt.w	8008e3a <_strtod_l+0x83a>
 8008cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8008cd8:	9313      	str	r3, [sp, #76]	; 0x4c
 8008cda:	2300      	movs	r3, #0
 8008cdc:	9310      	str	r3, [sp, #64]	; 0x40
 8008cde:	eb0a 0702 	add.w	r7, sl, r2
 8008ce2:	9b05      	ldr	r3, [sp, #20]
 8008ce4:	45ba      	cmp	sl, r7
 8008ce6:	4415      	add	r5, r2
 8008ce8:	441d      	add	r5, r3
 8008cea:	4653      	mov	r3, sl
 8008cec:	bfa8      	it	ge
 8008cee:	463b      	movge	r3, r7
 8008cf0:	42ab      	cmp	r3, r5
 8008cf2:	bfa8      	it	ge
 8008cf4:	462b      	movge	r3, r5
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	bfc2      	ittt	gt
 8008cfa:	1aff      	subgt	r7, r7, r3
 8008cfc:	1aed      	subgt	r5, r5, r3
 8008cfe:	ebaa 0a03 	subgt.w	sl, sl, r3
 8008d02:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	dd17      	ble.n	8008d38 <_strtod_l+0x738>
 8008d08:	4659      	mov	r1, fp
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	4620      	mov	r0, r4
 8008d0e:	f7ff f9b5 	bl	800807c <__pow5mult>
 8008d12:	4683      	mov	fp, r0
 8008d14:	2800      	cmp	r0, #0
 8008d16:	f43f aeb1 	beq.w	8008a7c <_strtod_l+0x47c>
 8008d1a:	4601      	mov	r1, r0
 8008d1c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008d1e:	4620      	mov	r0, r4
 8008d20:	f7ff f904 	bl	8007f2c <__multiply>
 8008d24:	900a      	str	r0, [sp, #40]	; 0x28
 8008d26:	2800      	cmp	r0, #0
 8008d28:	f43f aea8 	beq.w	8008a7c <_strtod_l+0x47c>
 8008d2c:	4620      	mov	r0, r4
 8008d2e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008d30:	f7fe ffe6 	bl	8007d00 <_Bfree>
 8008d34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d36:	931a      	str	r3, [sp, #104]	; 0x68
 8008d38:	2f00      	cmp	r7, #0
 8008d3a:	f300 808f 	bgt.w	8008e5c <_strtod_l+0x85c>
 8008d3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	dd08      	ble.n	8008d56 <_strtod_l+0x756>
 8008d44:	4620      	mov	r0, r4
 8008d46:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008d48:	9908      	ldr	r1, [sp, #32]
 8008d4a:	f7ff f997 	bl	800807c <__pow5mult>
 8008d4e:	9008      	str	r0, [sp, #32]
 8008d50:	2800      	cmp	r0, #0
 8008d52:	f43f ae93 	beq.w	8008a7c <_strtod_l+0x47c>
 8008d56:	2d00      	cmp	r5, #0
 8008d58:	dd08      	ble.n	8008d6c <_strtod_l+0x76c>
 8008d5a:	462a      	mov	r2, r5
 8008d5c:	4620      	mov	r0, r4
 8008d5e:	9908      	ldr	r1, [sp, #32]
 8008d60:	f7ff f9e6 	bl	8008130 <__lshift>
 8008d64:	9008      	str	r0, [sp, #32]
 8008d66:	2800      	cmp	r0, #0
 8008d68:	f43f ae88 	beq.w	8008a7c <_strtod_l+0x47c>
 8008d6c:	f1ba 0f00 	cmp.w	sl, #0
 8008d70:	dd08      	ble.n	8008d84 <_strtod_l+0x784>
 8008d72:	4659      	mov	r1, fp
 8008d74:	4652      	mov	r2, sl
 8008d76:	4620      	mov	r0, r4
 8008d78:	f7ff f9da 	bl	8008130 <__lshift>
 8008d7c:	4683      	mov	fp, r0
 8008d7e:	2800      	cmp	r0, #0
 8008d80:	f43f ae7c 	beq.w	8008a7c <_strtod_l+0x47c>
 8008d84:	4620      	mov	r0, r4
 8008d86:	9a08      	ldr	r2, [sp, #32]
 8008d88:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008d8a:	f7ff fa59 	bl	8008240 <__mdiff>
 8008d8e:	4606      	mov	r6, r0
 8008d90:	2800      	cmp	r0, #0
 8008d92:	f43f ae73 	beq.w	8008a7c <_strtod_l+0x47c>
 8008d96:	2500      	movs	r5, #0
 8008d98:	68c3      	ldr	r3, [r0, #12]
 8008d9a:	4659      	mov	r1, fp
 8008d9c:	60c5      	str	r5, [r0, #12]
 8008d9e:	930a      	str	r3, [sp, #40]	; 0x28
 8008da0:	f7ff fa32 	bl	8008208 <__mcmp>
 8008da4:	42a8      	cmp	r0, r5
 8008da6:	da6b      	bge.n	8008e80 <_strtod_l+0x880>
 8008da8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008daa:	ea53 0308 	orrs.w	r3, r3, r8
 8008dae:	f040 808f 	bne.w	8008ed0 <_strtod_l+0x8d0>
 8008db2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	f040 808a 	bne.w	8008ed0 <_strtod_l+0x8d0>
 8008dbc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008dc0:	0d1b      	lsrs	r3, r3, #20
 8008dc2:	051b      	lsls	r3, r3, #20
 8008dc4:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008dc8:	f240 8082 	bls.w	8008ed0 <_strtod_l+0x8d0>
 8008dcc:	6973      	ldr	r3, [r6, #20]
 8008dce:	b913      	cbnz	r3, 8008dd6 <_strtod_l+0x7d6>
 8008dd0:	6933      	ldr	r3, [r6, #16]
 8008dd2:	2b01      	cmp	r3, #1
 8008dd4:	dd7c      	ble.n	8008ed0 <_strtod_l+0x8d0>
 8008dd6:	4631      	mov	r1, r6
 8008dd8:	2201      	movs	r2, #1
 8008dda:	4620      	mov	r0, r4
 8008ddc:	f7ff f9a8 	bl	8008130 <__lshift>
 8008de0:	4659      	mov	r1, fp
 8008de2:	4606      	mov	r6, r0
 8008de4:	f7ff fa10 	bl	8008208 <__mcmp>
 8008de8:	2800      	cmp	r0, #0
 8008dea:	dd71      	ble.n	8008ed0 <_strtod_l+0x8d0>
 8008dec:	9905      	ldr	r1, [sp, #20]
 8008dee:	464b      	mov	r3, r9
 8008df0:	4a21      	ldr	r2, [pc, #132]	; (8008e78 <_strtod_l+0x878>)
 8008df2:	2900      	cmp	r1, #0
 8008df4:	f000 808d 	beq.w	8008f12 <_strtod_l+0x912>
 8008df8:	ea02 0109 	and.w	r1, r2, r9
 8008dfc:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008e00:	f300 8087 	bgt.w	8008f12 <_strtod_l+0x912>
 8008e04:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008e08:	f77f aea9 	ble.w	8008b5e <_strtod_l+0x55e>
 8008e0c:	4640      	mov	r0, r8
 8008e0e:	4649      	mov	r1, r9
 8008e10:	4b1a      	ldr	r3, [pc, #104]	; (8008e7c <_strtod_l+0x87c>)
 8008e12:	2200      	movs	r2, #0
 8008e14:	f7f7 fb60 	bl	80004d8 <__aeabi_dmul>
 8008e18:	4b17      	ldr	r3, [pc, #92]	; (8008e78 <_strtod_l+0x878>)
 8008e1a:	4680      	mov	r8, r0
 8008e1c:	400b      	ands	r3, r1
 8008e1e:	4689      	mov	r9, r1
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	f47f ae35 	bne.w	8008a90 <_strtod_l+0x490>
 8008e26:	2322      	movs	r3, #34	; 0x22
 8008e28:	6023      	str	r3, [r4, #0]
 8008e2a:	e631      	b.n	8008a90 <_strtod_l+0x490>
 8008e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8008e30:	fa02 f303 	lsl.w	r3, r2, r3
 8008e34:	ea03 0808 	and.w	r8, r3, r8
 8008e38:	e6de      	b.n	8008bf8 <_strtod_l+0x5f8>
 8008e3a:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 8008e3e:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 8008e42:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 8008e46:	37e2      	adds	r7, #226	; 0xe2
 8008e48:	fa01 f307 	lsl.w	r3, r1, r7
 8008e4c:	9310      	str	r3, [sp, #64]	; 0x40
 8008e4e:	9113      	str	r1, [sp, #76]	; 0x4c
 8008e50:	e745      	b.n	8008cde <_strtod_l+0x6de>
 8008e52:	2300      	movs	r3, #0
 8008e54:	9310      	str	r3, [sp, #64]	; 0x40
 8008e56:	2301      	movs	r3, #1
 8008e58:	9313      	str	r3, [sp, #76]	; 0x4c
 8008e5a:	e740      	b.n	8008cde <_strtod_l+0x6de>
 8008e5c:	463a      	mov	r2, r7
 8008e5e:	4620      	mov	r0, r4
 8008e60:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008e62:	f7ff f965 	bl	8008130 <__lshift>
 8008e66:	901a      	str	r0, [sp, #104]	; 0x68
 8008e68:	2800      	cmp	r0, #0
 8008e6a:	f47f af68 	bne.w	8008d3e <_strtod_l+0x73e>
 8008e6e:	e605      	b.n	8008a7c <_strtod_l+0x47c>
 8008e70:	0800a8a8 	.word	0x0800a8a8
 8008e74:	fffffc02 	.word	0xfffffc02
 8008e78:	7ff00000 	.word	0x7ff00000
 8008e7c:	39500000 	.word	0x39500000
 8008e80:	46ca      	mov	sl, r9
 8008e82:	d165      	bne.n	8008f50 <_strtod_l+0x950>
 8008e84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e86:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008e8a:	b352      	cbz	r2, 8008ee2 <_strtod_l+0x8e2>
 8008e8c:	4a9e      	ldr	r2, [pc, #632]	; (8009108 <_strtod_l+0xb08>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d12a      	bne.n	8008ee8 <_strtod_l+0x8e8>
 8008e92:	9b05      	ldr	r3, [sp, #20]
 8008e94:	4641      	mov	r1, r8
 8008e96:	b1fb      	cbz	r3, 8008ed8 <_strtod_l+0x8d8>
 8008e98:	4b9c      	ldr	r3, [pc, #624]	; (800910c <_strtod_l+0xb0c>)
 8008e9a:	f04f 32ff 	mov.w	r2, #4294967295
 8008e9e:	ea09 0303 	and.w	r3, r9, r3
 8008ea2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008ea6:	d81a      	bhi.n	8008ede <_strtod_l+0x8de>
 8008ea8:	0d1b      	lsrs	r3, r3, #20
 8008eaa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008eae:	fa02 f303 	lsl.w	r3, r2, r3
 8008eb2:	4299      	cmp	r1, r3
 8008eb4:	d118      	bne.n	8008ee8 <_strtod_l+0x8e8>
 8008eb6:	4b96      	ldr	r3, [pc, #600]	; (8009110 <_strtod_l+0xb10>)
 8008eb8:	459a      	cmp	sl, r3
 8008eba:	d102      	bne.n	8008ec2 <_strtod_l+0x8c2>
 8008ebc:	3101      	adds	r1, #1
 8008ebe:	f43f addd 	beq.w	8008a7c <_strtod_l+0x47c>
 8008ec2:	f04f 0800 	mov.w	r8, #0
 8008ec6:	4b91      	ldr	r3, [pc, #580]	; (800910c <_strtod_l+0xb0c>)
 8008ec8:	ea0a 0303 	and.w	r3, sl, r3
 8008ecc:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8008ed0:	9b05      	ldr	r3, [sp, #20]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d19a      	bne.n	8008e0c <_strtod_l+0x80c>
 8008ed6:	e5db      	b.n	8008a90 <_strtod_l+0x490>
 8008ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8008edc:	e7e9      	b.n	8008eb2 <_strtod_l+0x8b2>
 8008ede:	4613      	mov	r3, r2
 8008ee0:	e7e7      	b.n	8008eb2 <_strtod_l+0x8b2>
 8008ee2:	ea53 0308 	orrs.w	r3, r3, r8
 8008ee6:	d081      	beq.n	8008dec <_strtod_l+0x7ec>
 8008ee8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008eea:	b1e3      	cbz	r3, 8008f26 <_strtod_l+0x926>
 8008eec:	ea13 0f0a 	tst.w	r3, sl
 8008ef0:	d0ee      	beq.n	8008ed0 <_strtod_l+0x8d0>
 8008ef2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ef4:	4640      	mov	r0, r8
 8008ef6:	4649      	mov	r1, r9
 8008ef8:	9a05      	ldr	r2, [sp, #20]
 8008efa:	b1c3      	cbz	r3, 8008f2e <_strtod_l+0x92e>
 8008efc:	f7ff fb5c 	bl	80085b8 <sulp>
 8008f00:	4602      	mov	r2, r0
 8008f02:	460b      	mov	r3, r1
 8008f04:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008f06:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008f08:	f7f7 f930 	bl	800016c <__adddf3>
 8008f0c:	4680      	mov	r8, r0
 8008f0e:	4689      	mov	r9, r1
 8008f10:	e7de      	b.n	8008ed0 <_strtod_l+0x8d0>
 8008f12:	4013      	ands	r3, r2
 8008f14:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008f18:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008f1c:	f04f 38ff 	mov.w	r8, #4294967295
 8008f20:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008f24:	e7d4      	b.n	8008ed0 <_strtod_l+0x8d0>
 8008f26:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008f28:	ea13 0f08 	tst.w	r3, r8
 8008f2c:	e7e0      	b.n	8008ef0 <_strtod_l+0x8f0>
 8008f2e:	f7ff fb43 	bl	80085b8 <sulp>
 8008f32:	4602      	mov	r2, r0
 8008f34:	460b      	mov	r3, r1
 8008f36:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008f38:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008f3a:	f7f7 f915 	bl	8000168 <__aeabi_dsub>
 8008f3e:	2200      	movs	r2, #0
 8008f40:	2300      	movs	r3, #0
 8008f42:	4680      	mov	r8, r0
 8008f44:	4689      	mov	r9, r1
 8008f46:	f7f7 fd2f 	bl	80009a8 <__aeabi_dcmpeq>
 8008f4a:	2800      	cmp	r0, #0
 8008f4c:	d0c0      	beq.n	8008ed0 <_strtod_l+0x8d0>
 8008f4e:	e606      	b.n	8008b5e <_strtod_l+0x55e>
 8008f50:	4659      	mov	r1, fp
 8008f52:	4630      	mov	r0, r6
 8008f54:	f7ff fabe 	bl	80084d4 <__ratio>
 8008f58:	4602      	mov	r2, r0
 8008f5a:	460b      	mov	r3, r1
 8008f5c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008f60:	2200      	movs	r2, #0
 8008f62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008f66:	f7f7 fd33 	bl	80009d0 <__aeabi_dcmple>
 8008f6a:	2800      	cmp	r0, #0
 8008f6c:	d06f      	beq.n	800904e <_strtod_l+0xa4e>
 8008f6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d17c      	bne.n	800906e <_strtod_l+0xa6e>
 8008f74:	f1b8 0f00 	cmp.w	r8, #0
 8008f78:	d159      	bne.n	800902e <_strtod_l+0xa2e>
 8008f7a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d17b      	bne.n	800907a <_strtod_l+0xa7a>
 8008f82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008f86:	2200      	movs	r2, #0
 8008f88:	4b62      	ldr	r3, [pc, #392]	; (8009114 <_strtod_l+0xb14>)
 8008f8a:	f7f7 fd17 	bl	80009bc <__aeabi_dcmplt>
 8008f8e:	2800      	cmp	r0, #0
 8008f90:	d15a      	bne.n	8009048 <_strtod_l+0xa48>
 8008f92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008f96:	2200      	movs	r2, #0
 8008f98:	4b5f      	ldr	r3, [pc, #380]	; (8009118 <_strtod_l+0xb18>)
 8008f9a:	f7f7 fa9d 	bl	80004d8 <__aeabi_dmul>
 8008f9e:	4605      	mov	r5, r0
 8008fa0:	460f      	mov	r7, r1
 8008fa2:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008fa6:	9506      	str	r5, [sp, #24]
 8008fa8:	9307      	str	r3, [sp, #28]
 8008faa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008fae:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008fb2:	4b56      	ldr	r3, [pc, #344]	; (800910c <_strtod_l+0xb0c>)
 8008fb4:	4a55      	ldr	r2, [pc, #340]	; (800910c <_strtod_l+0xb0c>)
 8008fb6:	ea0a 0303 	and.w	r3, sl, r3
 8008fba:	9313      	str	r3, [sp, #76]	; 0x4c
 8008fbc:	4b57      	ldr	r3, [pc, #348]	; (800911c <_strtod_l+0xb1c>)
 8008fbe:	ea0a 0202 	and.w	r2, sl, r2
 8008fc2:	429a      	cmp	r2, r3
 8008fc4:	f040 80b0 	bne.w	8009128 <_strtod_l+0xb28>
 8008fc8:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8008fcc:	4640      	mov	r0, r8
 8008fce:	4649      	mov	r1, r9
 8008fd0:	f7ff f9c2 	bl	8008358 <__ulp>
 8008fd4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008fd8:	f7f7 fa7e 	bl	80004d8 <__aeabi_dmul>
 8008fdc:	4642      	mov	r2, r8
 8008fde:	464b      	mov	r3, r9
 8008fe0:	f7f7 f8c4 	bl	800016c <__adddf3>
 8008fe4:	f8df a124 	ldr.w	sl, [pc, #292]	; 800910c <_strtod_l+0xb0c>
 8008fe8:	4a4d      	ldr	r2, [pc, #308]	; (8009120 <_strtod_l+0xb20>)
 8008fea:	ea01 0a0a 	and.w	sl, r1, sl
 8008fee:	4592      	cmp	sl, r2
 8008ff0:	4680      	mov	r8, r0
 8008ff2:	d948      	bls.n	8009086 <_strtod_l+0xa86>
 8008ff4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008ff6:	4b46      	ldr	r3, [pc, #280]	; (8009110 <_strtod_l+0xb10>)
 8008ff8:	429a      	cmp	r2, r3
 8008ffa:	d103      	bne.n	8009004 <_strtod_l+0xa04>
 8008ffc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ffe:	3301      	adds	r3, #1
 8009000:	f43f ad3c 	beq.w	8008a7c <_strtod_l+0x47c>
 8009004:	f04f 38ff 	mov.w	r8, #4294967295
 8009008:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8009110 <_strtod_l+0xb10>
 800900c:	4620      	mov	r0, r4
 800900e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009010:	f7fe fe76 	bl	8007d00 <_Bfree>
 8009014:	4620      	mov	r0, r4
 8009016:	9908      	ldr	r1, [sp, #32]
 8009018:	f7fe fe72 	bl	8007d00 <_Bfree>
 800901c:	4659      	mov	r1, fp
 800901e:	4620      	mov	r0, r4
 8009020:	f7fe fe6e 	bl	8007d00 <_Bfree>
 8009024:	4631      	mov	r1, r6
 8009026:	4620      	mov	r0, r4
 8009028:	f7fe fe6a 	bl	8007d00 <_Bfree>
 800902c:	e605      	b.n	8008c3a <_strtod_l+0x63a>
 800902e:	f1b8 0f01 	cmp.w	r8, #1
 8009032:	d103      	bne.n	800903c <_strtod_l+0xa3c>
 8009034:	f1b9 0f00 	cmp.w	r9, #0
 8009038:	f43f ad91 	beq.w	8008b5e <_strtod_l+0x55e>
 800903c:	2200      	movs	r2, #0
 800903e:	4b39      	ldr	r3, [pc, #228]	; (8009124 <_strtod_l+0xb24>)
 8009040:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8009042:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009046:	e016      	b.n	8009076 <_strtod_l+0xa76>
 8009048:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800904a:	4f33      	ldr	r7, [pc, #204]	; (8009118 <_strtod_l+0xb18>)
 800904c:	e7a9      	b.n	8008fa2 <_strtod_l+0x9a2>
 800904e:	4b32      	ldr	r3, [pc, #200]	; (8009118 <_strtod_l+0xb18>)
 8009050:	2200      	movs	r2, #0
 8009052:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009056:	f7f7 fa3f 	bl	80004d8 <__aeabi_dmul>
 800905a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800905c:	4605      	mov	r5, r0
 800905e:	460f      	mov	r7, r1
 8009060:	2b00      	cmp	r3, #0
 8009062:	d09e      	beq.n	8008fa2 <_strtod_l+0x9a2>
 8009064:	4602      	mov	r2, r0
 8009066:	460b      	mov	r3, r1
 8009068:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800906c:	e79d      	b.n	8008faa <_strtod_l+0x9aa>
 800906e:	2200      	movs	r2, #0
 8009070:	4b28      	ldr	r3, [pc, #160]	; (8009114 <_strtod_l+0xb14>)
 8009072:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009076:	4f27      	ldr	r7, [pc, #156]	; (8009114 <_strtod_l+0xb14>)
 8009078:	e797      	b.n	8008faa <_strtod_l+0x9aa>
 800907a:	2200      	movs	r2, #0
 800907c:	4b29      	ldr	r3, [pc, #164]	; (8009124 <_strtod_l+0xb24>)
 800907e:	4645      	mov	r5, r8
 8009080:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009084:	e7f7      	b.n	8009076 <_strtod_l+0xa76>
 8009086:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 800908a:	9b05      	ldr	r3, [sp, #20]
 800908c:	46ca      	mov	sl, r9
 800908e:	2b00      	cmp	r3, #0
 8009090:	d1bc      	bne.n	800900c <_strtod_l+0xa0c>
 8009092:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009096:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009098:	0d1b      	lsrs	r3, r3, #20
 800909a:	051b      	lsls	r3, r3, #20
 800909c:	429a      	cmp	r2, r3
 800909e:	d1b5      	bne.n	800900c <_strtod_l+0xa0c>
 80090a0:	4628      	mov	r0, r5
 80090a2:	4639      	mov	r1, r7
 80090a4:	f7f7 fe6e 	bl	8000d84 <__aeabi_d2lz>
 80090a8:	f7f7 f9e8 	bl	800047c <__aeabi_l2d>
 80090ac:	4602      	mov	r2, r0
 80090ae:	460b      	mov	r3, r1
 80090b0:	4628      	mov	r0, r5
 80090b2:	4639      	mov	r1, r7
 80090b4:	f7f7 f858 	bl	8000168 <__aeabi_dsub>
 80090b8:	460b      	mov	r3, r1
 80090ba:	4602      	mov	r2, r0
 80090bc:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 80090c0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80090c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090c6:	ea4a 0a08 	orr.w	sl, sl, r8
 80090ca:	ea5a 0a03 	orrs.w	sl, sl, r3
 80090ce:	d06c      	beq.n	80091aa <_strtod_l+0xbaa>
 80090d0:	a309      	add	r3, pc, #36	; (adr r3, 80090f8 <_strtod_l+0xaf8>)
 80090d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090d6:	f7f7 fc71 	bl	80009bc <__aeabi_dcmplt>
 80090da:	2800      	cmp	r0, #0
 80090dc:	f47f acd8 	bne.w	8008a90 <_strtod_l+0x490>
 80090e0:	a307      	add	r3, pc, #28	; (adr r3, 8009100 <_strtod_l+0xb00>)
 80090e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80090ea:	f7f7 fc85 	bl	80009f8 <__aeabi_dcmpgt>
 80090ee:	2800      	cmp	r0, #0
 80090f0:	d08c      	beq.n	800900c <_strtod_l+0xa0c>
 80090f2:	e4cd      	b.n	8008a90 <_strtod_l+0x490>
 80090f4:	f3af 8000 	nop.w
 80090f8:	94a03595 	.word	0x94a03595
 80090fc:	3fdfffff 	.word	0x3fdfffff
 8009100:	35afe535 	.word	0x35afe535
 8009104:	3fe00000 	.word	0x3fe00000
 8009108:	000fffff 	.word	0x000fffff
 800910c:	7ff00000 	.word	0x7ff00000
 8009110:	7fefffff 	.word	0x7fefffff
 8009114:	3ff00000 	.word	0x3ff00000
 8009118:	3fe00000 	.word	0x3fe00000
 800911c:	7fe00000 	.word	0x7fe00000
 8009120:	7c9fffff 	.word	0x7c9fffff
 8009124:	bff00000 	.word	0xbff00000
 8009128:	9b05      	ldr	r3, [sp, #20]
 800912a:	b333      	cbz	r3, 800917a <_strtod_l+0xb7a>
 800912c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800912e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009132:	d822      	bhi.n	800917a <_strtod_l+0xb7a>
 8009134:	a328      	add	r3, pc, #160	; (adr r3, 80091d8 <_strtod_l+0xbd8>)
 8009136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800913a:	4628      	mov	r0, r5
 800913c:	4639      	mov	r1, r7
 800913e:	f7f7 fc47 	bl	80009d0 <__aeabi_dcmple>
 8009142:	b1a0      	cbz	r0, 800916e <_strtod_l+0xb6e>
 8009144:	4639      	mov	r1, r7
 8009146:	4628      	mov	r0, r5
 8009148:	f7f7 fc9e 	bl	8000a88 <__aeabi_d2uiz>
 800914c:	2801      	cmp	r0, #1
 800914e:	bf38      	it	cc
 8009150:	2001      	movcc	r0, #1
 8009152:	f7f7 f947 	bl	80003e4 <__aeabi_ui2d>
 8009156:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009158:	4605      	mov	r5, r0
 800915a:	460f      	mov	r7, r1
 800915c:	bb03      	cbnz	r3, 80091a0 <_strtod_l+0xba0>
 800915e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009162:	9014      	str	r0, [sp, #80]	; 0x50
 8009164:	9315      	str	r3, [sp, #84]	; 0x54
 8009166:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800916a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800916e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009170:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009172:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009176:	1a9b      	subs	r3, r3, r2
 8009178:	9311      	str	r3, [sp, #68]	; 0x44
 800917a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800917c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800917e:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8009182:	f7ff f8e9 	bl	8008358 <__ulp>
 8009186:	4602      	mov	r2, r0
 8009188:	460b      	mov	r3, r1
 800918a:	4640      	mov	r0, r8
 800918c:	4649      	mov	r1, r9
 800918e:	f7f7 f9a3 	bl	80004d8 <__aeabi_dmul>
 8009192:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009194:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009196:	f7f6 ffe9 	bl	800016c <__adddf3>
 800919a:	4680      	mov	r8, r0
 800919c:	4689      	mov	r9, r1
 800919e:	e774      	b.n	800908a <_strtod_l+0xa8a>
 80091a0:	4602      	mov	r2, r0
 80091a2:	460b      	mov	r3, r1
 80091a4:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80091a8:	e7dd      	b.n	8009166 <_strtod_l+0xb66>
 80091aa:	a30d      	add	r3, pc, #52	; (adr r3, 80091e0 <_strtod_l+0xbe0>)
 80091ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091b0:	f7f7 fc04 	bl	80009bc <__aeabi_dcmplt>
 80091b4:	e79b      	b.n	80090ee <_strtod_l+0xaee>
 80091b6:	2300      	movs	r3, #0
 80091b8:	930e      	str	r3, [sp, #56]	; 0x38
 80091ba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80091bc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80091be:	6013      	str	r3, [r2, #0]
 80091c0:	f7ff ba5b 	b.w	800867a <_strtod_l+0x7a>
 80091c4:	2a65      	cmp	r2, #101	; 0x65
 80091c6:	f43f ab52 	beq.w	800886e <_strtod_l+0x26e>
 80091ca:	2a45      	cmp	r2, #69	; 0x45
 80091cc:	f43f ab4f 	beq.w	800886e <_strtod_l+0x26e>
 80091d0:	2301      	movs	r3, #1
 80091d2:	f7ff bb87 	b.w	80088e4 <_strtod_l+0x2e4>
 80091d6:	bf00      	nop
 80091d8:	ffc00000 	.word	0xffc00000
 80091dc:	41dfffff 	.word	0x41dfffff
 80091e0:	94a03595 	.word	0x94a03595
 80091e4:	3fcfffff 	.word	0x3fcfffff

080091e8 <_strtod_r>:
 80091e8:	4b01      	ldr	r3, [pc, #4]	; (80091f0 <_strtod_r+0x8>)
 80091ea:	f7ff ba09 	b.w	8008600 <_strtod_l>
 80091ee:	bf00      	nop
 80091f0:	20000080 	.word	0x20000080

080091f4 <_strtol_l.constprop.0>:
 80091f4:	2b01      	cmp	r3, #1
 80091f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091fa:	4686      	mov	lr, r0
 80091fc:	4690      	mov	r8, r2
 80091fe:	d001      	beq.n	8009204 <_strtol_l.constprop.0+0x10>
 8009200:	2b24      	cmp	r3, #36	; 0x24
 8009202:	d906      	bls.n	8009212 <_strtol_l.constprop.0+0x1e>
 8009204:	f7fd fd94 	bl	8006d30 <__errno>
 8009208:	2316      	movs	r3, #22
 800920a:	6003      	str	r3, [r0, #0]
 800920c:	2000      	movs	r0, #0
 800920e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009212:	460d      	mov	r5, r1
 8009214:	4835      	ldr	r0, [pc, #212]	; (80092ec <_strtol_l.constprop.0+0xf8>)
 8009216:	462a      	mov	r2, r5
 8009218:	f815 4b01 	ldrb.w	r4, [r5], #1
 800921c:	5d06      	ldrb	r6, [r0, r4]
 800921e:	f016 0608 	ands.w	r6, r6, #8
 8009222:	d1f8      	bne.n	8009216 <_strtol_l.constprop.0+0x22>
 8009224:	2c2d      	cmp	r4, #45	; 0x2d
 8009226:	d12e      	bne.n	8009286 <_strtol_l.constprop.0+0x92>
 8009228:	2601      	movs	r6, #1
 800922a:	782c      	ldrb	r4, [r5, #0]
 800922c:	1c95      	adds	r5, r2, #2
 800922e:	2b00      	cmp	r3, #0
 8009230:	d057      	beq.n	80092e2 <_strtol_l.constprop.0+0xee>
 8009232:	2b10      	cmp	r3, #16
 8009234:	d109      	bne.n	800924a <_strtol_l.constprop.0+0x56>
 8009236:	2c30      	cmp	r4, #48	; 0x30
 8009238:	d107      	bne.n	800924a <_strtol_l.constprop.0+0x56>
 800923a:	782a      	ldrb	r2, [r5, #0]
 800923c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8009240:	2a58      	cmp	r2, #88	; 0x58
 8009242:	d149      	bne.n	80092d8 <_strtol_l.constprop.0+0xe4>
 8009244:	2310      	movs	r3, #16
 8009246:	786c      	ldrb	r4, [r5, #1]
 8009248:	3502      	adds	r5, #2
 800924a:	2200      	movs	r2, #0
 800924c:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8009250:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009254:	fbbc f9f3 	udiv	r9, ip, r3
 8009258:	4610      	mov	r0, r2
 800925a:	fb03 ca19 	mls	sl, r3, r9, ip
 800925e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8009262:	2f09      	cmp	r7, #9
 8009264:	d814      	bhi.n	8009290 <_strtol_l.constprop.0+0x9c>
 8009266:	463c      	mov	r4, r7
 8009268:	42a3      	cmp	r3, r4
 800926a:	dd20      	ble.n	80092ae <_strtol_l.constprop.0+0xba>
 800926c:	1c57      	adds	r7, r2, #1
 800926e:	d007      	beq.n	8009280 <_strtol_l.constprop.0+0x8c>
 8009270:	4581      	cmp	r9, r0
 8009272:	d319      	bcc.n	80092a8 <_strtol_l.constprop.0+0xb4>
 8009274:	d101      	bne.n	800927a <_strtol_l.constprop.0+0x86>
 8009276:	45a2      	cmp	sl, r4
 8009278:	db16      	blt.n	80092a8 <_strtol_l.constprop.0+0xb4>
 800927a:	2201      	movs	r2, #1
 800927c:	fb00 4003 	mla	r0, r0, r3, r4
 8009280:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009284:	e7eb      	b.n	800925e <_strtol_l.constprop.0+0x6a>
 8009286:	2c2b      	cmp	r4, #43	; 0x2b
 8009288:	bf04      	itt	eq
 800928a:	782c      	ldrbeq	r4, [r5, #0]
 800928c:	1c95      	addeq	r5, r2, #2
 800928e:	e7ce      	b.n	800922e <_strtol_l.constprop.0+0x3a>
 8009290:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009294:	2f19      	cmp	r7, #25
 8009296:	d801      	bhi.n	800929c <_strtol_l.constprop.0+0xa8>
 8009298:	3c37      	subs	r4, #55	; 0x37
 800929a:	e7e5      	b.n	8009268 <_strtol_l.constprop.0+0x74>
 800929c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80092a0:	2f19      	cmp	r7, #25
 80092a2:	d804      	bhi.n	80092ae <_strtol_l.constprop.0+0xba>
 80092a4:	3c57      	subs	r4, #87	; 0x57
 80092a6:	e7df      	b.n	8009268 <_strtol_l.constprop.0+0x74>
 80092a8:	f04f 32ff 	mov.w	r2, #4294967295
 80092ac:	e7e8      	b.n	8009280 <_strtol_l.constprop.0+0x8c>
 80092ae:	1c53      	adds	r3, r2, #1
 80092b0:	d108      	bne.n	80092c4 <_strtol_l.constprop.0+0xd0>
 80092b2:	2322      	movs	r3, #34	; 0x22
 80092b4:	4660      	mov	r0, ip
 80092b6:	f8ce 3000 	str.w	r3, [lr]
 80092ba:	f1b8 0f00 	cmp.w	r8, #0
 80092be:	d0a6      	beq.n	800920e <_strtol_l.constprop.0+0x1a>
 80092c0:	1e69      	subs	r1, r5, #1
 80092c2:	e006      	b.n	80092d2 <_strtol_l.constprop.0+0xde>
 80092c4:	b106      	cbz	r6, 80092c8 <_strtol_l.constprop.0+0xd4>
 80092c6:	4240      	negs	r0, r0
 80092c8:	f1b8 0f00 	cmp.w	r8, #0
 80092cc:	d09f      	beq.n	800920e <_strtol_l.constprop.0+0x1a>
 80092ce:	2a00      	cmp	r2, #0
 80092d0:	d1f6      	bne.n	80092c0 <_strtol_l.constprop.0+0xcc>
 80092d2:	f8c8 1000 	str.w	r1, [r8]
 80092d6:	e79a      	b.n	800920e <_strtol_l.constprop.0+0x1a>
 80092d8:	2430      	movs	r4, #48	; 0x30
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d1b5      	bne.n	800924a <_strtol_l.constprop.0+0x56>
 80092de:	2308      	movs	r3, #8
 80092e0:	e7b3      	b.n	800924a <_strtol_l.constprop.0+0x56>
 80092e2:	2c30      	cmp	r4, #48	; 0x30
 80092e4:	d0a9      	beq.n	800923a <_strtol_l.constprop.0+0x46>
 80092e6:	230a      	movs	r3, #10
 80092e8:	e7af      	b.n	800924a <_strtol_l.constprop.0+0x56>
 80092ea:	bf00      	nop
 80092ec:	0800a8d1 	.word	0x0800a8d1

080092f0 <_strtol_r>:
 80092f0:	f7ff bf80 	b.w	80091f4 <_strtol_l.constprop.0>

080092f4 <__ssputs_r>:
 80092f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092f8:	461f      	mov	r7, r3
 80092fa:	688e      	ldr	r6, [r1, #8]
 80092fc:	4682      	mov	sl, r0
 80092fe:	42be      	cmp	r6, r7
 8009300:	460c      	mov	r4, r1
 8009302:	4690      	mov	r8, r2
 8009304:	680b      	ldr	r3, [r1, #0]
 8009306:	d82c      	bhi.n	8009362 <__ssputs_r+0x6e>
 8009308:	898a      	ldrh	r2, [r1, #12]
 800930a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800930e:	d026      	beq.n	800935e <__ssputs_r+0x6a>
 8009310:	6965      	ldr	r5, [r4, #20]
 8009312:	6909      	ldr	r1, [r1, #16]
 8009314:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009318:	eba3 0901 	sub.w	r9, r3, r1
 800931c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009320:	1c7b      	adds	r3, r7, #1
 8009322:	444b      	add	r3, r9
 8009324:	106d      	asrs	r5, r5, #1
 8009326:	429d      	cmp	r5, r3
 8009328:	bf38      	it	cc
 800932a:	461d      	movcc	r5, r3
 800932c:	0553      	lsls	r3, r2, #21
 800932e:	d527      	bpl.n	8009380 <__ssputs_r+0x8c>
 8009330:	4629      	mov	r1, r5
 8009332:	f7fe fc19 	bl	8007b68 <_malloc_r>
 8009336:	4606      	mov	r6, r0
 8009338:	b360      	cbz	r0, 8009394 <__ssputs_r+0xa0>
 800933a:	464a      	mov	r2, r9
 800933c:	6921      	ldr	r1, [r4, #16]
 800933e:	f000 fa17 	bl	8009770 <memcpy>
 8009342:	89a3      	ldrh	r3, [r4, #12]
 8009344:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800934c:	81a3      	strh	r3, [r4, #12]
 800934e:	6126      	str	r6, [r4, #16]
 8009350:	444e      	add	r6, r9
 8009352:	6026      	str	r6, [r4, #0]
 8009354:	463e      	mov	r6, r7
 8009356:	6165      	str	r5, [r4, #20]
 8009358:	eba5 0509 	sub.w	r5, r5, r9
 800935c:	60a5      	str	r5, [r4, #8]
 800935e:	42be      	cmp	r6, r7
 8009360:	d900      	bls.n	8009364 <__ssputs_r+0x70>
 8009362:	463e      	mov	r6, r7
 8009364:	4632      	mov	r2, r6
 8009366:	4641      	mov	r1, r8
 8009368:	6820      	ldr	r0, [r4, #0]
 800936a:	f000 f9c5 	bl	80096f8 <memmove>
 800936e:	2000      	movs	r0, #0
 8009370:	68a3      	ldr	r3, [r4, #8]
 8009372:	1b9b      	subs	r3, r3, r6
 8009374:	60a3      	str	r3, [r4, #8]
 8009376:	6823      	ldr	r3, [r4, #0]
 8009378:	4433      	add	r3, r6
 800937a:	6023      	str	r3, [r4, #0]
 800937c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009380:	462a      	mov	r2, r5
 8009382:	f000 fda6 	bl	8009ed2 <_realloc_r>
 8009386:	4606      	mov	r6, r0
 8009388:	2800      	cmp	r0, #0
 800938a:	d1e0      	bne.n	800934e <__ssputs_r+0x5a>
 800938c:	4650      	mov	r0, sl
 800938e:	6921      	ldr	r1, [r4, #16]
 8009390:	f7fe fb7a 	bl	8007a88 <_free_r>
 8009394:	230c      	movs	r3, #12
 8009396:	f8ca 3000 	str.w	r3, [sl]
 800939a:	89a3      	ldrh	r3, [r4, #12]
 800939c:	f04f 30ff 	mov.w	r0, #4294967295
 80093a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093a4:	81a3      	strh	r3, [r4, #12]
 80093a6:	e7e9      	b.n	800937c <__ssputs_r+0x88>

080093a8 <_svfiprintf_r>:
 80093a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093ac:	4698      	mov	r8, r3
 80093ae:	898b      	ldrh	r3, [r1, #12]
 80093b0:	4607      	mov	r7, r0
 80093b2:	061b      	lsls	r3, r3, #24
 80093b4:	460d      	mov	r5, r1
 80093b6:	4614      	mov	r4, r2
 80093b8:	b09d      	sub	sp, #116	; 0x74
 80093ba:	d50e      	bpl.n	80093da <_svfiprintf_r+0x32>
 80093bc:	690b      	ldr	r3, [r1, #16]
 80093be:	b963      	cbnz	r3, 80093da <_svfiprintf_r+0x32>
 80093c0:	2140      	movs	r1, #64	; 0x40
 80093c2:	f7fe fbd1 	bl	8007b68 <_malloc_r>
 80093c6:	6028      	str	r0, [r5, #0]
 80093c8:	6128      	str	r0, [r5, #16]
 80093ca:	b920      	cbnz	r0, 80093d6 <_svfiprintf_r+0x2e>
 80093cc:	230c      	movs	r3, #12
 80093ce:	603b      	str	r3, [r7, #0]
 80093d0:	f04f 30ff 	mov.w	r0, #4294967295
 80093d4:	e0d0      	b.n	8009578 <_svfiprintf_r+0x1d0>
 80093d6:	2340      	movs	r3, #64	; 0x40
 80093d8:	616b      	str	r3, [r5, #20]
 80093da:	2300      	movs	r3, #0
 80093dc:	9309      	str	r3, [sp, #36]	; 0x24
 80093de:	2320      	movs	r3, #32
 80093e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80093e4:	2330      	movs	r3, #48	; 0x30
 80093e6:	f04f 0901 	mov.w	r9, #1
 80093ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80093ee:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8009590 <_svfiprintf_r+0x1e8>
 80093f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80093f6:	4623      	mov	r3, r4
 80093f8:	469a      	mov	sl, r3
 80093fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093fe:	b10a      	cbz	r2, 8009404 <_svfiprintf_r+0x5c>
 8009400:	2a25      	cmp	r2, #37	; 0x25
 8009402:	d1f9      	bne.n	80093f8 <_svfiprintf_r+0x50>
 8009404:	ebba 0b04 	subs.w	fp, sl, r4
 8009408:	d00b      	beq.n	8009422 <_svfiprintf_r+0x7a>
 800940a:	465b      	mov	r3, fp
 800940c:	4622      	mov	r2, r4
 800940e:	4629      	mov	r1, r5
 8009410:	4638      	mov	r0, r7
 8009412:	f7ff ff6f 	bl	80092f4 <__ssputs_r>
 8009416:	3001      	adds	r0, #1
 8009418:	f000 80a9 	beq.w	800956e <_svfiprintf_r+0x1c6>
 800941c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800941e:	445a      	add	r2, fp
 8009420:	9209      	str	r2, [sp, #36]	; 0x24
 8009422:	f89a 3000 	ldrb.w	r3, [sl]
 8009426:	2b00      	cmp	r3, #0
 8009428:	f000 80a1 	beq.w	800956e <_svfiprintf_r+0x1c6>
 800942c:	2300      	movs	r3, #0
 800942e:	f04f 32ff 	mov.w	r2, #4294967295
 8009432:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009436:	f10a 0a01 	add.w	sl, sl, #1
 800943a:	9304      	str	r3, [sp, #16]
 800943c:	9307      	str	r3, [sp, #28]
 800943e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009442:	931a      	str	r3, [sp, #104]	; 0x68
 8009444:	4654      	mov	r4, sl
 8009446:	2205      	movs	r2, #5
 8009448:	f814 1b01 	ldrb.w	r1, [r4], #1
 800944c:	4850      	ldr	r0, [pc, #320]	; (8009590 <_svfiprintf_r+0x1e8>)
 800944e:	f7fd fc9b 	bl	8006d88 <memchr>
 8009452:	9a04      	ldr	r2, [sp, #16]
 8009454:	b9d8      	cbnz	r0, 800948e <_svfiprintf_r+0xe6>
 8009456:	06d0      	lsls	r0, r2, #27
 8009458:	bf44      	itt	mi
 800945a:	2320      	movmi	r3, #32
 800945c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009460:	0711      	lsls	r1, r2, #28
 8009462:	bf44      	itt	mi
 8009464:	232b      	movmi	r3, #43	; 0x2b
 8009466:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800946a:	f89a 3000 	ldrb.w	r3, [sl]
 800946e:	2b2a      	cmp	r3, #42	; 0x2a
 8009470:	d015      	beq.n	800949e <_svfiprintf_r+0xf6>
 8009472:	4654      	mov	r4, sl
 8009474:	2000      	movs	r0, #0
 8009476:	f04f 0c0a 	mov.w	ip, #10
 800947a:	9a07      	ldr	r2, [sp, #28]
 800947c:	4621      	mov	r1, r4
 800947e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009482:	3b30      	subs	r3, #48	; 0x30
 8009484:	2b09      	cmp	r3, #9
 8009486:	d94d      	bls.n	8009524 <_svfiprintf_r+0x17c>
 8009488:	b1b0      	cbz	r0, 80094b8 <_svfiprintf_r+0x110>
 800948a:	9207      	str	r2, [sp, #28]
 800948c:	e014      	b.n	80094b8 <_svfiprintf_r+0x110>
 800948e:	eba0 0308 	sub.w	r3, r0, r8
 8009492:	fa09 f303 	lsl.w	r3, r9, r3
 8009496:	4313      	orrs	r3, r2
 8009498:	46a2      	mov	sl, r4
 800949a:	9304      	str	r3, [sp, #16]
 800949c:	e7d2      	b.n	8009444 <_svfiprintf_r+0x9c>
 800949e:	9b03      	ldr	r3, [sp, #12]
 80094a0:	1d19      	adds	r1, r3, #4
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	9103      	str	r1, [sp, #12]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	bfbb      	ittet	lt
 80094aa:	425b      	neglt	r3, r3
 80094ac:	f042 0202 	orrlt.w	r2, r2, #2
 80094b0:	9307      	strge	r3, [sp, #28]
 80094b2:	9307      	strlt	r3, [sp, #28]
 80094b4:	bfb8      	it	lt
 80094b6:	9204      	strlt	r2, [sp, #16]
 80094b8:	7823      	ldrb	r3, [r4, #0]
 80094ba:	2b2e      	cmp	r3, #46	; 0x2e
 80094bc:	d10c      	bne.n	80094d8 <_svfiprintf_r+0x130>
 80094be:	7863      	ldrb	r3, [r4, #1]
 80094c0:	2b2a      	cmp	r3, #42	; 0x2a
 80094c2:	d134      	bne.n	800952e <_svfiprintf_r+0x186>
 80094c4:	9b03      	ldr	r3, [sp, #12]
 80094c6:	3402      	adds	r4, #2
 80094c8:	1d1a      	adds	r2, r3, #4
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	9203      	str	r2, [sp, #12]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	bfb8      	it	lt
 80094d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80094d6:	9305      	str	r3, [sp, #20]
 80094d8:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8009594 <_svfiprintf_r+0x1ec>
 80094dc:	2203      	movs	r2, #3
 80094de:	4650      	mov	r0, sl
 80094e0:	7821      	ldrb	r1, [r4, #0]
 80094e2:	f7fd fc51 	bl	8006d88 <memchr>
 80094e6:	b138      	cbz	r0, 80094f8 <_svfiprintf_r+0x150>
 80094e8:	2240      	movs	r2, #64	; 0x40
 80094ea:	9b04      	ldr	r3, [sp, #16]
 80094ec:	eba0 000a 	sub.w	r0, r0, sl
 80094f0:	4082      	lsls	r2, r0
 80094f2:	4313      	orrs	r3, r2
 80094f4:	3401      	adds	r4, #1
 80094f6:	9304      	str	r3, [sp, #16]
 80094f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094fc:	2206      	movs	r2, #6
 80094fe:	4826      	ldr	r0, [pc, #152]	; (8009598 <_svfiprintf_r+0x1f0>)
 8009500:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009504:	f7fd fc40 	bl	8006d88 <memchr>
 8009508:	2800      	cmp	r0, #0
 800950a:	d038      	beq.n	800957e <_svfiprintf_r+0x1d6>
 800950c:	4b23      	ldr	r3, [pc, #140]	; (800959c <_svfiprintf_r+0x1f4>)
 800950e:	bb1b      	cbnz	r3, 8009558 <_svfiprintf_r+0x1b0>
 8009510:	9b03      	ldr	r3, [sp, #12]
 8009512:	3307      	adds	r3, #7
 8009514:	f023 0307 	bic.w	r3, r3, #7
 8009518:	3308      	adds	r3, #8
 800951a:	9303      	str	r3, [sp, #12]
 800951c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800951e:	4433      	add	r3, r6
 8009520:	9309      	str	r3, [sp, #36]	; 0x24
 8009522:	e768      	b.n	80093f6 <_svfiprintf_r+0x4e>
 8009524:	460c      	mov	r4, r1
 8009526:	2001      	movs	r0, #1
 8009528:	fb0c 3202 	mla	r2, ip, r2, r3
 800952c:	e7a6      	b.n	800947c <_svfiprintf_r+0xd4>
 800952e:	2300      	movs	r3, #0
 8009530:	f04f 0c0a 	mov.w	ip, #10
 8009534:	4619      	mov	r1, r3
 8009536:	3401      	adds	r4, #1
 8009538:	9305      	str	r3, [sp, #20]
 800953a:	4620      	mov	r0, r4
 800953c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009540:	3a30      	subs	r2, #48	; 0x30
 8009542:	2a09      	cmp	r2, #9
 8009544:	d903      	bls.n	800954e <_svfiprintf_r+0x1a6>
 8009546:	2b00      	cmp	r3, #0
 8009548:	d0c6      	beq.n	80094d8 <_svfiprintf_r+0x130>
 800954a:	9105      	str	r1, [sp, #20]
 800954c:	e7c4      	b.n	80094d8 <_svfiprintf_r+0x130>
 800954e:	4604      	mov	r4, r0
 8009550:	2301      	movs	r3, #1
 8009552:	fb0c 2101 	mla	r1, ip, r1, r2
 8009556:	e7f0      	b.n	800953a <_svfiprintf_r+0x192>
 8009558:	ab03      	add	r3, sp, #12
 800955a:	9300      	str	r3, [sp, #0]
 800955c:	462a      	mov	r2, r5
 800955e:	4638      	mov	r0, r7
 8009560:	4b0f      	ldr	r3, [pc, #60]	; (80095a0 <_svfiprintf_r+0x1f8>)
 8009562:	a904      	add	r1, sp, #16
 8009564:	f7fc fcae 	bl	8005ec4 <_printf_float>
 8009568:	1c42      	adds	r2, r0, #1
 800956a:	4606      	mov	r6, r0
 800956c:	d1d6      	bne.n	800951c <_svfiprintf_r+0x174>
 800956e:	89ab      	ldrh	r3, [r5, #12]
 8009570:	065b      	lsls	r3, r3, #25
 8009572:	f53f af2d 	bmi.w	80093d0 <_svfiprintf_r+0x28>
 8009576:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009578:	b01d      	add	sp, #116	; 0x74
 800957a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800957e:	ab03      	add	r3, sp, #12
 8009580:	9300      	str	r3, [sp, #0]
 8009582:	462a      	mov	r2, r5
 8009584:	4638      	mov	r0, r7
 8009586:	4b06      	ldr	r3, [pc, #24]	; (80095a0 <_svfiprintf_r+0x1f8>)
 8009588:	a904      	add	r1, sp, #16
 800958a:	f7fc ff3b 	bl	8006404 <_printf_i>
 800958e:	e7eb      	b.n	8009568 <_svfiprintf_r+0x1c0>
 8009590:	0800a9d1 	.word	0x0800a9d1
 8009594:	0800a9d7 	.word	0x0800a9d7
 8009598:	0800a9db 	.word	0x0800a9db
 800959c:	08005ec5 	.word	0x08005ec5
 80095a0:	080092f5 	.word	0x080092f5

080095a4 <__sflush_r>:
 80095a4:	898a      	ldrh	r2, [r1, #12]
 80095a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095a8:	4605      	mov	r5, r0
 80095aa:	0710      	lsls	r0, r2, #28
 80095ac:	460c      	mov	r4, r1
 80095ae:	d457      	bmi.n	8009660 <__sflush_r+0xbc>
 80095b0:	684b      	ldr	r3, [r1, #4]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	dc04      	bgt.n	80095c0 <__sflush_r+0x1c>
 80095b6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	dc01      	bgt.n	80095c0 <__sflush_r+0x1c>
 80095bc:	2000      	movs	r0, #0
 80095be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80095c2:	2e00      	cmp	r6, #0
 80095c4:	d0fa      	beq.n	80095bc <__sflush_r+0x18>
 80095c6:	2300      	movs	r3, #0
 80095c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80095cc:	682f      	ldr	r7, [r5, #0]
 80095ce:	6a21      	ldr	r1, [r4, #32]
 80095d0:	602b      	str	r3, [r5, #0]
 80095d2:	d032      	beq.n	800963a <__sflush_r+0x96>
 80095d4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80095d6:	89a3      	ldrh	r3, [r4, #12]
 80095d8:	075a      	lsls	r2, r3, #29
 80095da:	d505      	bpl.n	80095e8 <__sflush_r+0x44>
 80095dc:	6863      	ldr	r3, [r4, #4]
 80095de:	1ac0      	subs	r0, r0, r3
 80095e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80095e2:	b10b      	cbz	r3, 80095e8 <__sflush_r+0x44>
 80095e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80095e6:	1ac0      	subs	r0, r0, r3
 80095e8:	2300      	movs	r3, #0
 80095ea:	4602      	mov	r2, r0
 80095ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80095ee:	4628      	mov	r0, r5
 80095f0:	6a21      	ldr	r1, [r4, #32]
 80095f2:	47b0      	blx	r6
 80095f4:	1c43      	adds	r3, r0, #1
 80095f6:	89a3      	ldrh	r3, [r4, #12]
 80095f8:	d106      	bne.n	8009608 <__sflush_r+0x64>
 80095fa:	6829      	ldr	r1, [r5, #0]
 80095fc:	291d      	cmp	r1, #29
 80095fe:	d82b      	bhi.n	8009658 <__sflush_r+0xb4>
 8009600:	4a28      	ldr	r2, [pc, #160]	; (80096a4 <__sflush_r+0x100>)
 8009602:	410a      	asrs	r2, r1
 8009604:	07d6      	lsls	r6, r2, #31
 8009606:	d427      	bmi.n	8009658 <__sflush_r+0xb4>
 8009608:	2200      	movs	r2, #0
 800960a:	6062      	str	r2, [r4, #4]
 800960c:	6922      	ldr	r2, [r4, #16]
 800960e:	04d9      	lsls	r1, r3, #19
 8009610:	6022      	str	r2, [r4, #0]
 8009612:	d504      	bpl.n	800961e <__sflush_r+0x7a>
 8009614:	1c42      	adds	r2, r0, #1
 8009616:	d101      	bne.n	800961c <__sflush_r+0x78>
 8009618:	682b      	ldr	r3, [r5, #0]
 800961a:	b903      	cbnz	r3, 800961e <__sflush_r+0x7a>
 800961c:	6560      	str	r0, [r4, #84]	; 0x54
 800961e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009620:	602f      	str	r7, [r5, #0]
 8009622:	2900      	cmp	r1, #0
 8009624:	d0ca      	beq.n	80095bc <__sflush_r+0x18>
 8009626:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800962a:	4299      	cmp	r1, r3
 800962c:	d002      	beq.n	8009634 <__sflush_r+0x90>
 800962e:	4628      	mov	r0, r5
 8009630:	f7fe fa2a 	bl	8007a88 <_free_r>
 8009634:	2000      	movs	r0, #0
 8009636:	6360      	str	r0, [r4, #52]	; 0x34
 8009638:	e7c1      	b.n	80095be <__sflush_r+0x1a>
 800963a:	2301      	movs	r3, #1
 800963c:	4628      	mov	r0, r5
 800963e:	47b0      	blx	r6
 8009640:	1c41      	adds	r1, r0, #1
 8009642:	d1c8      	bne.n	80095d6 <__sflush_r+0x32>
 8009644:	682b      	ldr	r3, [r5, #0]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d0c5      	beq.n	80095d6 <__sflush_r+0x32>
 800964a:	2b1d      	cmp	r3, #29
 800964c:	d001      	beq.n	8009652 <__sflush_r+0xae>
 800964e:	2b16      	cmp	r3, #22
 8009650:	d101      	bne.n	8009656 <__sflush_r+0xb2>
 8009652:	602f      	str	r7, [r5, #0]
 8009654:	e7b2      	b.n	80095bc <__sflush_r+0x18>
 8009656:	89a3      	ldrh	r3, [r4, #12]
 8009658:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800965c:	81a3      	strh	r3, [r4, #12]
 800965e:	e7ae      	b.n	80095be <__sflush_r+0x1a>
 8009660:	690f      	ldr	r7, [r1, #16]
 8009662:	2f00      	cmp	r7, #0
 8009664:	d0aa      	beq.n	80095bc <__sflush_r+0x18>
 8009666:	0793      	lsls	r3, r2, #30
 8009668:	bf18      	it	ne
 800966a:	2300      	movne	r3, #0
 800966c:	680e      	ldr	r6, [r1, #0]
 800966e:	bf08      	it	eq
 8009670:	694b      	ldreq	r3, [r1, #20]
 8009672:	1bf6      	subs	r6, r6, r7
 8009674:	600f      	str	r7, [r1, #0]
 8009676:	608b      	str	r3, [r1, #8]
 8009678:	2e00      	cmp	r6, #0
 800967a:	dd9f      	ble.n	80095bc <__sflush_r+0x18>
 800967c:	4633      	mov	r3, r6
 800967e:	463a      	mov	r2, r7
 8009680:	4628      	mov	r0, r5
 8009682:	6a21      	ldr	r1, [r4, #32]
 8009684:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009688:	47e0      	blx	ip
 800968a:	2800      	cmp	r0, #0
 800968c:	dc06      	bgt.n	800969c <__sflush_r+0xf8>
 800968e:	89a3      	ldrh	r3, [r4, #12]
 8009690:	f04f 30ff 	mov.w	r0, #4294967295
 8009694:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009698:	81a3      	strh	r3, [r4, #12]
 800969a:	e790      	b.n	80095be <__sflush_r+0x1a>
 800969c:	4407      	add	r7, r0
 800969e:	1a36      	subs	r6, r6, r0
 80096a0:	e7ea      	b.n	8009678 <__sflush_r+0xd4>
 80096a2:	bf00      	nop
 80096a4:	dfbffffe 	.word	0xdfbffffe

080096a8 <_fflush_r>:
 80096a8:	b538      	push	{r3, r4, r5, lr}
 80096aa:	690b      	ldr	r3, [r1, #16]
 80096ac:	4605      	mov	r5, r0
 80096ae:	460c      	mov	r4, r1
 80096b0:	b913      	cbnz	r3, 80096b8 <_fflush_r+0x10>
 80096b2:	2500      	movs	r5, #0
 80096b4:	4628      	mov	r0, r5
 80096b6:	bd38      	pop	{r3, r4, r5, pc}
 80096b8:	b118      	cbz	r0, 80096c2 <_fflush_r+0x1a>
 80096ba:	6a03      	ldr	r3, [r0, #32]
 80096bc:	b90b      	cbnz	r3, 80096c2 <_fflush_r+0x1a>
 80096be:	f7fd fa4b 	bl	8006b58 <__sinit>
 80096c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d0f3      	beq.n	80096b2 <_fflush_r+0xa>
 80096ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80096cc:	07d0      	lsls	r0, r2, #31
 80096ce:	d404      	bmi.n	80096da <_fflush_r+0x32>
 80096d0:	0599      	lsls	r1, r3, #22
 80096d2:	d402      	bmi.n	80096da <_fflush_r+0x32>
 80096d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096d6:	f7fd fb55 	bl	8006d84 <__retarget_lock_acquire_recursive>
 80096da:	4628      	mov	r0, r5
 80096dc:	4621      	mov	r1, r4
 80096de:	f7ff ff61 	bl	80095a4 <__sflush_r>
 80096e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80096e4:	4605      	mov	r5, r0
 80096e6:	07da      	lsls	r2, r3, #31
 80096e8:	d4e4      	bmi.n	80096b4 <_fflush_r+0xc>
 80096ea:	89a3      	ldrh	r3, [r4, #12]
 80096ec:	059b      	lsls	r3, r3, #22
 80096ee:	d4e1      	bmi.n	80096b4 <_fflush_r+0xc>
 80096f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096f2:	f7fd fb48 	bl	8006d86 <__retarget_lock_release_recursive>
 80096f6:	e7dd      	b.n	80096b4 <_fflush_r+0xc>

080096f8 <memmove>:
 80096f8:	4288      	cmp	r0, r1
 80096fa:	b510      	push	{r4, lr}
 80096fc:	eb01 0402 	add.w	r4, r1, r2
 8009700:	d902      	bls.n	8009708 <memmove+0x10>
 8009702:	4284      	cmp	r4, r0
 8009704:	4623      	mov	r3, r4
 8009706:	d807      	bhi.n	8009718 <memmove+0x20>
 8009708:	1e43      	subs	r3, r0, #1
 800970a:	42a1      	cmp	r1, r4
 800970c:	d008      	beq.n	8009720 <memmove+0x28>
 800970e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009712:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009716:	e7f8      	b.n	800970a <memmove+0x12>
 8009718:	4601      	mov	r1, r0
 800971a:	4402      	add	r2, r0
 800971c:	428a      	cmp	r2, r1
 800971e:	d100      	bne.n	8009722 <memmove+0x2a>
 8009720:	bd10      	pop	{r4, pc}
 8009722:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009726:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800972a:	e7f7      	b.n	800971c <memmove+0x24>

0800972c <strncmp>:
 800972c:	b510      	push	{r4, lr}
 800972e:	b16a      	cbz	r2, 800974c <strncmp+0x20>
 8009730:	3901      	subs	r1, #1
 8009732:	1884      	adds	r4, r0, r2
 8009734:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009738:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800973c:	429a      	cmp	r2, r3
 800973e:	d103      	bne.n	8009748 <strncmp+0x1c>
 8009740:	42a0      	cmp	r0, r4
 8009742:	d001      	beq.n	8009748 <strncmp+0x1c>
 8009744:	2a00      	cmp	r2, #0
 8009746:	d1f5      	bne.n	8009734 <strncmp+0x8>
 8009748:	1ad0      	subs	r0, r2, r3
 800974a:	bd10      	pop	{r4, pc}
 800974c:	4610      	mov	r0, r2
 800974e:	e7fc      	b.n	800974a <strncmp+0x1e>

08009750 <_sbrk_r>:
 8009750:	b538      	push	{r3, r4, r5, lr}
 8009752:	2300      	movs	r3, #0
 8009754:	4d05      	ldr	r5, [pc, #20]	; (800976c <_sbrk_r+0x1c>)
 8009756:	4604      	mov	r4, r0
 8009758:	4608      	mov	r0, r1
 800975a:	602b      	str	r3, [r5, #0]
 800975c:	f7f9 f9be 	bl	8002adc <_sbrk>
 8009760:	1c43      	adds	r3, r0, #1
 8009762:	d102      	bne.n	800976a <_sbrk_r+0x1a>
 8009764:	682b      	ldr	r3, [r5, #0]
 8009766:	b103      	cbz	r3, 800976a <_sbrk_r+0x1a>
 8009768:	6023      	str	r3, [r4, #0]
 800976a:	bd38      	pop	{r3, r4, r5, pc}
 800976c:	200004d4 	.word	0x200004d4

08009770 <memcpy>:
 8009770:	440a      	add	r2, r1
 8009772:	4291      	cmp	r1, r2
 8009774:	f100 33ff 	add.w	r3, r0, #4294967295
 8009778:	d100      	bne.n	800977c <memcpy+0xc>
 800977a:	4770      	bx	lr
 800977c:	b510      	push	{r4, lr}
 800977e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009782:	4291      	cmp	r1, r2
 8009784:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009788:	d1f9      	bne.n	800977e <memcpy+0xe>
 800978a:	bd10      	pop	{r4, pc}

0800978c <nan>:
 800978c:	2000      	movs	r0, #0
 800978e:	4901      	ldr	r1, [pc, #4]	; (8009794 <nan+0x8>)
 8009790:	4770      	bx	lr
 8009792:	bf00      	nop
 8009794:	7ff80000 	.word	0x7ff80000

08009798 <__assert_func>:
 8009798:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800979a:	4614      	mov	r4, r2
 800979c:	461a      	mov	r2, r3
 800979e:	4b09      	ldr	r3, [pc, #36]	; (80097c4 <__assert_func+0x2c>)
 80097a0:	4605      	mov	r5, r0
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	68d8      	ldr	r0, [r3, #12]
 80097a6:	b14c      	cbz	r4, 80097bc <__assert_func+0x24>
 80097a8:	4b07      	ldr	r3, [pc, #28]	; (80097c8 <__assert_func+0x30>)
 80097aa:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80097ae:	9100      	str	r1, [sp, #0]
 80097b0:	462b      	mov	r3, r5
 80097b2:	4906      	ldr	r1, [pc, #24]	; (80097cc <__assert_func+0x34>)
 80097b4:	f000 fbca 	bl	8009f4c <fiprintf>
 80097b8:	f000 fbda 	bl	8009f70 <abort>
 80097bc:	4b04      	ldr	r3, [pc, #16]	; (80097d0 <__assert_func+0x38>)
 80097be:	461c      	mov	r4, r3
 80097c0:	e7f3      	b.n	80097aa <__assert_func+0x12>
 80097c2:	bf00      	nop
 80097c4:	2000007c 	.word	0x2000007c
 80097c8:	0800a9ea 	.word	0x0800a9ea
 80097cc:	0800a9f7 	.word	0x0800a9f7
 80097d0:	0800aa25 	.word	0x0800aa25

080097d4 <_calloc_r>:
 80097d4:	b570      	push	{r4, r5, r6, lr}
 80097d6:	fba1 5402 	umull	r5, r4, r1, r2
 80097da:	b934      	cbnz	r4, 80097ea <_calloc_r+0x16>
 80097dc:	4629      	mov	r1, r5
 80097de:	f7fe f9c3 	bl	8007b68 <_malloc_r>
 80097e2:	4606      	mov	r6, r0
 80097e4:	b928      	cbnz	r0, 80097f2 <_calloc_r+0x1e>
 80097e6:	4630      	mov	r0, r6
 80097e8:	bd70      	pop	{r4, r5, r6, pc}
 80097ea:	220c      	movs	r2, #12
 80097ec:	2600      	movs	r6, #0
 80097ee:	6002      	str	r2, [r0, #0]
 80097f0:	e7f9      	b.n	80097e6 <_calloc_r+0x12>
 80097f2:	462a      	mov	r2, r5
 80097f4:	4621      	mov	r1, r4
 80097f6:	f7fd fa48 	bl	8006c8a <memset>
 80097fa:	e7f4      	b.n	80097e6 <_calloc_r+0x12>

080097fc <rshift>:
 80097fc:	6903      	ldr	r3, [r0, #16]
 80097fe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009802:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009806:	f100 0414 	add.w	r4, r0, #20
 800980a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800980e:	dd46      	ble.n	800989e <rshift+0xa2>
 8009810:	f011 011f 	ands.w	r1, r1, #31
 8009814:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009818:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800981c:	d10c      	bne.n	8009838 <rshift+0x3c>
 800981e:	4629      	mov	r1, r5
 8009820:	f100 0710 	add.w	r7, r0, #16
 8009824:	42b1      	cmp	r1, r6
 8009826:	d335      	bcc.n	8009894 <rshift+0x98>
 8009828:	1a9b      	subs	r3, r3, r2
 800982a:	009b      	lsls	r3, r3, #2
 800982c:	1eea      	subs	r2, r5, #3
 800982e:	4296      	cmp	r6, r2
 8009830:	bf38      	it	cc
 8009832:	2300      	movcc	r3, #0
 8009834:	4423      	add	r3, r4
 8009836:	e015      	b.n	8009864 <rshift+0x68>
 8009838:	46a1      	mov	r9, r4
 800983a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800983e:	f1c1 0820 	rsb	r8, r1, #32
 8009842:	40cf      	lsrs	r7, r1
 8009844:	f105 0e04 	add.w	lr, r5, #4
 8009848:	4576      	cmp	r6, lr
 800984a:	46f4      	mov	ip, lr
 800984c:	d816      	bhi.n	800987c <rshift+0x80>
 800984e:	1a9a      	subs	r2, r3, r2
 8009850:	0092      	lsls	r2, r2, #2
 8009852:	3a04      	subs	r2, #4
 8009854:	3501      	adds	r5, #1
 8009856:	42ae      	cmp	r6, r5
 8009858:	bf38      	it	cc
 800985a:	2200      	movcc	r2, #0
 800985c:	18a3      	adds	r3, r4, r2
 800985e:	50a7      	str	r7, [r4, r2]
 8009860:	b107      	cbz	r7, 8009864 <rshift+0x68>
 8009862:	3304      	adds	r3, #4
 8009864:	42a3      	cmp	r3, r4
 8009866:	eba3 0204 	sub.w	r2, r3, r4
 800986a:	bf08      	it	eq
 800986c:	2300      	moveq	r3, #0
 800986e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009872:	6102      	str	r2, [r0, #16]
 8009874:	bf08      	it	eq
 8009876:	6143      	streq	r3, [r0, #20]
 8009878:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800987c:	f8dc c000 	ldr.w	ip, [ip]
 8009880:	fa0c fc08 	lsl.w	ip, ip, r8
 8009884:	ea4c 0707 	orr.w	r7, ip, r7
 8009888:	f849 7b04 	str.w	r7, [r9], #4
 800988c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009890:	40cf      	lsrs	r7, r1
 8009892:	e7d9      	b.n	8009848 <rshift+0x4c>
 8009894:	f851 cb04 	ldr.w	ip, [r1], #4
 8009898:	f847 cf04 	str.w	ip, [r7, #4]!
 800989c:	e7c2      	b.n	8009824 <rshift+0x28>
 800989e:	4623      	mov	r3, r4
 80098a0:	e7e0      	b.n	8009864 <rshift+0x68>

080098a2 <__hexdig_fun>:
 80098a2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80098a6:	2b09      	cmp	r3, #9
 80098a8:	d802      	bhi.n	80098b0 <__hexdig_fun+0xe>
 80098aa:	3820      	subs	r0, #32
 80098ac:	b2c0      	uxtb	r0, r0
 80098ae:	4770      	bx	lr
 80098b0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80098b4:	2b05      	cmp	r3, #5
 80098b6:	d801      	bhi.n	80098bc <__hexdig_fun+0x1a>
 80098b8:	3847      	subs	r0, #71	; 0x47
 80098ba:	e7f7      	b.n	80098ac <__hexdig_fun+0xa>
 80098bc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80098c0:	2b05      	cmp	r3, #5
 80098c2:	d801      	bhi.n	80098c8 <__hexdig_fun+0x26>
 80098c4:	3827      	subs	r0, #39	; 0x27
 80098c6:	e7f1      	b.n	80098ac <__hexdig_fun+0xa>
 80098c8:	2000      	movs	r0, #0
 80098ca:	4770      	bx	lr

080098cc <__gethex>:
 80098cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098d0:	4681      	mov	r9, r0
 80098d2:	468a      	mov	sl, r1
 80098d4:	4617      	mov	r7, r2
 80098d6:	680a      	ldr	r2, [r1, #0]
 80098d8:	b085      	sub	sp, #20
 80098da:	f102 0b02 	add.w	fp, r2, #2
 80098de:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80098e2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80098e6:	9302      	str	r3, [sp, #8]
 80098e8:	32fe      	adds	r2, #254	; 0xfe
 80098ea:	eb02 030b 	add.w	r3, r2, fp
 80098ee:	46d8      	mov	r8, fp
 80098f0:	f81b 0b01 	ldrb.w	r0, [fp], #1
 80098f4:	9301      	str	r3, [sp, #4]
 80098f6:	2830      	cmp	r0, #48	; 0x30
 80098f8:	d0f7      	beq.n	80098ea <__gethex+0x1e>
 80098fa:	f7ff ffd2 	bl	80098a2 <__hexdig_fun>
 80098fe:	4604      	mov	r4, r0
 8009900:	2800      	cmp	r0, #0
 8009902:	d138      	bne.n	8009976 <__gethex+0xaa>
 8009904:	2201      	movs	r2, #1
 8009906:	4640      	mov	r0, r8
 8009908:	49a7      	ldr	r1, [pc, #668]	; (8009ba8 <__gethex+0x2dc>)
 800990a:	f7ff ff0f 	bl	800972c <strncmp>
 800990e:	4606      	mov	r6, r0
 8009910:	2800      	cmp	r0, #0
 8009912:	d169      	bne.n	80099e8 <__gethex+0x11c>
 8009914:	f898 0001 	ldrb.w	r0, [r8, #1]
 8009918:	465d      	mov	r5, fp
 800991a:	f7ff ffc2 	bl	80098a2 <__hexdig_fun>
 800991e:	2800      	cmp	r0, #0
 8009920:	d064      	beq.n	80099ec <__gethex+0x120>
 8009922:	465a      	mov	r2, fp
 8009924:	7810      	ldrb	r0, [r2, #0]
 8009926:	4690      	mov	r8, r2
 8009928:	2830      	cmp	r0, #48	; 0x30
 800992a:	f102 0201 	add.w	r2, r2, #1
 800992e:	d0f9      	beq.n	8009924 <__gethex+0x58>
 8009930:	f7ff ffb7 	bl	80098a2 <__hexdig_fun>
 8009934:	2301      	movs	r3, #1
 8009936:	fab0 f480 	clz	r4, r0
 800993a:	465e      	mov	r6, fp
 800993c:	0964      	lsrs	r4, r4, #5
 800993e:	9301      	str	r3, [sp, #4]
 8009940:	4642      	mov	r2, r8
 8009942:	4615      	mov	r5, r2
 8009944:	7828      	ldrb	r0, [r5, #0]
 8009946:	3201      	adds	r2, #1
 8009948:	f7ff ffab 	bl	80098a2 <__hexdig_fun>
 800994c:	2800      	cmp	r0, #0
 800994e:	d1f8      	bne.n	8009942 <__gethex+0x76>
 8009950:	2201      	movs	r2, #1
 8009952:	4628      	mov	r0, r5
 8009954:	4994      	ldr	r1, [pc, #592]	; (8009ba8 <__gethex+0x2dc>)
 8009956:	f7ff fee9 	bl	800972c <strncmp>
 800995a:	b978      	cbnz	r0, 800997c <__gethex+0xb0>
 800995c:	b946      	cbnz	r6, 8009970 <__gethex+0xa4>
 800995e:	1c6e      	adds	r6, r5, #1
 8009960:	4632      	mov	r2, r6
 8009962:	4615      	mov	r5, r2
 8009964:	7828      	ldrb	r0, [r5, #0]
 8009966:	3201      	adds	r2, #1
 8009968:	f7ff ff9b 	bl	80098a2 <__hexdig_fun>
 800996c:	2800      	cmp	r0, #0
 800996e:	d1f8      	bne.n	8009962 <__gethex+0x96>
 8009970:	1b73      	subs	r3, r6, r5
 8009972:	009e      	lsls	r6, r3, #2
 8009974:	e004      	b.n	8009980 <__gethex+0xb4>
 8009976:	2400      	movs	r4, #0
 8009978:	4626      	mov	r6, r4
 800997a:	e7e1      	b.n	8009940 <__gethex+0x74>
 800997c:	2e00      	cmp	r6, #0
 800997e:	d1f7      	bne.n	8009970 <__gethex+0xa4>
 8009980:	782b      	ldrb	r3, [r5, #0]
 8009982:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009986:	2b50      	cmp	r3, #80	; 0x50
 8009988:	d13d      	bne.n	8009a06 <__gethex+0x13a>
 800998a:	786b      	ldrb	r3, [r5, #1]
 800998c:	2b2b      	cmp	r3, #43	; 0x2b
 800998e:	d02f      	beq.n	80099f0 <__gethex+0x124>
 8009990:	2b2d      	cmp	r3, #45	; 0x2d
 8009992:	d031      	beq.n	80099f8 <__gethex+0x12c>
 8009994:	f04f 0b00 	mov.w	fp, #0
 8009998:	1c69      	adds	r1, r5, #1
 800999a:	7808      	ldrb	r0, [r1, #0]
 800999c:	f7ff ff81 	bl	80098a2 <__hexdig_fun>
 80099a0:	1e42      	subs	r2, r0, #1
 80099a2:	b2d2      	uxtb	r2, r2
 80099a4:	2a18      	cmp	r2, #24
 80099a6:	d82e      	bhi.n	8009a06 <__gethex+0x13a>
 80099a8:	f1a0 0210 	sub.w	r2, r0, #16
 80099ac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80099b0:	f7ff ff77 	bl	80098a2 <__hexdig_fun>
 80099b4:	f100 3cff 	add.w	ip, r0, #4294967295
 80099b8:	fa5f fc8c 	uxtb.w	ip, ip
 80099bc:	f1bc 0f18 	cmp.w	ip, #24
 80099c0:	d91d      	bls.n	80099fe <__gethex+0x132>
 80099c2:	f1bb 0f00 	cmp.w	fp, #0
 80099c6:	d000      	beq.n	80099ca <__gethex+0xfe>
 80099c8:	4252      	negs	r2, r2
 80099ca:	4416      	add	r6, r2
 80099cc:	f8ca 1000 	str.w	r1, [sl]
 80099d0:	b1dc      	cbz	r4, 8009a0a <__gethex+0x13e>
 80099d2:	9b01      	ldr	r3, [sp, #4]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	bf14      	ite	ne
 80099d8:	f04f 0800 	movne.w	r8, #0
 80099dc:	f04f 0806 	moveq.w	r8, #6
 80099e0:	4640      	mov	r0, r8
 80099e2:	b005      	add	sp, #20
 80099e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099e8:	4645      	mov	r5, r8
 80099ea:	4626      	mov	r6, r4
 80099ec:	2401      	movs	r4, #1
 80099ee:	e7c7      	b.n	8009980 <__gethex+0xb4>
 80099f0:	f04f 0b00 	mov.w	fp, #0
 80099f4:	1ca9      	adds	r1, r5, #2
 80099f6:	e7d0      	b.n	800999a <__gethex+0xce>
 80099f8:	f04f 0b01 	mov.w	fp, #1
 80099fc:	e7fa      	b.n	80099f4 <__gethex+0x128>
 80099fe:	230a      	movs	r3, #10
 8009a00:	fb03 0002 	mla	r0, r3, r2, r0
 8009a04:	e7d0      	b.n	80099a8 <__gethex+0xdc>
 8009a06:	4629      	mov	r1, r5
 8009a08:	e7e0      	b.n	80099cc <__gethex+0x100>
 8009a0a:	4621      	mov	r1, r4
 8009a0c:	eba5 0308 	sub.w	r3, r5, r8
 8009a10:	3b01      	subs	r3, #1
 8009a12:	2b07      	cmp	r3, #7
 8009a14:	dc0a      	bgt.n	8009a2c <__gethex+0x160>
 8009a16:	4648      	mov	r0, r9
 8009a18:	f7fe f932 	bl	8007c80 <_Balloc>
 8009a1c:	4604      	mov	r4, r0
 8009a1e:	b940      	cbnz	r0, 8009a32 <__gethex+0x166>
 8009a20:	4602      	mov	r2, r0
 8009a22:	21e4      	movs	r1, #228	; 0xe4
 8009a24:	4b61      	ldr	r3, [pc, #388]	; (8009bac <__gethex+0x2e0>)
 8009a26:	4862      	ldr	r0, [pc, #392]	; (8009bb0 <__gethex+0x2e4>)
 8009a28:	f7ff feb6 	bl	8009798 <__assert_func>
 8009a2c:	3101      	adds	r1, #1
 8009a2e:	105b      	asrs	r3, r3, #1
 8009a30:	e7ef      	b.n	8009a12 <__gethex+0x146>
 8009a32:	2300      	movs	r3, #0
 8009a34:	469b      	mov	fp, r3
 8009a36:	f100 0a14 	add.w	sl, r0, #20
 8009a3a:	f8cd a004 	str.w	sl, [sp, #4]
 8009a3e:	45a8      	cmp	r8, r5
 8009a40:	d344      	bcc.n	8009acc <__gethex+0x200>
 8009a42:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009a46:	4658      	mov	r0, fp
 8009a48:	f848 bb04 	str.w	fp, [r8], #4
 8009a4c:	eba8 080a 	sub.w	r8, r8, sl
 8009a50:	ea4f 02a8 	mov.w	r2, r8, asr #2
 8009a54:	6122      	str	r2, [r4, #16]
 8009a56:	ea4f 1842 	mov.w	r8, r2, lsl #5
 8009a5a:	f7fe fa03 	bl	8007e64 <__hi0bits>
 8009a5e:	683d      	ldr	r5, [r7, #0]
 8009a60:	eba8 0800 	sub.w	r8, r8, r0
 8009a64:	45a8      	cmp	r8, r5
 8009a66:	dd59      	ble.n	8009b1c <__gethex+0x250>
 8009a68:	eba8 0805 	sub.w	r8, r8, r5
 8009a6c:	4641      	mov	r1, r8
 8009a6e:	4620      	mov	r0, r4
 8009a70:	f7fe fd81 	bl	8008576 <__any_on>
 8009a74:	4683      	mov	fp, r0
 8009a76:	b1b8      	cbz	r0, 8009aa8 <__gethex+0x1dc>
 8009a78:	f04f 0b01 	mov.w	fp, #1
 8009a7c:	f108 33ff 	add.w	r3, r8, #4294967295
 8009a80:	1159      	asrs	r1, r3, #5
 8009a82:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009a86:	f003 021f 	and.w	r2, r3, #31
 8009a8a:	fa0b f202 	lsl.w	r2, fp, r2
 8009a8e:	420a      	tst	r2, r1
 8009a90:	d00a      	beq.n	8009aa8 <__gethex+0x1dc>
 8009a92:	455b      	cmp	r3, fp
 8009a94:	dd06      	ble.n	8009aa4 <__gethex+0x1d8>
 8009a96:	4620      	mov	r0, r4
 8009a98:	f1a8 0102 	sub.w	r1, r8, #2
 8009a9c:	f7fe fd6b 	bl	8008576 <__any_on>
 8009aa0:	2800      	cmp	r0, #0
 8009aa2:	d138      	bne.n	8009b16 <__gethex+0x24a>
 8009aa4:	f04f 0b02 	mov.w	fp, #2
 8009aa8:	4641      	mov	r1, r8
 8009aaa:	4620      	mov	r0, r4
 8009aac:	f7ff fea6 	bl	80097fc <rshift>
 8009ab0:	4446      	add	r6, r8
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	42b3      	cmp	r3, r6
 8009ab6:	da41      	bge.n	8009b3c <__gethex+0x270>
 8009ab8:	4621      	mov	r1, r4
 8009aba:	4648      	mov	r0, r9
 8009abc:	f7fe f920 	bl	8007d00 <_Bfree>
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009ac4:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8009ac8:	6013      	str	r3, [r2, #0]
 8009aca:	e789      	b.n	80099e0 <__gethex+0x114>
 8009acc:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8009ad0:	2a2e      	cmp	r2, #46	; 0x2e
 8009ad2:	d014      	beq.n	8009afe <__gethex+0x232>
 8009ad4:	2b20      	cmp	r3, #32
 8009ad6:	d106      	bne.n	8009ae6 <__gethex+0x21a>
 8009ad8:	9b01      	ldr	r3, [sp, #4]
 8009ada:	f843 bb04 	str.w	fp, [r3], #4
 8009ade:	f04f 0b00 	mov.w	fp, #0
 8009ae2:	9301      	str	r3, [sp, #4]
 8009ae4:	465b      	mov	r3, fp
 8009ae6:	7828      	ldrb	r0, [r5, #0]
 8009ae8:	9303      	str	r3, [sp, #12]
 8009aea:	f7ff feda 	bl	80098a2 <__hexdig_fun>
 8009aee:	9b03      	ldr	r3, [sp, #12]
 8009af0:	f000 000f 	and.w	r0, r0, #15
 8009af4:	4098      	lsls	r0, r3
 8009af6:	ea4b 0b00 	orr.w	fp, fp, r0
 8009afa:	3304      	adds	r3, #4
 8009afc:	e79f      	b.n	8009a3e <__gethex+0x172>
 8009afe:	45a8      	cmp	r8, r5
 8009b00:	d8e8      	bhi.n	8009ad4 <__gethex+0x208>
 8009b02:	2201      	movs	r2, #1
 8009b04:	4628      	mov	r0, r5
 8009b06:	4928      	ldr	r1, [pc, #160]	; (8009ba8 <__gethex+0x2dc>)
 8009b08:	9303      	str	r3, [sp, #12]
 8009b0a:	f7ff fe0f 	bl	800972c <strncmp>
 8009b0e:	9b03      	ldr	r3, [sp, #12]
 8009b10:	2800      	cmp	r0, #0
 8009b12:	d1df      	bne.n	8009ad4 <__gethex+0x208>
 8009b14:	e793      	b.n	8009a3e <__gethex+0x172>
 8009b16:	f04f 0b03 	mov.w	fp, #3
 8009b1a:	e7c5      	b.n	8009aa8 <__gethex+0x1dc>
 8009b1c:	da0b      	bge.n	8009b36 <__gethex+0x26a>
 8009b1e:	eba5 0808 	sub.w	r8, r5, r8
 8009b22:	4621      	mov	r1, r4
 8009b24:	4642      	mov	r2, r8
 8009b26:	4648      	mov	r0, r9
 8009b28:	f7fe fb02 	bl	8008130 <__lshift>
 8009b2c:	4604      	mov	r4, r0
 8009b2e:	eba6 0608 	sub.w	r6, r6, r8
 8009b32:	f100 0a14 	add.w	sl, r0, #20
 8009b36:	f04f 0b00 	mov.w	fp, #0
 8009b3a:	e7ba      	b.n	8009ab2 <__gethex+0x1e6>
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	42b3      	cmp	r3, r6
 8009b40:	dd74      	ble.n	8009c2c <__gethex+0x360>
 8009b42:	1b9e      	subs	r6, r3, r6
 8009b44:	42b5      	cmp	r5, r6
 8009b46:	dc35      	bgt.n	8009bb4 <__gethex+0x2e8>
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	2b02      	cmp	r3, #2
 8009b4c:	d023      	beq.n	8009b96 <__gethex+0x2ca>
 8009b4e:	2b03      	cmp	r3, #3
 8009b50:	d025      	beq.n	8009b9e <__gethex+0x2d2>
 8009b52:	2b01      	cmp	r3, #1
 8009b54:	d115      	bne.n	8009b82 <__gethex+0x2b6>
 8009b56:	42b5      	cmp	r5, r6
 8009b58:	d113      	bne.n	8009b82 <__gethex+0x2b6>
 8009b5a:	2d01      	cmp	r5, #1
 8009b5c:	d10b      	bne.n	8009b76 <__gethex+0x2aa>
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	9a02      	ldr	r2, [sp, #8]
 8009b62:	f04f 0862 	mov.w	r8, #98	; 0x62
 8009b66:	6013      	str	r3, [r2, #0]
 8009b68:	2301      	movs	r3, #1
 8009b6a:	6123      	str	r3, [r4, #16]
 8009b6c:	f8ca 3000 	str.w	r3, [sl]
 8009b70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b72:	601c      	str	r4, [r3, #0]
 8009b74:	e734      	b.n	80099e0 <__gethex+0x114>
 8009b76:	4620      	mov	r0, r4
 8009b78:	1e69      	subs	r1, r5, #1
 8009b7a:	f7fe fcfc 	bl	8008576 <__any_on>
 8009b7e:	2800      	cmp	r0, #0
 8009b80:	d1ed      	bne.n	8009b5e <__gethex+0x292>
 8009b82:	4621      	mov	r1, r4
 8009b84:	4648      	mov	r0, r9
 8009b86:	f7fe f8bb 	bl	8007d00 <_Bfree>
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009b8e:	f04f 0850 	mov.w	r8, #80	; 0x50
 8009b92:	6013      	str	r3, [r2, #0]
 8009b94:	e724      	b.n	80099e0 <__gethex+0x114>
 8009b96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d1f2      	bne.n	8009b82 <__gethex+0x2b6>
 8009b9c:	e7df      	b.n	8009b5e <__gethex+0x292>
 8009b9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d1dc      	bne.n	8009b5e <__gethex+0x292>
 8009ba4:	e7ed      	b.n	8009b82 <__gethex+0x2b6>
 8009ba6:	bf00      	nop
 8009ba8:	0800a87c 	.word	0x0800a87c
 8009bac:	0800a713 	.word	0x0800a713
 8009bb0:	0800aa26 	.word	0x0800aa26
 8009bb4:	f106 38ff 	add.w	r8, r6, #4294967295
 8009bb8:	f1bb 0f00 	cmp.w	fp, #0
 8009bbc:	d133      	bne.n	8009c26 <__gethex+0x35a>
 8009bbe:	f1b8 0f00 	cmp.w	r8, #0
 8009bc2:	d004      	beq.n	8009bce <__gethex+0x302>
 8009bc4:	4641      	mov	r1, r8
 8009bc6:	4620      	mov	r0, r4
 8009bc8:	f7fe fcd5 	bl	8008576 <__any_on>
 8009bcc:	4683      	mov	fp, r0
 8009bce:	2301      	movs	r3, #1
 8009bd0:	ea4f 1268 	mov.w	r2, r8, asr #5
 8009bd4:	f008 081f 	and.w	r8, r8, #31
 8009bd8:	fa03 f308 	lsl.w	r3, r3, r8
 8009bdc:	f04f 0802 	mov.w	r8, #2
 8009be0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009be4:	4631      	mov	r1, r6
 8009be6:	4213      	tst	r3, r2
 8009be8:	4620      	mov	r0, r4
 8009bea:	bf18      	it	ne
 8009bec:	f04b 0b02 	orrne.w	fp, fp, #2
 8009bf0:	1bad      	subs	r5, r5, r6
 8009bf2:	f7ff fe03 	bl	80097fc <rshift>
 8009bf6:	687e      	ldr	r6, [r7, #4]
 8009bf8:	f1bb 0f00 	cmp.w	fp, #0
 8009bfc:	d04a      	beq.n	8009c94 <__gethex+0x3c8>
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	2b02      	cmp	r3, #2
 8009c02:	d016      	beq.n	8009c32 <__gethex+0x366>
 8009c04:	2b03      	cmp	r3, #3
 8009c06:	d018      	beq.n	8009c3a <__gethex+0x36e>
 8009c08:	2b01      	cmp	r3, #1
 8009c0a:	d109      	bne.n	8009c20 <__gethex+0x354>
 8009c0c:	f01b 0f02 	tst.w	fp, #2
 8009c10:	d006      	beq.n	8009c20 <__gethex+0x354>
 8009c12:	f8da 3000 	ldr.w	r3, [sl]
 8009c16:	ea4b 0b03 	orr.w	fp, fp, r3
 8009c1a:	f01b 0f01 	tst.w	fp, #1
 8009c1e:	d10f      	bne.n	8009c40 <__gethex+0x374>
 8009c20:	f048 0810 	orr.w	r8, r8, #16
 8009c24:	e036      	b.n	8009c94 <__gethex+0x3c8>
 8009c26:	f04f 0b01 	mov.w	fp, #1
 8009c2a:	e7d0      	b.n	8009bce <__gethex+0x302>
 8009c2c:	f04f 0801 	mov.w	r8, #1
 8009c30:	e7e2      	b.n	8009bf8 <__gethex+0x32c>
 8009c32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c34:	f1c3 0301 	rsb	r3, r3, #1
 8009c38:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d0ef      	beq.n	8009c20 <__gethex+0x354>
 8009c40:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009c44:	f104 0214 	add.w	r2, r4, #20
 8009c48:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8009c4c:	9301      	str	r3, [sp, #4]
 8009c4e:	2300      	movs	r3, #0
 8009c50:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8009c54:	4694      	mov	ip, r2
 8009c56:	f852 1b04 	ldr.w	r1, [r2], #4
 8009c5a:	f1b1 3fff 	cmp.w	r1, #4294967295
 8009c5e:	d01e      	beq.n	8009c9e <__gethex+0x3d2>
 8009c60:	3101      	adds	r1, #1
 8009c62:	f8cc 1000 	str.w	r1, [ip]
 8009c66:	f1b8 0f02 	cmp.w	r8, #2
 8009c6a:	f104 0214 	add.w	r2, r4, #20
 8009c6e:	d13d      	bne.n	8009cec <__gethex+0x420>
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	3b01      	subs	r3, #1
 8009c74:	42ab      	cmp	r3, r5
 8009c76:	d10b      	bne.n	8009c90 <__gethex+0x3c4>
 8009c78:	2301      	movs	r3, #1
 8009c7a:	1169      	asrs	r1, r5, #5
 8009c7c:	f005 051f 	and.w	r5, r5, #31
 8009c80:	fa03 f505 	lsl.w	r5, r3, r5
 8009c84:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009c88:	421d      	tst	r5, r3
 8009c8a:	bf18      	it	ne
 8009c8c:	f04f 0801 	movne.w	r8, #1
 8009c90:	f048 0820 	orr.w	r8, r8, #32
 8009c94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c96:	601c      	str	r4, [r3, #0]
 8009c98:	9b02      	ldr	r3, [sp, #8]
 8009c9a:	601e      	str	r6, [r3, #0]
 8009c9c:	e6a0      	b.n	80099e0 <__gethex+0x114>
 8009c9e:	4290      	cmp	r0, r2
 8009ca0:	f842 3c04 	str.w	r3, [r2, #-4]
 8009ca4:	d8d6      	bhi.n	8009c54 <__gethex+0x388>
 8009ca6:	68a2      	ldr	r2, [r4, #8]
 8009ca8:	4593      	cmp	fp, r2
 8009caa:	db17      	blt.n	8009cdc <__gethex+0x410>
 8009cac:	6861      	ldr	r1, [r4, #4]
 8009cae:	4648      	mov	r0, r9
 8009cb0:	3101      	adds	r1, #1
 8009cb2:	f7fd ffe5 	bl	8007c80 <_Balloc>
 8009cb6:	4682      	mov	sl, r0
 8009cb8:	b918      	cbnz	r0, 8009cc2 <__gethex+0x3f6>
 8009cba:	4602      	mov	r2, r0
 8009cbc:	2184      	movs	r1, #132	; 0x84
 8009cbe:	4b1a      	ldr	r3, [pc, #104]	; (8009d28 <__gethex+0x45c>)
 8009cc0:	e6b1      	b.n	8009a26 <__gethex+0x15a>
 8009cc2:	6922      	ldr	r2, [r4, #16]
 8009cc4:	f104 010c 	add.w	r1, r4, #12
 8009cc8:	3202      	adds	r2, #2
 8009cca:	0092      	lsls	r2, r2, #2
 8009ccc:	300c      	adds	r0, #12
 8009cce:	f7ff fd4f 	bl	8009770 <memcpy>
 8009cd2:	4621      	mov	r1, r4
 8009cd4:	4648      	mov	r0, r9
 8009cd6:	f7fe f813 	bl	8007d00 <_Bfree>
 8009cda:	4654      	mov	r4, sl
 8009cdc:	6922      	ldr	r2, [r4, #16]
 8009cde:	1c51      	adds	r1, r2, #1
 8009ce0:	6121      	str	r1, [r4, #16]
 8009ce2:	2101      	movs	r1, #1
 8009ce4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009ce8:	6151      	str	r1, [r2, #20]
 8009cea:	e7bc      	b.n	8009c66 <__gethex+0x39a>
 8009cec:	6921      	ldr	r1, [r4, #16]
 8009cee:	4559      	cmp	r1, fp
 8009cf0:	dd0b      	ble.n	8009d0a <__gethex+0x43e>
 8009cf2:	2101      	movs	r1, #1
 8009cf4:	4620      	mov	r0, r4
 8009cf6:	f7ff fd81 	bl	80097fc <rshift>
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	3601      	adds	r6, #1
 8009cfe:	42b3      	cmp	r3, r6
 8009d00:	f6ff aeda 	blt.w	8009ab8 <__gethex+0x1ec>
 8009d04:	f04f 0801 	mov.w	r8, #1
 8009d08:	e7c2      	b.n	8009c90 <__gethex+0x3c4>
 8009d0a:	f015 051f 	ands.w	r5, r5, #31
 8009d0e:	d0f9      	beq.n	8009d04 <__gethex+0x438>
 8009d10:	9b01      	ldr	r3, [sp, #4]
 8009d12:	f1c5 0520 	rsb	r5, r5, #32
 8009d16:	441a      	add	r2, r3
 8009d18:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8009d1c:	f7fe f8a2 	bl	8007e64 <__hi0bits>
 8009d20:	42a8      	cmp	r0, r5
 8009d22:	dbe6      	blt.n	8009cf2 <__gethex+0x426>
 8009d24:	e7ee      	b.n	8009d04 <__gethex+0x438>
 8009d26:	bf00      	nop
 8009d28:	0800a713 	.word	0x0800a713

08009d2c <L_shift>:
 8009d2c:	f1c2 0208 	rsb	r2, r2, #8
 8009d30:	0092      	lsls	r2, r2, #2
 8009d32:	b570      	push	{r4, r5, r6, lr}
 8009d34:	f1c2 0620 	rsb	r6, r2, #32
 8009d38:	6843      	ldr	r3, [r0, #4]
 8009d3a:	6804      	ldr	r4, [r0, #0]
 8009d3c:	fa03 f506 	lsl.w	r5, r3, r6
 8009d40:	432c      	orrs	r4, r5
 8009d42:	40d3      	lsrs	r3, r2
 8009d44:	6004      	str	r4, [r0, #0]
 8009d46:	f840 3f04 	str.w	r3, [r0, #4]!
 8009d4a:	4288      	cmp	r0, r1
 8009d4c:	d3f4      	bcc.n	8009d38 <L_shift+0xc>
 8009d4e:	bd70      	pop	{r4, r5, r6, pc}

08009d50 <__match>:
 8009d50:	b530      	push	{r4, r5, lr}
 8009d52:	6803      	ldr	r3, [r0, #0]
 8009d54:	3301      	adds	r3, #1
 8009d56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d5a:	b914      	cbnz	r4, 8009d62 <__match+0x12>
 8009d5c:	6003      	str	r3, [r0, #0]
 8009d5e:	2001      	movs	r0, #1
 8009d60:	bd30      	pop	{r4, r5, pc}
 8009d62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d66:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009d6a:	2d19      	cmp	r5, #25
 8009d6c:	bf98      	it	ls
 8009d6e:	3220      	addls	r2, #32
 8009d70:	42a2      	cmp	r2, r4
 8009d72:	d0f0      	beq.n	8009d56 <__match+0x6>
 8009d74:	2000      	movs	r0, #0
 8009d76:	e7f3      	b.n	8009d60 <__match+0x10>

08009d78 <__hexnan>:
 8009d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d7c:	2500      	movs	r5, #0
 8009d7e:	680b      	ldr	r3, [r1, #0]
 8009d80:	4682      	mov	sl, r0
 8009d82:	115e      	asrs	r6, r3, #5
 8009d84:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009d88:	f013 031f 	ands.w	r3, r3, #31
 8009d8c:	bf18      	it	ne
 8009d8e:	3604      	addne	r6, #4
 8009d90:	1f37      	subs	r7, r6, #4
 8009d92:	4690      	mov	r8, r2
 8009d94:	46b9      	mov	r9, r7
 8009d96:	463c      	mov	r4, r7
 8009d98:	46ab      	mov	fp, r5
 8009d9a:	b087      	sub	sp, #28
 8009d9c:	6801      	ldr	r1, [r0, #0]
 8009d9e:	9301      	str	r3, [sp, #4]
 8009da0:	f846 5c04 	str.w	r5, [r6, #-4]
 8009da4:	9502      	str	r5, [sp, #8]
 8009da6:	784a      	ldrb	r2, [r1, #1]
 8009da8:	1c4b      	adds	r3, r1, #1
 8009daa:	9303      	str	r3, [sp, #12]
 8009dac:	b342      	cbz	r2, 8009e00 <__hexnan+0x88>
 8009dae:	4610      	mov	r0, r2
 8009db0:	9105      	str	r1, [sp, #20]
 8009db2:	9204      	str	r2, [sp, #16]
 8009db4:	f7ff fd75 	bl	80098a2 <__hexdig_fun>
 8009db8:	2800      	cmp	r0, #0
 8009dba:	d14f      	bne.n	8009e5c <__hexnan+0xe4>
 8009dbc:	9a04      	ldr	r2, [sp, #16]
 8009dbe:	9905      	ldr	r1, [sp, #20]
 8009dc0:	2a20      	cmp	r2, #32
 8009dc2:	d818      	bhi.n	8009df6 <__hexnan+0x7e>
 8009dc4:	9b02      	ldr	r3, [sp, #8]
 8009dc6:	459b      	cmp	fp, r3
 8009dc8:	dd13      	ble.n	8009df2 <__hexnan+0x7a>
 8009dca:	454c      	cmp	r4, r9
 8009dcc:	d206      	bcs.n	8009ddc <__hexnan+0x64>
 8009dce:	2d07      	cmp	r5, #7
 8009dd0:	dc04      	bgt.n	8009ddc <__hexnan+0x64>
 8009dd2:	462a      	mov	r2, r5
 8009dd4:	4649      	mov	r1, r9
 8009dd6:	4620      	mov	r0, r4
 8009dd8:	f7ff ffa8 	bl	8009d2c <L_shift>
 8009ddc:	4544      	cmp	r4, r8
 8009dde:	d950      	bls.n	8009e82 <__hexnan+0x10a>
 8009de0:	2300      	movs	r3, #0
 8009de2:	f1a4 0904 	sub.w	r9, r4, #4
 8009de6:	f844 3c04 	str.w	r3, [r4, #-4]
 8009dea:	461d      	mov	r5, r3
 8009dec:	464c      	mov	r4, r9
 8009dee:	f8cd b008 	str.w	fp, [sp, #8]
 8009df2:	9903      	ldr	r1, [sp, #12]
 8009df4:	e7d7      	b.n	8009da6 <__hexnan+0x2e>
 8009df6:	2a29      	cmp	r2, #41	; 0x29
 8009df8:	d155      	bne.n	8009ea6 <__hexnan+0x12e>
 8009dfa:	3102      	adds	r1, #2
 8009dfc:	f8ca 1000 	str.w	r1, [sl]
 8009e00:	f1bb 0f00 	cmp.w	fp, #0
 8009e04:	d04f      	beq.n	8009ea6 <__hexnan+0x12e>
 8009e06:	454c      	cmp	r4, r9
 8009e08:	d206      	bcs.n	8009e18 <__hexnan+0xa0>
 8009e0a:	2d07      	cmp	r5, #7
 8009e0c:	dc04      	bgt.n	8009e18 <__hexnan+0xa0>
 8009e0e:	462a      	mov	r2, r5
 8009e10:	4649      	mov	r1, r9
 8009e12:	4620      	mov	r0, r4
 8009e14:	f7ff ff8a 	bl	8009d2c <L_shift>
 8009e18:	4544      	cmp	r4, r8
 8009e1a:	d934      	bls.n	8009e86 <__hexnan+0x10e>
 8009e1c:	4623      	mov	r3, r4
 8009e1e:	f1a8 0204 	sub.w	r2, r8, #4
 8009e22:	f853 1b04 	ldr.w	r1, [r3], #4
 8009e26:	429f      	cmp	r7, r3
 8009e28:	f842 1f04 	str.w	r1, [r2, #4]!
 8009e2c:	d2f9      	bcs.n	8009e22 <__hexnan+0xaa>
 8009e2e:	1b3b      	subs	r3, r7, r4
 8009e30:	f023 0303 	bic.w	r3, r3, #3
 8009e34:	3304      	adds	r3, #4
 8009e36:	3e03      	subs	r6, #3
 8009e38:	3401      	adds	r4, #1
 8009e3a:	42a6      	cmp	r6, r4
 8009e3c:	bf38      	it	cc
 8009e3e:	2304      	movcc	r3, #4
 8009e40:	2200      	movs	r2, #0
 8009e42:	4443      	add	r3, r8
 8009e44:	f843 2b04 	str.w	r2, [r3], #4
 8009e48:	429f      	cmp	r7, r3
 8009e4a:	d2fb      	bcs.n	8009e44 <__hexnan+0xcc>
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	b91b      	cbnz	r3, 8009e58 <__hexnan+0xe0>
 8009e50:	4547      	cmp	r7, r8
 8009e52:	d126      	bne.n	8009ea2 <__hexnan+0x12a>
 8009e54:	2301      	movs	r3, #1
 8009e56:	603b      	str	r3, [r7, #0]
 8009e58:	2005      	movs	r0, #5
 8009e5a:	e025      	b.n	8009ea8 <__hexnan+0x130>
 8009e5c:	3501      	adds	r5, #1
 8009e5e:	2d08      	cmp	r5, #8
 8009e60:	f10b 0b01 	add.w	fp, fp, #1
 8009e64:	dd06      	ble.n	8009e74 <__hexnan+0xfc>
 8009e66:	4544      	cmp	r4, r8
 8009e68:	d9c3      	bls.n	8009df2 <__hexnan+0x7a>
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	2501      	movs	r5, #1
 8009e6e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009e72:	3c04      	subs	r4, #4
 8009e74:	6822      	ldr	r2, [r4, #0]
 8009e76:	f000 000f 	and.w	r0, r0, #15
 8009e7a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009e7e:	6020      	str	r0, [r4, #0]
 8009e80:	e7b7      	b.n	8009df2 <__hexnan+0x7a>
 8009e82:	2508      	movs	r5, #8
 8009e84:	e7b5      	b.n	8009df2 <__hexnan+0x7a>
 8009e86:	9b01      	ldr	r3, [sp, #4]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d0df      	beq.n	8009e4c <__hexnan+0xd4>
 8009e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8009e90:	f1c3 0320 	rsb	r3, r3, #32
 8009e94:	40da      	lsrs	r2, r3
 8009e96:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009e9a:	4013      	ands	r3, r2
 8009e9c:	f846 3c04 	str.w	r3, [r6, #-4]
 8009ea0:	e7d4      	b.n	8009e4c <__hexnan+0xd4>
 8009ea2:	3f04      	subs	r7, #4
 8009ea4:	e7d2      	b.n	8009e4c <__hexnan+0xd4>
 8009ea6:	2004      	movs	r0, #4
 8009ea8:	b007      	add	sp, #28
 8009eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009eae <__ascii_mbtowc>:
 8009eae:	b082      	sub	sp, #8
 8009eb0:	b901      	cbnz	r1, 8009eb4 <__ascii_mbtowc+0x6>
 8009eb2:	a901      	add	r1, sp, #4
 8009eb4:	b142      	cbz	r2, 8009ec8 <__ascii_mbtowc+0x1a>
 8009eb6:	b14b      	cbz	r3, 8009ecc <__ascii_mbtowc+0x1e>
 8009eb8:	7813      	ldrb	r3, [r2, #0]
 8009eba:	600b      	str	r3, [r1, #0]
 8009ebc:	7812      	ldrb	r2, [r2, #0]
 8009ebe:	1e10      	subs	r0, r2, #0
 8009ec0:	bf18      	it	ne
 8009ec2:	2001      	movne	r0, #1
 8009ec4:	b002      	add	sp, #8
 8009ec6:	4770      	bx	lr
 8009ec8:	4610      	mov	r0, r2
 8009eca:	e7fb      	b.n	8009ec4 <__ascii_mbtowc+0x16>
 8009ecc:	f06f 0001 	mvn.w	r0, #1
 8009ed0:	e7f8      	b.n	8009ec4 <__ascii_mbtowc+0x16>

08009ed2 <_realloc_r>:
 8009ed2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ed6:	4680      	mov	r8, r0
 8009ed8:	4614      	mov	r4, r2
 8009eda:	460e      	mov	r6, r1
 8009edc:	b921      	cbnz	r1, 8009ee8 <_realloc_r+0x16>
 8009ede:	4611      	mov	r1, r2
 8009ee0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ee4:	f7fd be40 	b.w	8007b68 <_malloc_r>
 8009ee8:	b92a      	cbnz	r2, 8009ef6 <_realloc_r+0x24>
 8009eea:	f7fd fdcd 	bl	8007a88 <_free_r>
 8009eee:	4625      	mov	r5, r4
 8009ef0:	4628      	mov	r0, r5
 8009ef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ef6:	f000 f842 	bl	8009f7e <_malloc_usable_size_r>
 8009efa:	4284      	cmp	r4, r0
 8009efc:	4607      	mov	r7, r0
 8009efe:	d802      	bhi.n	8009f06 <_realloc_r+0x34>
 8009f00:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009f04:	d812      	bhi.n	8009f2c <_realloc_r+0x5a>
 8009f06:	4621      	mov	r1, r4
 8009f08:	4640      	mov	r0, r8
 8009f0a:	f7fd fe2d 	bl	8007b68 <_malloc_r>
 8009f0e:	4605      	mov	r5, r0
 8009f10:	2800      	cmp	r0, #0
 8009f12:	d0ed      	beq.n	8009ef0 <_realloc_r+0x1e>
 8009f14:	42bc      	cmp	r4, r7
 8009f16:	4622      	mov	r2, r4
 8009f18:	4631      	mov	r1, r6
 8009f1a:	bf28      	it	cs
 8009f1c:	463a      	movcs	r2, r7
 8009f1e:	f7ff fc27 	bl	8009770 <memcpy>
 8009f22:	4631      	mov	r1, r6
 8009f24:	4640      	mov	r0, r8
 8009f26:	f7fd fdaf 	bl	8007a88 <_free_r>
 8009f2a:	e7e1      	b.n	8009ef0 <_realloc_r+0x1e>
 8009f2c:	4635      	mov	r5, r6
 8009f2e:	e7df      	b.n	8009ef0 <_realloc_r+0x1e>

08009f30 <__ascii_wctomb>:
 8009f30:	4603      	mov	r3, r0
 8009f32:	4608      	mov	r0, r1
 8009f34:	b141      	cbz	r1, 8009f48 <__ascii_wctomb+0x18>
 8009f36:	2aff      	cmp	r2, #255	; 0xff
 8009f38:	d904      	bls.n	8009f44 <__ascii_wctomb+0x14>
 8009f3a:	228a      	movs	r2, #138	; 0x8a
 8009f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f40:	601a      	str	r2, [r3, #0]
 8009f42:	4770      	bx	lr
 8009f44:	2001      	movs	r0, #1
 8009f46:	700a      	strb	r2, [r1, #0]
 8009f48:	4770      	bx	lr
	...

08009f4c <fiprintf>:
 8009f4c:	b40e      	push	{r1, r2, r3}
 8009f4e:	b503      	push	{r0, r1, lr}
 8009f50:	4601      	mov	r1, r0
 8009f52:	ab03      	add	r3, sp, #12
 8009f54:	4805      	ldr	r0, [pc, #20]	; (8009f6c <fiprintf+0x20>)
 8009f56:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f5a:	6800      	ldr	r0, [r0, #0]
 8009f5c:	9301      	str	r3, [sp, #4]
 8009f5e:	f000 f83d 	bl	8009fdc <_vfiprintf_r>
 8009f62:	b002      	add	sp, #8
 8009f64:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f68:	b003      	add	sp, #12
 8009f6a:	4770      	bx	lr
 8009f6c:	2000007c 	.word	0x2000007c

08009f70 <abort>:
 8009f70:	2006      	movs	r0, #6
 8009f72:	b508      	push	{r3, lr}
 8009f74:	f000 fa0a 	bl	800a38c <raise>
 8009f78:	2001      	movs	r0, #1
 8009f7a:	f7f8 fd3c 	bl	80029f6 <_exit>

08009f7e <_malloc_usable_size_r>:
 8009f7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f82:	1f18      	subs	r0, r3, #4
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	bfbc      	itt	lt
 8009f88:	580b      	ldrlt	r3, [r1, r0]
 8009f8a:	18c0      	addlt	r0, r0, r3
 8009f8c:	4770      	bx	lr

08009f8e <__sfputc_r>:
 8009f8e:	6893      	ldr	r3, [r2, #8]
 8009f90:	b410      	push	{r4}
 8009f92:	3b01      	subs	r3, #1
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	6093      	str	r3, [r2, #8]
 8009f98:	da07      	bge.n	8009faa <__sfputc_r+0x1c>
 8009f9a:	6994      	ldr	r4, [r2, #24]
 8009f9c:	42a3      	cmp	r3, r4
 8009f9e:	db01      	blt.n	8009fa4 <__sfputc_r+0x16>
 8009fa0:	290a      	cmp	r1, #10
 8009fa2:	d102      	bne.n	8009faa <__sfputc_r+0x1c>
 8009fa4:	bc10      	pop	{r4}
 8009fa6:	f000 b933 	b.w	800a210 <__swbuf_r>
 8009faa:	6813      	ldr	r3, [r2, #0]
 8009fac:	1c58      	adds	r0, r3, #1
 8009fae:	6010      	str	r0, [r2, #0]
 8009fb0:	7019      	strb	r1, [r3, #0]
 8009fb2:	4608      	mov	r0, r1
 8009fb4:	bc10      	pop	{r4}
 8009fb6:	4770      	bx	lr

08009fb8 <__sfputs_r>:
 8009fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fba:	4606      	mov	r6, r0
 8009fbc:	460f      	mov	r7, r1
 8009fbe:	4614      	mov	r4, r2
 8009fc0:	18d5      	adds	r5, r2, r3
 8009fc2:	42ac      	cmp	r4, r5
 8009fc4:	d101      	bne.n	8009fca <__sfputs_r+0x12>
 8009fc6:	2000      	movs	r0, #0
 8009fc8:	e007      	b.n	8009fda <__sfputs_r+0x22>
 8009fca:	463a      	mov	r2, r7
 8009fcc:	4630      	mov	r0, r6
 8009fce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fd2:	f7ff ffdc 	bl	8009f8e <__sfputc_r>
 8009fd6:	1c43      	adds	r3, r0, #1
 8009fd8:	d1f3      	bne.n	8009fc2 <__sfputs_r+0xa>
 8009fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009fdc <_vfiprintf_r>:
 8009fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fe0:	460d      	mov	r5, r1
 8009fe2:	4614      	mov	r4, r2
 8009fe4:	4698      	mov	r8, r3
 8009fe6:	4606      	mov	r6, r0
 8009fe8:	b09d      	sub	sp, #116	; 0x74
 8009fea:	b118      	cbz	r0, 8009ff4 <_vfiprintf_r+0x18>
 8009fec:	6a03      	ldr	r3, [r0, #32]
 8009fee:	b90b      	cbnz	r3, 8009ff4 <_vfiprintf_r+0x18>
 8009ff0:	f7fc fdb2 	bl	8006b58 <__sinit>
 8009ff4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ff6:	07d9      	lsls	r1, r3, #31
 8009ff8:	d405      	bmi.n	800a006 <_vfiprintf_r+0x2a>
 8009ffa:	89ab      	ldrh	r3, [r5, #12]
 8009ffc:	059a      	lsls	r2, r3, #22
 8009ffe:	d402      	bmi.n	800a006 <_vfiprintf_r+0x2a>
 800a000:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a002:	f7fc febf 	bl	8006d84 <__retarget_lock_acquire_recursive>
 800a006:	89ab      	ldrh	r3, [r5, #12]
 800a008:	071b      	lsls	r3, r3, #28
 800a00a:	d501      	bpl.n	800a010 <_vfiprintf_r+0x34>
 800a00c:	692b      	ldr	r3, [r5, #16]
 800a00e:	b99b      	cbnz	r3, 800a038 <_vfiprintf_r+0x5c>
 800a010:	4629      	mov	r1, r5
 800a012:	4630      	mov	r0, r6
 800a014:	f000 f93a 	bl	800a28c <__swsetup_r>
 800a018:	b170      	cbz	r0, 800a038 <_vfiprintf_r+0x5c>
 800a01a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a01c:	07dc      	lsls	r4, r3, #31
 800a01e:	d504      	bpl.n	800a02a <_vfiprintf_r+0x4e>
 800a020:	f04f 30ff 	mov.w	r0, #4294967295
 800a024:	b01d      	add	sp, #116	; 0x74
 800a026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a02a:	89ab      	ldrh	r3, [r5, #12]
 800a02c:	0598      	lsls	r0, r3, #22
 800a02e:	d4f7      	bmi.n	800a020 <_vfiprintf_r+0x44>
 800a030:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a032:	f7fc fea8 	bl	8006d86 <__retarget_lock_release_recursive>
 800a036:	e7f3      	b.n	800a020 <_vfiprintf_r+0x44>
 800a038:	2300      	movs	r3, #0
 800a03a:	9309      	str	r3, [sp, #36]	; 0x24
 800a03c:	2320      	movs	r3, #32
 800a03e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a042:	2330      	movs	r3, #48	; 0x30
 800a044:	f04f 0901 	mov.w	r9, #1
 800a048:	f8cd 800c 	str.w	r8, [sp, #12]
 800a04c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800a1fc <_vfiprintf_r+0x220>
 800a050:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a054:	4623      	mov	r3, r4
 800a056:	469a      	mov	sl, r3
 800a058:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a05c:	b10a      	cbz	r2, 800a062 <_vfiprintf_r+0x86>
 800a05e:	2a25      	cmp	r2, #37	; 0x25
 800a060:	d1f9      	bne.n	800a056 <_vfiprintf_r+0x7a>
 800a062:	ebba 0b04 	subs.w	fp, sl, r4
 800a066:	d00b      	beq.n	800a080 <_vfiprintf_r+0xa4>
 800a068:	465b      	mov	r3, fp
 800a06a:	4622      	mov	r2, r4
 800a06c:	4629      	mov	r1, r5
 800a06e:	4630      	mov	r0, r6
 800a070:	f7ff ffa2 	bl	8009fb8 <__sfputs_r>
 800a074:	3001      	adds	r0, #1
 800a076:	f000 80a9 	beq.w	800a1cc <_vfiprintf_r+0x1f0>
 800a07a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a07c:	445a      	add	r2, fp
 800a07e:	9209      	str	r2, [sp, #36]	; 0x24
 800a080:	f89a 3000 	ldrb.w	r3, [sl]
 800a084:	2b00      	cmp	r3, #0
 800a086:	f000 80a1 	beq.w	800a1cc <_vfiprintf_r+0x1f0>
 800a08a:	2300      	movs	r3, #0
 800a08c:	f04f 32ff 	mov.w	r2, #4294967295
 800a090:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a094:	f10a 0a01 	add.w	sl, sl, #1
 800a098:	9304      	str	r3, [sp, #16]
 800a09a:	9307      	str	r3, [sp, #28]
 800a09c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a0a0:	931a      	str	r3, [sp, #104]	; 0x68
 800a0a2:	4654      	mov	r4, sl
 800a0a4:	2205      	movs	r2, #5
 800a0a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0aa:	4854      	ldr	r0, [pc, #336]	; (800a1fc <_vfiprintf_r+0x220>)
 800a0ac:	f7fc fe6c 	bl	8006d88 <memchr>
 800a0b0:	9a04      	ldr	r2, [sp, #16]
 800a0b2:	b9d8      	cbnz	r0, 800a0ec <_vfiprintf_r+0x110>
 800a0b4:	06d1      	lsls	r1, r2, #27
 800a0b6:	bf44      	itt	mi
 800a0b8:	2320      	movmi	r3, #32
 800a0ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0be:	0713      	lsls	r3, r2, #28
 800a0c0:	bf44      	itt	mi
 800a0c2:	232b      	movmi	r3, #43	; 0x2b
 800a0c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0c8:	f89a 3000 	ldrb.w	r3, [sl]
 800a0cc:	2b2a      	cmp	r3, #42	; 0x2a
 800a0ce:	d015      	beq.n	800a0fc <_vfiprintf_r+0x120>
 800a0d0:	4654      	mov	r4, sl
 800a0d2:	2000      	movs	r0, #0
 800a0d4:	f04f 0c0a 	mov.w	ip, #10
 800a0d8:	9a07      	ldr	r2, [sp, #28]
 800a0da:	4621      	mov	r1, r4
 800a0dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0e0:	3b30      	subs	r3, #48	; 0x30
 800a0e2:	2b09      	cmp	r3, #9
 800a0e4:	d94d      	bls.n	800a182 <_vfiprintf_r+0x1a6>
 800a0e6:	b1b0      	cbz	r0, 800a116 <_vfiprintf_r+0x13a>
 800a0e8:	9207      	str	r2, [sp, #28]
 800a0ea:	e014      	b.n	800a116 <_vfiprintf_r+0x13a>
 800a0ec:	eba0 0308 	sub.w	r3, r0, r8
 800a0f0:	fa09 f303 	lsl.w	r3, r9, r3
 800a0f4:	4313      	orrs	r3, r2
 800a0f6:	46a2      	mov	sl, r4
 800a0f8:	9304      	str	r3, [sp, #16]
 800a0fa:	e7d2      	b.n	800a0a2 <_vfiprintf_r+0xc6>
 800a0fc:	9b03      	ldr	r3, [sp, #12]
 800a0fe:	1d19      	adds	r1, r3, #4
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	9103      	str	r1, [sp, #12]
 800a104:	2b00      	cmp	r3, #0
 800a106:	bfbb      	ittet	lt
 800a108:	425b      	neglt	r3, r3
 800a10a:	f042 0202 	orrlt.w	r2, r2, #2
 800a10e:	9307      	strge	r3, [sp, #28]
 800a110:	9307      	strlt	r3, [sp, #28]
 800a112:	bfb8      	it	lt
 800a114:	9204      	strlt	r2, [sp, #16]
 800a116:	7823      	ldrb	r3, [r4, #0]
 800a118:	2b2e      	cmp	r3, #46	; 0x2e
 800a11a:	d10c      	bne.n	800a136 <_vfiprintf_r+0x15a>
 800a11c:	7863      	ldrb	r3, [r4, #1]
 800a11e:	2b2a      	cmp	r3, #42	; 0x2a
 800a120:	d134      	bne.n	800a18c <_vfiprintf_r+0x1b0>
 800a122:	9b03      	ldr	r3, [sp, #12]
 800a124:	3402      	adds	r4, #2
 800a126:	1d1a      	adds	r2, r3, #4
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	9203      	str	r2, [sp, #12]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	bfb8      	it	lt
 800a130:	f04f 33ff 	movlt.w	r3, #4294967295
 800a134:	9305      	str	r3, [sp, #20]
 800a136:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a200 <_vfiprintf_r+0x224>
 800a13a:	2203      	movs	r2, #3
 800a13c:	4650      	mov	r0, sl
 800a13e:	7821      	ldrb	r1, [r4, #0]
 800a140:	f7fc fe22 	bl	8006d88 <memchr>
 800a144:	b138      	cbz	r0, 800a156 <_vfiprintf_r+0x17a>
 800a146:	2240      	movs	r2, #64	; 0x40
 800a148:	9b04      	ldr	r3, [sp, #16]
 800a14a:	eba0 000a 	sub.w	r0, r0, sl
 800a14e:	4082      	lsls	r2, r0
 800a150:	4313      	orrs	r3, r2
 800a152:	3401      	adds	r4, #1
 800a154:	9304      	str	r3, [sp, #16]
 800a156:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a15a:	2206      	movs	r2, #6
 800a15c:	4829      	ldr	r0, [pc, #164]	; (800a204 <_vfiprintf_r+0x228>)
 800a15e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a162:	f7fc fe11 	bl	8006d88 <memchr>
 800a166:	2800      	cmp	r0, #0
 800a168:	d03f      	beq.n	800a1ea <_vfiprintf_r+0x20e>
 800a16a:	4b27      	ldr	r3, [pc, #156]	; (800a208 <_vfiprintf_r+0x22c>)
 800a16c:	bb1b      	cbnz	r3, 800a1b6 <_vfiprintf_r+0x1da>
 800a16e:	9b03      	ldr	r3, [sp, #12]
 800a170:	3307      	adds	r3, #7
 800a172:	f023 0307 	bic.w	r3, r3, #7
 800a176:	3308      	adds	r3, #8
 800a178:	9303      	str	r3, [sp, #12]
 800a17a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a17c:	443b      	add	r3, r7
 800a17e:	9309      	str	r3, [sp, #36]	; 0x24
 800a180:	e768      	b.n	800a054 <_vfiprintf_r+0x78>
 800a182:	460c      	mov	r4, r1
 800a184:	2001      	movs	r0, #1
 800a186:	fb0c 3202 	mla	r2, ip, r2, r3
 800a18a:	e7a6      	b.n	800a0da <_vfiprintf_r+0xfe>
 800a18c:	2300      	movs	r3, #0
 800a18e:	f04f 0c0a 	mov.w	ip, #10
 800a192:	4619      	mov	r1, r3
 800a194:	3401      	adds	r4, #1
 800a196:	9305      	str	r3, [sp, #20]
 800a198:	4620      	mov	r0, r4
 800a19a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a19e:	3a30      	subs	r2, #48	; 0x30
 800a1a0:	2a09      	cmp	r2, #9
 800a1a2:	d903      	bls.n	800a1ac <_vfiprintf_r+0x1d0>
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d0c6      	beq.n	800a136 <_vfiprintf_r+0x15a>
 800a1a8:	9105      	str	r1, [sp, #20]
 800a1aa:	e7c4      	b.n	800a136 <_vfiprintf_r+0x15a>
 800a1ac:	4604      	mov	r4, r0
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	fb0c 2101 	mla	r1, ip, r1, r2
 800a1b4:	e7f0      	b.n	800a198 <_vfiprintf_r+0x1bc>
 800a1b6:	ab03      	add	r3, sp, #12
 800a1b8:	9300      	str	r3, [sp, #0]
 800a1ba:	462a      	mov	r2, r5
 800a1bc:	4630      	mov	r0, r6
 800a1be:	4b13      	ldr	r3, [pc, #76]	; (800a20c <_vfiprintf_r+0x230>)
 800a1c0:	a904      	add	r1, sp, #16
 800a1c2:	f7fb fe7f 	bl	8005ec4 <_printf_float>
 800a1c6:	4607      	mov	r7, r0
 800a1c8:	1c78      	adds	r0, r7, #1
 800a1ca:	d1d6      	bne.n	800a17a <_vfiprintf_r+0x19e>
 800a1cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a1ce:	07d9      	lsls	r1, r3, #31
 800a1d0:	d405      	bmi.n	800a1de <_vfiprintf_r+0x202>
 800a1d2:	89ab      	ldrh	r3, [r5, #12]
 800a1d4:	059a      	lsls	r2, r3, #22
 800a1d6:	d402      	bmi.n	800a1de <_vfiprintf_r+0x202>
 800a1d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a1da:	f7fc fdd4 	bl	8006d86 <__retarget_lock_release_recursive>
 800a1de:	89ab      	ldrh	r3, [r5, #12]
 800a1e0:	065b      	lsls	r3, r3, #25
 800a1e2:	f53f af1d 	bmi.w	800a020 <_vfiprintf_r+0x44>
 800a1e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a1e8:	e71c      	b.n	800a024 <_vfiprintf_r+0x48>
 800a1ea:	ab03      	add	r3, sp, #12
 800a1ec:	9300      	str	r3, [sp, #0]
 800a1ee:	462a      	mov	r2, r5
 800a1f0:	4630      	mov	r0, r6
 800a1f2:	4b06      	ldr	r3, [pc, #24]	; (800a20c <_vfiprintf_r+0x230>)
 800a1f4:	a904      	add	r1, sp, #16
 800a1f6:	f7fc f905 	bl	8006404 <_printf_i>
 800a1fa:	e7e4      	b.n	800a1c6 <_vfiprintf_r+0x1ea>
 800a1fc:	0800a9d1 	.word	0x0800a9d1
 800a200:	0800a9d7 	.word	0x0800a9d7
 800a204:	0800a9db 	.word	0x0800a9db
 800a208:	08005ec5 	.word	0x08005ec5
 800a20c:	08009fb9 	.word	0x08009fb9

0800a210 <__swbuf_r>:
 800a210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a212:	460e      	mov	r6, r1
 800a214:	4614      	mov	r4, r2
 800a216:	4605      	mov	r5, r0
 800a218:	b118      	cbz	r0, 800a222 <__swbuf_r+0x12>
 800a21a:	6a03      	ldr	r3, [r0, #32]
 800a21c:	b90b      	cbnz	r3, 800a222 <__swbuf_r+0x12>
 800a21e:	f7fc fc9b 	bl	8006b58 <__sinit>
 800a222:	69a3      	ldr	r3, [r4, #24]
 800a224:	60a3      	str	r3, [r4, #8]
 800a226:	89a3      	ldrh	r3, [r4, #12]
 800a228:	071a      	lsls	r2, r3, #28
 800a22a:	d525      	bpl.n	800a278 <__swbuf_r+0x68>
 800a22c:	6923      	ldr	r3, [r4, #16]
 800a22e:	b31b      	cbz	r3, 800a278 <__swbuf_r+0x68>
 800a230:	6823      	ldr	r3, [r4, #0]
 800a232:	6922      	ldr	r2, [r4, #16]
 800a234:	b2f6      	uxtb	r6, r6
 800a236:	1a98      	subs	r0, r3, r2
 800a238:	6963      	ldr	r3, [r4, #20]
 800a23a:	4637      	mov	r7, r6
 800a23c:	4283      	cmp	r3, r0
 800a23e:	dc04      	bgt.n	800a24a <__swbuf_r+0x3a>
 800a240:	4621      	mov	r1, r4
 800a242:	4628      	mov	r0, r5
 800a244:	f7ff fa30 	bl	80096a8 <_fflush_r>
 800a248:	b9e0      	cbnz	r0, 800a284 <__swbuf_r+0x74>
 800a24a:	68a3      	ldr	r3, [r4, #8]
 800a24c:	3b01      	subs	r3, #1
 800a24e:	60a3      	str	r3, [r4, #8]
 800a250:	6823      	ldr	r3, [r4, #0]
 800a252:	1c5a      	adds	r2, r3, #1
 800a254:	6022      	str	r2, [r4, #0]
 800a256:	701e      	strb	r6, [r3, #0]
 800a258:	6962      	ldr	r2, [r4, #20]
 800a25a:	1c43      	adds	r3, r0, #1
 800a25c:	429a      	cmp	r2, r3
 800a25e:	d004      	beq.n	800a26a <__swbuf_r+0x5a>
 800a260:	89a3      	ldrh	r3, [r4, #12]
 800a262:	07db      	lsls	r3, r3, #31
 800a264:	d506      	bpl.n	800a274 <__swbuf_r+0x64>
 800a266:	2e0a      	cmp	r6, #10
 800a268:	d104      	bne.n	800a274 <__swbuf_r+0x64>
 800a26a:	4621      	mov	r1, r4
 800a26c:	4628      	mov	r0, r5
 800a26e:	f7ff fa1b 	bl	80096a8 <_fflush_r>
 800a272:	b938      	cbnz	r0, 800a284 <__swbuf_r+0x74>
 800a274:	4638      	mov	r0, r7
 800a276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a278:	4621      	mov	r1, r4
 800a27a:	4628      	mov	r0, r5
 800a27c:	f000 f806 	bl	800a28c <__swsetup_r>
 800a280:	2800      	cmp	r0, #0
 800a282:	d0d5      	beq.n	800a230 <__swbuf_r+0x20>
 800a284:	f04f 37ff 	mov.w	r7, #4294967295
 800a288:	e7f4      	b.n	800a274 <__swbuf_r+0x64>
	...

0800a28c <__swsetup_r>:
 800a28c:	b538      	push	{r3, r4, r5, lr}
 800a28e:	4b2a      	ldr	r3, [pc, #168]	; (800a338 <__swsetup_r+0xac>)
 800a290:	4605      	mov	r5, r0
 800a292:	6818      	ldr	r0, [r3, #0]
 800a294:	460c      	mov	r4, r1
 800a296:	b118      	cbz	r0, 800a2a0 <__swsetup_r+0x14>
 800a298:	6a03      	ldr	r3, [r0, #32]
 800a29a:	b90b      	cbnz	r3, 800a2a0 <__swsetup_r+0x14>
 800a29c:	f7fc fc5c 	bl	8006b58 <__sinit>
 800a2a0:	89a3      	ldrh	r3, [r4, #12]
 800a2a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a2a6:	0718      	lsls	r0, r3, #28
 800a2a8:	d422      	bmi.n	800a2f0 <__swsetup_r+0x64>
 800a2aa:	06d9      	lsls	r1, r3, #27
 800a2ac:	d407      	bmi.n	800a2be <__swsetup_r+0x32>
 800a2ae:	2309      	movs	r3, #9
 800a2b0:	602b      	str	r3, [r5, #0]
 800a2b2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a2b6:	f04f 30ff 	mov.w	r0, #4294967295
 800a2ba:	81a3      	strh	r3, [r4, #12]
 800a2bc:	e034      	b.n	800a328 <__swsetup_r+0x9c>
 800a2be:	0758      	lsls	r0, r3, #29
 800a2c0:	d512      	bpl.n	800a2e8 <__swsetup_r+0x5c>
 800a2c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a2c4:	b141      	cbz	r1, 800a2d8 <__swsetup_r+0x4c>
 800a2c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a2ca:	4299      	cmp	r1, r3
 800a2cc:	d002      	beq.n	800a2d4 <__swsetup_r+0x48>
 800a2ce:	4628      	mov	r0, r5
 800a2d0:	f7fd fbda 	bl	8007a88 <_free_r>
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	6363      	str	r3, [r4, #52]	; 0x34
 800a2d8:	89a3      	ldrh	r3, [r4, #12]
 800a2da:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a2de:	81a3      	strh	r3, [r4, #12]
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	6063      	str	r3, [r4, #4]
 800a2e4:	6923      	ldr	r3, [r4, #16]
 800a2e6:	6023      	str	r3, [r4, #0]
 800a2e8:	89a3      	ldrh	r3, [r4, #12]
 800a2ea:	f043 0308 	orr.w	r3, r3, #8
 800a2ee:	81a3      	strh	r3, [r4, #12]
 800a2f0:	6923      	ldr	r3, [r4, #16]
 800a2f2:	b94b      	cbnz	r3, 800a308 <__swsetup_r+0x7c>
 800a2f4:	89a3      	ldrh	r3, [r4, #12]
 800a2f6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a2fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2fe:	d003      	beq.n	800a308 <__swsetup_r+0x7c>
 800a300:	4621      	mov	r1, r4
 800a302:	4628      	mov	r0, r5
 800a304:	f000 f883 	bl	800a40e <__smakebuf_r>
 800a308:	89a0      	ldrh	r0, [r4, #12]
 800a30a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a30e:	f010 0301 	ands.w	r3, r0, #1
 800a312:	d00a      	beq.n	800a32a <__swsetup_r+0x9e>
 800a314:	2300      	movs	r3, #0
 800a316:	60a3      	str	r3, [r4, #8]
 800a318:	6963      	ldr	r3, [r4, #20]
 800a31a:	425b      	negs	r3, r3
 800a31c:	61a3      	str	r3, [r4, #24]
 800a31e:	6923      	ldr	r3, [r4, #16]
 800a320:	b943      	cbnz	r3, 800a334 <__swsetup_r+0xa8>
 800a322:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a326:	d1c4      	bne.n	800a2b2 <__swsetup_r+0x26>
 800a328:	bd38      	pop	{r3, r4, r5, pc}
 800a32a:	0781      	lsls	r1, r0, #30
 800a32c:	bf58      	it	pl
 800a32e:	6963      	ldrpl	r3, [r4, #20]
 800a330:	60a3      	str	r3, [r4, #8]
 800a332:	e7f4      	b.n	800a31e <__swsetup_r+0x92>
 800a334:	2000      	movs	r0, #0
 800a336:	e7f7      	b.n	800a328 <__swsetup_r+0x9c>
 800a338:	2000007c 	.word	0x2000007c

0800a33c <_raise_r>:
 800a33c:	291f      	cmp	r1, #31
 800a33e:	b538      	push	{r3, r4, r5, lr}
 800a340:	4604      	mov	r4, r0
 800a342:	460d      	mov	r5, r1
 800a344:	d904      	bls.n	800a350 <_raise_r+0x14>
 800a346:	2316      	movs	r3, #22
 800a348:	6003      	str	r3, [r0, #0]
 800a34a:	f04f 30ff 	mov.w	r0, #4294967295
 800a34e:	bd38      	pop	{r3, r4, r5, pc}
 800a350:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a352:	b112      	cbz	r2, 800a35a <_raise_r+0x1e>
 800a354:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a358:	b94b      	cbnz	r3, 800a36e <_raise_r+0x32>
 800a35a:	4620      	mov	r0, r4
 800a35c:	f000 f830 	bl	800a3c0 <_getpid_r>
 800a360:	462a      	mov	r2, r5
 800a362:	4601      	mov	r1, r0
 800a364:	4620      	mov	r0, r4
 800a366:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a36a:	f000 b817 	b.w	800a39c <_kill_r>
 800a36e:	2b01      	cmp	r3, #1
 800a370:	d00a      	beq.n	800a388 <_raise_r+0x4c>
 800a372:	1c59      	adds	r1, r3, #1
 800a374:	d103      	bne.n	800a37e <_raise_r+0x42>
 800a376:	2316      	movs	r3, #22
 800a378:	6003      	str	r3, [r0, #0]
 800a37a:	2001      	movs	r0, #1
 800a37c:	e7e7      	b.n	800a34e <_raise_r+0x12>
 800a37e:	2400      	movs	r4, #0
 800a380:	4628      	mov	r0, r5
 800a382:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a386:	4798      	blx	r3
 800a388:	2000      	movs	r0, #0
 800a38a:	e7e0      	b.n	800a34e <_raise_r+0x12>

0800a38c <raise>:
 800a38c:	4b02      	ldr	r3, [pc, #8]	; (800a398 <raise+0xc>)
 800a38e:	4601      	mov	r1, r0
 800a390:	6818      	ldr	r0, [r3, #0]
 800a392:	f7ff bfd3 	b.w	800a33c <_raise_r>
 800a396:	bf00      	nop
 800a398:	2000007c 	.word	0x2000007c

0800a39c <_kill_r>:
 800a39c:	b538      	push	{r3, r4, r5, lr}
 800a39e:	2300      	movs	r3, #0
 800a3a0:	4d06      	ldr	r5, [pc, #24]	; (800a3bc <_kill_r+0x20>)
 800a3a2:	4604      	mov	r4, r0
 800a3a4:	4608      	mov	r0, r1
 800a3a6:	4611      	mov	r1, r2
 800a3a8:	602b      	str	r3, [r5, #0]
 800a3aa:	f7f8 fb14 	bl	80029d6 <_kill>
 800a3ae:	1c43      	adds	r3, r0, #1
 800a3b0:	d102      	bne.n	800a3b8 <_kill_r+0x1c>
 800a3b2:	682b      	ldr	r3, [r5, #0]
 800a3b4:	b103      	cbz	r3, 800a3b8 <_kill_r+0x1c>
 800a3b6:	6023      	str	r3, [r4, #0]
 800a3b8:	bd38      	pop	{r3, r4, r5, pc}
 800a3ba:	bf00      	nop
 800a3bc:	200004d4 	.word	0x200004d4

0800a3c0 <_getpid_r>:
 800a3c0:	f7f8 bb02 	b.w	80029c8 <_getpid>

0800a3c4 <__swhatbuf_r>:
 800a3c4:	b570      	push	{r4, r5, r6, lr}
 800a3c6:	460c      	mov	r4, r1
 800a3c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3cc:	4615      	mov	r5, r2
 800a3ce:	2900      	cmp	r1, #0
 800a3d0:	461e      	mov	r6, r3
 800a3d2:	b096      	sub	sp, #88	; 0x58
 800a3d4:	da0c      	bge.n	800a3f0 <__swhatbuf_r+0x2c>
 800a3d6:	89a3      	ldrh	r3, [r4, #12]
 800a3d8:	2100      	movs	r1, #0
 800a3da:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a3de:	bf0c      	ite	eq
 800a3e0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a3e4:	2340      	movne	r3, #64	; 0x40
 800a3e6:	2000      	movs	r0, #0
 800a3e8:	6031      	str	r1, [r6, #0]
 800a3ea:	602b      	str	r3, [r5, #0]
 800a3ec:	b016      	add	sp, #88	; 0x58
 800a3ee:	bd70      	pop	{r4, r5, r6, pc}
 800a3f0:	466a      	mov	r2, sp
 800a3f2:	f000 f849 	bl	800a488 <_fstat_r>
 800a3f6:	2800      	cmp	r0, #0
 800a3f8:	dbed      	blt.n	800a3d6 <__swhatbuf_r+0x12>
 800a3fa:	9901      	ldr	r1, [sp, #4]
 800a3fc:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a400:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a404:	4259      	negs	r1, r3
 800a406:	4159      	adcs	r1, r3
 800a408:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a40c:	e7eb      	b.n	800a3e6 <__swhatbuf_r+0x22>

0800a40e <__smakebuf_r>:
 800a40e:	898b      	ldrh	r3, [r1, #12]
 800a410:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a412:	079d      	lsls	r5, r3, #30
 800a414:	4606      	mov	r6, r0
 800a416:	460c      	mov	r4, r1
 800a418:	d507      	bpl.n	800a42a <__smakebuf_r+0x1c>
 800a41a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a41e:	6023      	str	r3, [r4, #0]
 800a420:	6123      	str	r3, [r4, #16]
 800a422:	2301      	movs	r3, #1
 800a424:	6163      	str	r3, [r4, #20]
 800a426:	b002      	add	sp, #8
 800a428:	bd70      	pop	{r4, r5, r6, pc}
 800a42a:	466a      	mov	r2, sp
 800a42c:	ab01      	add	r3, sp, #4
 800a42e:	f7ff ffc9 	bl	800a3c4 <__swhatbuf_r>
 800a432:	9900      	ldr	r1, [sp, #0]
 800a434:	4605      	mov	r5, r0
 800a436:	4630      	mov	r0, r6
 800a438:	f7fd fb96 	bl	8007b68 <_malloc_r>
 800a43c:	b948      	cbnz	r0, 800a452 <__smakebuf_r+0x44>
 800a43e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a442:	059a      	lsls	r2, r3, #22
 800a444:	d4ef      	bmi.n	800a426 <__smakebuf_r+0x18>
 800a446:	f023 0303 	bic.w	r3, r3, #3
 800a44a:	f043 0302 	orr.w	r3, r3, #2
 800a44e:	81a3      	strh	r3, [r4, #12]
 800a450:	e7e3      	b.n	800a41a <__smakebuf_r+0xc>
 800a452:	89a3      	ldrh	r3, [r4, #12]
 800a454:	6020      	str	r0, [r4, #0]
 800a456:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a45a:	81a3      	strh	r3, [r4, #12]
 800a45c:	9b00      	ldr	r3, [sp, #0]
 800a45e:	6120      	str	r0, [r4, #16]
 800a460:	6163      	str	r3, [r4, #20]
 800a462:	9b01      	ldr	r3, [sp, #4]
 800a464:	b15b      	cbz	r3, 800a47e <__smakebuf_r+0x70>
 800a466:	4630      	mov	r0, r6
 800a468:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a46c:	f000 f81e 	bl	800a4ac <_isatty_r>
 800a470:	b128      	cbz	r0, 800a47e <__smakebuf_r+0x70>
 800a472:	89a3      	ldrh	r3, [r4, #12]
 800a474:	f023 0303 	bic.w	r3, r3, #3
 800a478:	f043 0301 	orr.w	r3, r3, #1
 800a47c:	81a3      	strh	r3, [r4, #12]
 800a47e:	89a3      	ldrh	r3, [r4, #12]
 800a480:	431d      	orrs	r5, r3
 800a482:	81a5      	strh	r5, [r4, #12]
 800a484:	e7cf      	b.n	800a426 <__smakebuf_r+0x18>
	...

0800a488 <_fstat_r>:
 800a488:	b538      	push	{r3, r4, r5, lr}
 800a48a:	2300      	movs	r3, #0
 800a48c:	4d06      	ldr	r5, [pc, #24]	; (800a4a8 <_fstat_r+0x20>)
 800a48e:	4604      	mov	r4, r0
 800a490:	4608      	mov	r0, r1
 800a492:	4611      	mov	r1, r2
 800a494:	602b      	str	r3, [r5, #0]
 800a496:	f7f8 fafc 	bl	8002a92 <_fstat>
 800a49a:	1c43      	adds	r3, r0, #1
 800a49c:	d102      	bne.n	800a4a4 <_fstat_r+0x1c>
 800a49e:	682b      	ldr	r3, [r5, #0]
 800a4a0:	b103      	cbz	r3, 800a4a4 <_fstat_r+0x1c>
 800a4a2:	6023      	str	r3, [r4, #0]
 800a4a4:	bd38      	pop	{r3, r4, r5, pc}
 800a4a6:	bf00      	nop
 800a4a8:	200004d4 	.word	0x200004d4

0800a4ac <_isatty_r>:
 800a4ac:	b538      	push	{r3, r4, r5, lr}
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	4d05      	ldr	r5, [pc, #20]	; (800a4c8 <_isatty_r+0x1c>)
 800a4b2:	4604      	mov	r4, r0
 800a4b4:	4608      	mov	r0, r1
 800a4b6:	602b      	str	r3, [r5, #0]
 800a4b8:	f7f8 fafa 	bl	8002ab0 <_isatty>
 800a4bc:	1c43      	adds	r3, r0, #1
 800a4be:	d102      	bne.n	800a4c6 <_isatty_r+0x1a>
 800a4c0:	682b      	ldr	r3, [r5, #0]
 800a4c2:	b103      	cbz	r3, 800a4c6 <_isatty_r+0x1a>
 800a4c4:	6023      	str	r3, [r4, #0]
 800a4c6:	bd38      	pop	{r3, r4, r5, pc}
 800a4c8:	200004d4 	.word	0x200004d4

0800a4cc <_init>:
 800a4cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ce:	bf00      	nop
 800a4d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4d2:	bc08      	pop	{r3}
 800a4d4:	469e      	mov	lr, r3
 800a4d6:	4770      	bx	lr

0800a4d8 <_fini>:
 800a4d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4da:	bf00      	nop
 800a4dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4de:	bc08      	pop	{r3}
 800a4e0:	469e      	mov	lr, r3
 800a4e2:	4770      	bx	lr
